Command line args: clojush.problems.ec-ai-demos.fizzbuzz
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup in1 3 5 5 5 5 5 5 5 5 5 integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod)
error-function = #object[clojush.problems.ec_ai_demos.fizzbuzz$all_errors 0x12d2ddde clojush.problems.ec_ai_demos.fizzbuzz$all_errors@12d2ddde]
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 2666cba4ff7134995f7dda0362cb40c779610e6d
GitHub link = https://github.com/lspector/Clojush/commit/2666cba4ff7134995f7dda0362cb40c779610e6d
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup in1 3 5 5 5 5 5 5 5 5 5 integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod integer_mod)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.fizzbuzz$all_errors 0x12d2ddde clojush.problems.ec_ai_demos.fizzbuzz$all_errors@12d2ddde]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 250
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x7f0b93b4 clojush.pushgp.report$default_problem_specific_initial_report@7f0b93b4]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x1f736d00 clojush.pushgp.report$default_problem_specific_report@1f736d00]
random-seed = -53 -70 -49 107 -41 -26 30 -83 -11 47 -69 33 -79 108 -121 45
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "0baca76c-aed6-415c-b5fd-8434c17bfa80"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod})
Lexicase best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Lexicase best partial simplification: (integer_flush boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 1 3 1 4 2 2 2 2 2 2 2 2 2 2 2 2 2 1000 3 3 3 1 1 1 1 3 3 3 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 33
Lexicase best total error: 1087
Lexicase best mean error: 13.5875
Lexicase best size: 51
Percent parens: 0.196
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod})
Zero cases best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Zero cases best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 1 3 1 4 2 2 2 2 2 2 2 2 2 2 2 2 2 1000 3 3 3 1 1 1 1 3 3 3 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 33
Zero cases best number of zero cases: 33
Zero cases best total error: 1087
Zero cases best mean error: 13.5875
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (31 33 33 31 31 32 31 32 31 32 31 31 31 32 31 31 31 32 31 106 17 17 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 41 40 40 40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41 41 113 111 111 109 108 109 109 107 108 109 107 108 107 107 107 107 107 109 107 108)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (31 33 33 31 31 32 31 32 31 32 31 31 31 32 31 31 31 32 31 106 17 17 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 41 40 40 40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41 41 113 111 111 109 108 109 109 107 108 109 107 108 107 107 107 107 107 109 107 108)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 5} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 2, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction 3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup})
Best program: (exec_pop (integer_stackdepth 5 boolean_shove exec_flush integer_mod exec_yankdup) exec_do*count () 5 integer_yank boolean_eq boolean_yank boolean_flush 3 boolean_invert_second_then_and integer_sub integer_mod integer_dec boolean_yankdup)
Partial simplification: (5 3 integer_mod integer_dec)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 81
Mean: 1.0125
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 38783.115
Median total errors in population: 5654
Error averages by case: (486.981 485.081 485.143 486.22 483.399 484.505 483.609 483.727 482.883 484.0 483.099 482.163 483.326 483.41 483.543 484.572 482.749 483.822 483.912 484.255 485.813 485.95 484.27 483.441 483.74 482.898 483.197 483.337 482.628 483.77 484.05 483.192 484.472 484.617 484.897 485.037 485.317 485.461 485.741 485.881 484.891 483.411 482.857 484.276 483.708 484.13 483.556 484.973 485.397 485.819 486.243 486.665 486.092 485.507 486.913 487.32 487.729 488.136 488.545 488.952 483.225 488.232 488.283 486.374 487.402 485.481 485.558 486.574 485.62 484.656 485.724 483.855 483.919 483.989 484.007 484.083 484.137 482.177 483.273 483.318)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.492
Average program size in population (points): 31.721
Average percent parens in population: 0.232
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.055
Error (vector) diversity:			 0.056
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 2701654
--- Timings ---
Current time: 1481301876512 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction 5} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod})
Lexicase best program: (boolean_empty boolean_flush boolean_shove exec_dup_times () 5 exec_do*range () boolean_xor in1 integer_flush exec_dup (exec_yank 5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Lexicase best partial simplification: (boolean_empty boolean_flush boolean_shove exec_dup_times () 5 exec_do*range () boolean_xor in1 integer_flush exec_dup (exec_yank 5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 2 1 1 3 0 2 2 2 2 2 2 2 3 3 0 1 3 93 3 3 1 1 1 1 1 3 3 2 0 2 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 36
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction 5} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod})
Zero cases best program: (boolean_empty boolean_flush boolean_shove exec_dup_times () 5 exec_do*range () boolean_xor in1 integer_flush exec_dup (exec_yank 5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Zero cases best partial simplification: (boolean_empty boolean_flush boolean_shove exec_dup_times () 5 exec_do*range () boolean_xor in1 integer_flush exec_dup (exec_yank 5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min integer_mod)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 2 1 1 3 0 2 2 2 2 2 2 2 3 3 0 1 3 93 3 3 1 1 1 1 1 3 3 2 0 2 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 36
Zero cases best number of zero cases: 36
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 233 234 227 227 230 227 228 228 229 228 227 227 230 227 229 228 230 229 117 226 230 226 226 226 226 227 227 227 234 230 227 226 227 227 226 226 226 226 226 146 142 143 149 143 142 146 346 351 351 351 351 351 351 351 351 351 351 351 351 434 303 304 298 300 298 299 298 298 298 296 298 297 298 297 296 297 297 295 293)
Population mean number of elite cases: 20.67
Count of perfect (error zero) individuals by case: (229 233 234 227 227 230 227 228 228 229 228 227 227 230 227 229 228 230 229 117 226 230 226 226 226 226 227 227 227 234 230 227 226 227 227 226 226 226 226 226 146 142 143 149 143 142 146 346 351 351 351 351 351 351 351 351 351 351 351 351 434 303 304 298 300 298 299 298 298 298 296 298 297 298 297 296 297 297 295 293)
Population mean number of perfect (error zero) cases: 20.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 0 1 2 1 1 3 1 1 1 1 1 3 3 3 3 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 68
Mean: 0.85
Genome size: 44
Size: 55
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3890.036
Median total errors in population: 115
Error averages by case: (46.886 47.07 46.131 45.191 46.297 46.328 45.412 45.498 45.622 45.684 45.785 45.809 45.941 46.323 46.394 46.112 46.559 46.289 46.912 48.094 47.163 46.248 46.421 45.527 45.763 45.861 46.059 46.16 46.352 46.435 48.637 49.66 221.878 47.236 46.342 46.315 45.111 45.2 45.38 45.469 45.897 46.214 46.505 46.777 47.158 48.301 46.315 45.186 45.445 45.716 45.985 46.256 46.525 46.796 47.065 47.336 47.605 47.876 48.145 48.416 46.938 47.087 47.373 46.449 46.466 45.52 46.552 46.579 46.615 46.634 46.693 46.716 45.748 45.83 45.834 45.932 45.94 45.965 46.016 46.076)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.627
Average program size in population (points): 36.86
Average percent parens in population: 0.194
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 159
Genome diversity (% unique Plush genomes):	 0.377
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.058
Error (vector) diversity:			 0.064
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 5846580
--- Timings ---
Current time: 1481301893399 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div)) ())
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 3 4 2 1 1 1 0 0 0 2 2 2 2 2 3 1 2 2 2 3 3 1 3 1 1 1 1 1 1 3 3 1 1 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 37
Lexicase best total error: 72
Lexicase best mean error: 0.9
Lexicase best size: 58
Percent parens: 0.207
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div)) ())
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 3 4 2 1 1 1 0 0 0 2 2 2 2 2 3 1 2 2 2 3 3 1 3 1 1 1 1 1 1 3 3 1 1 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 37
Zero cases best number of zero cases: 37
Zero cases best total error: 72
Zero cases best mean error: 0.9
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 171 219 165 165 213 165 212 212 166 212 165 165 213 166 233 213 194 243 281 126 134 132 128 130 129 155 167 148 196 172 167 134 173 175 131 127 125 128 125 108 106 145 137 143 109 222 410 463 462 464 462 463 463 463 462 464 462 463 463 609 451 449 367 431 404 390 438 436 366 365 432 389 432 412 363 384 391 355 283)
Population mean number of elite cases: 22.08
Count of perfect (error zero) individuals by case: (325 171 219 165 165 213 165 212 212 166 212 165 165 213 166 233 213 194 243 281 126 134 132 128 130 129 155 167 148 196 172 167 134 173 175 131 127 125 128 125 108 106 145 137 143 109 222 410 463 462 464 462 463 463 463 462 464 462 463 463 609 451 449 367 431 404 390 438 436 366 365 432 389 432 412 363 384 391 355 283)
Population mean number of perfect (error zero) cases: 22.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_flush})
Best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_div integer_lt boolean_shove) (boolean_xor integer_mod exec_flush) ()) ())
Partial simplification: (integer_flush 5 integer_sub boolean_empty integer_lt integer_shove integer_mod integer_rot exec_yank integer_mod integer_rot exec_yank 5 boolean_swap exec_s (3 exec_while in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_div)))
Errors: [0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1 1 1 1 1 2N 2N 2N 2N 2N 2N 2N 0 0 0 0 0 0 0 0 0 0 0 0 0 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N 1N]
Total: 55N
Mean: 0.6875
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6603.604
Median total errors in population: 115
Error averages by case: (84.835 90.131 74.31 75.339 90.447 90.492 74.523 73.684 73.687 73.953 75.682 74.033 74.15 75.326 74.291 74.325 75.475 75.608 77.983 100.141 90.382 91.548 90.767 74.85 74.026 76.157 74.307 74.413 75.631 77.688 135.779 112.224 129.515 111.93 112.362 80.136 78.926 77.137 78.236 78.31 75.132 74.434 74.651 74.845 79.932 85.461 107.713 77.674 76.883 78.287 78.592 79.001 79.309 79.712 80.023 80.429 80.734 81.143 81.451 81.854 86.603 88.899 90.095 72.402 76.343 73.351 90.366 91.337 89.408 90.591 89.891 90.537 74.611 74.663 73.755 74.362 73.906 73.983 74.172 74.33)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.787
Average program size in population (points): 47.46
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.412
Total error diversity:				 0.136
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 9556734
--- Timings ---
Current time: 1481301909818 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 2 2 2 2 2 2 2 2 2 1 2 0 0 3 0 1 1 1 1 3 3 3 3 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 37
Lexicase best total error: 67
Lexicase best mean error: 0.8375
Lexicase best size: 55
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (5 integer_div integer_min)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 2 2 2 2 2 2 2 2 2 1 2 0 0 3 0 1 1 1 1 3 3 3 3 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 37
Zero cases best number of zero cases: 37
Zero cases best total error: 67
Zero cases best mean error: 0.8375
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 159 228 214 158 223 160 222 221 160 221 162 161 221 170 233 240 183 241 271 117 116 200 170 178 175 214 211 204 213 214 201 227 215 212 198 92 83 110 83 66 75 146 107 132 117 201 614 729 711 732 711 730 714 729 711 733 711 729 714 553 565 560 475 540 419 424 491 491 404 403 448 403 458 440 366 383 393 396 341)
Population mean number of elite cases: 26.56
Count of perfect (error zero) individuals by case: (213 159 228 214 158 223 160 222 221 160 221 162 161 221 170 233 240 183 241 271 117 116 200 170 178 175 214 211 204 213 214 201 227 215 212 198 92 83 110 83 66 75 146 107 132 117 201 614 729 711 732 711 730 714 729 711 733 711 729 714 553 565 560 475 540 419 424 491 491 404 403 448 403 458 440 366 383 393 396 341)
Population mean number of perfect (error zero) cases: 26.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_flush boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 3 0 1 1 1 1 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 3354.182
Median total errors in population: 119N
Error averages by case: (35.933 38.06 33.13 41.167 35.316 35.562 31.408 31.481 31.624 31.796 36.934 32.867 36.885 42.491 33.107 34.035 41.24 37.75 43.971 56.33 39.531 37.569 35.675 32.762 31.894 41.936 34.034 32.98 39.597 46.606 72.446 102.62 95.854 102.198 85.01 93.445 89.531 32.889 31.629 31.726 34.222 32.407 34.469 34.734 42.89 72.206 84.567 92.889 30.926 31.273 31.485 31.843 32.053 32.389 32.617 32.966 33.174 33.532 33.753 34.084 37.713 34.747 38.881 33.058 32.99 34.25 36.174 37.106 35.257 35.505 36.534 34.568 31.602 31.523 31.645 33.195 32.013 32.093 32.893 32.937)
Error minima by case: (0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.776
Average program size in population (points): 46.154
Average percent parens in population: 0.199
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.21
Error (vector) diversity:			 0.261
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 13247798
--- Timings ---
Current time: 1481301926372 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 2 2 2 3 2 2 2 2 2 0 0 3 63 1 3 1 1 1 1 1 1 1 1 1 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]
Lexicase best number of elite cases: 39
Lexicase best total error: 129
Lexicase best mean error: 1.6125
Lexicase best size: 55
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 2 2 2 3 2 2 2 2 2 0 0 3 63 1 3 1 1 1 1 1 1 1 1 1 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]
Zero cases best number of elite cases: 39
Zero cases best number of zero cases: 39
Zero cases best total error: 129
Zero cases best mean error: 1.6125
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 175 258 230 163 265 190 243 262 188 242 205 211 225 180 273 224 201 253 224 112 150 172 152 158 173 212 157 170 189 183 157 267 273 188 247 127 125 128 114 91 80 130 147 212 176 260 522 635 619 630 619 637 625 624 619 642 619 624 625 586 598 549 450 525 386 397 439 471 383 383 387 364 404 405 333 333 383 350 275)
Population mean number of elite cases: 25.41
Count of perfect (error zero) individuals by case: (211 175 258 230 163 265 190 243 262 188 242 205 211 225 180 273 224 201 253 224 112 150 172 152 158 173 212 157 170 189 183 157 267 273 188 247 127 125 128 114 91 80 130 147 212 176 260 522 635 619 630 619 637 625 624 619 642 619 624 625 586 598 549 450 525 386 397 439 471 383 383 387 364 404 405 333 333 383 350 275)
Population mean number of perfect (error zero) cases: 25.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 2 2 2 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 4117.02
Median total errors in population: 128
Error averages by case: (45.023 45.119 47.129 49.225 43.448 44.49 43.464 45.555 44.667 43.864 49.78 47.873 50.842 48.516 47.019 47.039 51.219 48.667 56.639 81.673 49.527 46.55 43.803 42.749 44.935 53.791 46.962 46.111 50.938 68.156 74.573 79.586 81.054 89.03 102.944 98.213 66.713 50.113 41.11 41.142 46.18 44.37 45.416 46.911 55.595 109.705 102.105 70.919 41.562 40.801 40.985 41.243 41.376 41.588 41.804 42.046 42.184 42.442 42.644 42.839 42.812 44.821 48.922 45.199 45.078 43.386 44.263 42.256 44.361 42.578 45.615 45.655 43.775 43.671 43.889 43.978 45.119 44.892 47.838 46.946)
Error minima by case: (0 0N 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.163
Average program size in population (points): 48.005
Average percent parens in population: 0.201
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.228
Error (vector) diversity:			 0.278
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 17092411
--- Timings ---
Current time: 1481301944137 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 2 2 2 3 2 2 2 2 2 0 0 3 63 1 3 1 1 1 1 1 1 1 1 1 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]
Lexicase best number of elite cases: 39
Lexicase best total error: 129
Lexicase best mean error: 1.6125
Lexicase best size: 55
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best partial simplification: (integer_flush 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank exec_do*times () 5 integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 2 2 2 3 2 2 2 2 2 0 0 3 63 1 3 1 1 1 1 1 1 1 1 1 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5]
Zero cases best number of elite cases: 39
Zero cases best number of zero cases: 39
Zero cases best total error: 129
Zero cases best mean error: 1.6125
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 187 252 207 182 249 194 233 250 195 250 205 215 237 198 253 236 197 187 254 109 127 161 141 161 177 211 145 162 165 230 221 264 227 189 200 158 116 120 101 74 64 123 177 235 209 312 517 669 661 671 661 678 664 668 661 679 661 668 664 662 673 529 460 523 426 424 459 476 415 411 390 372 405 399 346 339 359 340 286)
Population mean number of elite cases: 26.20
Count of perfect (error zero) individuals by case: (224 187 252 207 182 249 194 233 250 195 250 205 215 237 198 253 236 197 187 254 109 127 161 141 161 177 211 145 162 165 230 221 264 227 189 200 158 116 120 101 74 64 123 177 235 209 312 517 669 661 671 661 678 664 668 661 679 661 668 664 662 673 529 460 523 426 424 459 476 415 411 390 372 405 399 346 339 359 340 286)
Population mean number of perfect (error zero) cases: 26.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 2 2 2 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 5165.641
Median total errors in population: 129
Error averages by case: (57.946 55.091 56.17 57.357 64.553 69.631 62.755 68.736 68.003 69.005 70.03 65.359 70.31 70.816 70.611 64.585 69.659 70.24 75.962 84.196 60.476 58.632 63.96 56.94 69.092 74.162 65.594 63.501 72.512 78.883 77.174 112.186 87.036 86.211 80.934 78.789 56.449 54.127 48.775 48.831 60.341 65.793 68.354 58.474 73.719 108.084 95.914 63.381 48.219 48.415 48.577 48.803 48.935 49.143 49.325 49.546 49.68 49.906 50.077 50.276 55.618 58.639 59.892 55.108 55.042 55.329 57.316 55.344 62.403 57.66 68.591 68.852 63.926 62.797 64.102 65.147 71.21 69.062 69.147 70.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.869
Average program size in population (points): 49.307
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.246
Error (vector) diversity:			 0.317
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 21040626
--- Timings ---
Current time: 1481301961861 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction 5} {:close 0, :instruction 3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) integer_lt boolean_xor in1 5 3 exec_yankdup boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (integer_mod exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) integer_lt boolean_xor in1 5 3 exec_yankdup boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (integer_mod exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove 5 integer_min) ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 41 4 1 1 1 1 1 1 2 2 2 2 2 2 2 3 0 0 0 0 0 0 0 108 1 1 1 1 1 3 3 42 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 40
Lexicase best total error: 244
Lexicase best mean error: 3.05
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction 5} {:close 0, :instruction 3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) integer_lt boolean_xor in1 5 3 exec_yankdup boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (integer_mod exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min)) ())
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) integer_lt boolean_xor in1 5 3 exec_yankdup boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (integer_mod exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_fromboolean) (exec_noop) in1 integer_mod exec_do*count ()) ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 41 4 1 1 1 1 1 1 2 2 2 2 2 2 2 3 0 0 0 0 0 0 0 108 1 1 1 1 1 3 3 42 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 40
Zero cases best number of zero cases: 40
Zero cases best total error: 244
Zero cases best mean error: 3.05
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 195 252 198 193 258 198 251 257 199 256 208 213 245 182 256 220 184 211 296 105 111 149 130 150 145 196 124 170 160 204 189 233 180 191 191 194 131 149 125 76 75 125 173 210 235 346 506 650 645 651 645 653 645 650 644 654 644 650 645 671 703 587 474 525 451 424 464 482 419 403 414 376 411 424 350 352 390 367 318)
Population mean number of elite cases: 26.25
Count of perfect (error zero) individuals by case: (223 195 252 198 193 258 198 251 257 199 256 208 213 245 182 256 220 184 211 296 105 111 149 130 150 145 196 124 170 160 204 189 233 180 191 191 194 131 149 125 76 75 125 173 210 235 346 506 650 645 651 645 653 645 650 644 654 644 650 645 671 703 587 474 525 451 424 464 482 419 403 414 376 411 424 350 352 390 367 318)
Population mean number of perfect (error zero) cases: 26.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 2 2 2 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 4512.014
Median total errors in population: 163
Error averages by case: (50.058 49.163 50.311 49.381 55.526 58.543 51.683 55.71 55.957 55.965 59.067 56.306 58.316 60.321 59.599 55.202 55.641 76.4 65.619 68.406 54.63 50.771 55.011 47.975 56.147 62.294 58.46 56.55 62.091 66.813 81.321 75.61 65.447 73.104 80.888 92.098 46.497 49.212 43.097 44.177 53.4 53.845 65.193 51.543 79.477 78.22 101.93 57.094 44.571 42.797 43.975 43.207 44.38 44.608 44.794 45.025 45.194 45.429 45.61 45.836 48.744 49.745 53.9 48.188 48.139 48.355 67.329 47.39 50.432 48.702 62.645 56.854 53.001 50.838 53.959 53.068 56.054 55.974 56.136 57.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.969
Average program size in population (points): 50.863
Average percent parens in population: 0.211
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.273
Error (vector) diversity:			 0.371
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 25230664
--- Timings ---
Current time: 1481301979347 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 103
Lexicase best mean error: 1.2875
Lexicase best size: 50
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 103
Zero cases best mean error: 1.2875
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 185 240 189 191 255 192 246 258 208 251 211 215 248 194 252 220 180 210 259 104 109 139 117 143 143 180 133 172 172 187 187 231 151 178 172 160 106 121 94 82 75 122 200 248 274 372 529 671 669 672 669 674 669 672 669 674 669 672 669 654 671 562 468 508 435 422 455 488 414 409 411 385 397 408 335 337 384 378 312)
Population mean number of elite cases: 26.20
Count of perfect (error zero) individuals by case: (217 185 240 189 191 255 192 246 258 208 251 211 215 248 194 252 220 180 210 259 104 109 139 117 143 143 180 133 172 172 187 187 231 151 178 172 160 106 121 94 82 75 122 200 248 274 372 529 671 669 672 669 674 669 672 669 674 669 672 669 654 671 562 468 508 435 422 455 488 414 409 411 385 397 408 335 337 384 378 312)
Population mean number of perfect (error zero) cases: 26.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 2 2 2 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 4441.015
Median total errors in population: 178N
Error averages by case: (48.143 50.263 49.379 51.497 58.608 56.904 52.723 56.81 54.943 57.144 58.441 57.932 61.136 61.66 55.582 51.214 54.258 63.672 66.593 68.798 58.63 49.81 56.052 49.074 54.111 59.692 62.083 52.667 63.175 61.427 89.93 74.155 60.616 71.241 80.162 62.296 47.39 49.098 42.868 43.951 50.47 52.808 66.874 55.432 76.939 82.602 77.347 57.099 45.328 43.514 43.69 43.884 44.052 44.246 44.422 44.616 44.784 44.978 45.154 45.348 47.819 47.814 49.006 49.286 49.231 48.499 63.424 47.573 52.516 55.752 60.718 56.026 53.028 51.914 55.073 53.117 56.228 55.033 54.065 57.178)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.34
Average program size in population (points): 51.329
Average percent parens in population: 0.212
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.282
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 29502413
--- Timings ---
Current time: 1481301996596 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 103
Lexicase best mean error: 1.2875
Lexicase best size: 50
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 103
Zero cases best mean error: 1.2875
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 207 233 212 195 253 226 244 260 259 267 239 243 243 223 244 220 213 197 229 88 115 145 116 175 184 201 143 206 232 250 206 263 241 256 196 150 127 108 91 95 88 115 180 203 262 381 492 696 693 696 693 700 693 696 693 699 693 696 693 689 663 559 512 517 487 471 485 492 448 455 426 402 406 387 362 377 395 374 333)
Population mean number of elite cases: 27.49
Count of perfect (error zero) individuals by case: (188 207 233 212 195 253 226 244 260 259 267 239 243 243 223 244 220 213 197 229 88 115 145 116 175 184 201 143 206 232 250 206 263 241 256 196 150 127 108 91 95 88 115 180 203 262 381 492 696 693 696 693 700 693 696 693 699 693 696 693 689 663 559 512 517 487 471 485 492 448 455 426 402 406 387 362 377 395 374 333)
Population mean number of perfect (error zero) cases: 27.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count ()) ())
Partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times integer_flush) 5 boolean_dup 5 boolean_dup integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod integer_rot exec_yank 5 boolean_swap exec_s (boolean_rot 3 exec_while (boolean_pop) integer_mod 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 2 2 2 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 4272.832
Median total errors in population: 179N
Error averages by case: (45.031 46.107 47.338 47.313 49.622 50.767 45.69 52.02 46.915 48.941 49.456 54.576 58.208 57.751 52.005 48.332 50.545 63.048 66.35 68.127 52.566 43.663 75.932 45.124 46.329 48.111 60.914 49.456 52.111 60.537 102.06 73.03 56.497 61.26 62.042 66.102 52.401 52.568 50.293 50.532 45.525 45.643 56.133 55.267 93.866 72.278 70.723 59.874 51.063 49.915 50.308 50.399 50.81 50.873 51.328 51.361 51.834 51.835 52.348 52.319 44.673 45.675 44.907 52.043 48.09 45.372 51.306 45.419 45.599 49.809 46.648 43.934 46.067 44.794 54.08 46.191 48.289 46.914 45.999 53.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0)
Average genome size in population (length): 39.379
Average program size in population (points): 50.367
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.302
Error (vector) diversity:			 0.423
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 33641201
--- Timings ---
Current time: 1481302013911 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Lexicase best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 103
Lexicase best mean error: 1.2875
Lexicase best size: 50
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not boolean_not 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove 5 integer_div integer_min exec_stackdepth))
Zero cases best errors: [1 1 1 1 1 1 1 1 4 0 0 1 47 2 2 4 1 1 1 2 2 2 2 2 0 0 1 3 0 0 0 0 0 0 0 0 1 1 1 1 3 3 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 103
Zero cases best mean error: 1.2875
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 243 244 250 227 262 246 272 286 272 301 281 307 256 232 274 239 224 183 222 91 113 140 121 176 166 186 143 249 255 311 250 319 287 288 229 197 147 157 106 90 98 115 179 226 239 344 455 653 665 666 665 668 664 666 664 668 664 666 664 700 687 564 537 494 492 497 470 518 452 486 467 419 409 436 388 388 371 392 350)
Population mean number of elite cases: 28.20
Count of perfect (error zero) individuals by case: (210 243 244 250 227 262 246 272 286 272 301 281 307 256 232 274 239 224 183 222 91 113 140 121 176 166 186 143 249 255 311 250 319 287 288 229 197 147 157 106 90 98 115 179 226 239 344 455 653 665 666 665 668 664 666 664 668 664 666 664 700 687 564 537 494 492 497 470 518 452 486 467 419 409 436 388 388 371 392 350)
Population mean number of perfect (error zero) cases: 28.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times boolean_yank exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 5 integer_rot exec_shove (5 boolean_swap) exec_if (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times boolean_yank exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 5 integer_rot exec_shove (5) exec_if (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 2 1 0 1 1 1 1 1 1 0 0 0 0 0 3 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 46
Mean: 0.575
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3930.197
Median total errors in population: 139
Error averages by case: (42.967 42.015 44.367 42.208 44.397 50.464 49.544 48.589 45.755 48.816 43.063 43.164 44.534 47.681 41.964 48.069 44.448 49.043 50.843 51.37 44.504 44.639 59.838 48.981 49.196 43.545 49.529 49.153 46.159 49.624 90.209 66.767 49.168 56.119 54.86 60.265 47.954 45.032 45.668 47.953 46.484 44.6 45.639 52.16 79.886 69.397 63.02 57.334 47.529 47.444 47.886 48.018 48.482 48.586 49.086 49.16 49.682 49.726 50.286 50.3 46.607 42.613 43.83 48.965 42.088 43.214 50.155 44.311 43.378 43.501 47.457 44.527 46.753 48.672 47.771 44.929 45.169 47.933 46.033 45.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N)
Average genome size in population (length): 39.84
Average program size in population (points): 50.671
Average percent parens in population: 0.213
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.301
Error (vector) diversity:			 0.424
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 37886017
--- Timings ---
Current time: 1481302031166 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 2, :instruction 5} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times exec_rot (5) () (integer_inc integer_gt boolean_yankdup) integer_sub boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times exec_rot (5) () (integer_inc integer_gt boolean_yankdup) integer_sub boolean_rot 3 exec_while boolean_pop in1 boolean_yank boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod (boolean_pop) in1 boolean_yank exec_dup_times () exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean) (exec_noop) integer_shove 5 integer_min exec_stackdepth)
Lexicase best errors: [1 1 1 1 1 1 1 1 4 4 0 0 0 0 0 0 1 1 1 2 2 2 2 2 3 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 5 5]
Lexicase best number of elite cases: 45
Lexicase best total error: 66
Lexicase best mean error: 0.825
Lexicase best size: 55
Percent parens: 0.218
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 2, :instruction 5} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times exec_rot (5) () (integer_inc integer_gt boolean_yankdup) integer_sub boolean_rot 3 exec_while (boolean_pop) in1 boolean_yank boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean integer_mod) (exec_noop) integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times exec_rot (5) () (integer_inc integer_gt boolean_yankdup) integer_sub boolean_rot 3 exec_while boolean_pop in1 boolean_yank boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items integer_max integer_yank integer_fromboolean) (exec_noop) integer_shove integer_div integer_min exec_stackdepth)
Zero cases best errors: [1 1 1 1 1 1 1 1 4 4 0 0 0 0 0 0 1 1 1 2 2 2 2 2 3 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 5 5]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 66
Zero cases best mean error: 0.825
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 237 242 248 225 250 231 255 270 271 299 273 282 247 203 240 210 173 168 224 68 98 110 107 144 162 189 175 283 292 336 259 326 294 290 229 183 133 143 91 84 94 109 165 215 227 308 426 646 664 665 663 665 663 664 663 665 663 664 663 713 692 568 548 515 505 517 472 522 459 486 480 442 416 439 367 399 380 384 368)
Population mean number of elite cases: 27.91
Count of perfect (error zero) individuals by case: (200 237 242 248 225 250 231 255 270 271 299 273 282 247 203 240 210 173 168 224 68 98 110 107 144 162 189 175 283 292 336 259 326 294 290 229 183 133 143 91 84 94 109 165 215 227 308 426 646 664 665 663 665 663 664 663 665 663 664 663 713 692 568 548 515 505 517 472 522 459 486 480 442 416 439 367 399 380 384 368)
Population mean number of perfect (error zero) cases: 27.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times boolean_yank exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 5 integer_rot exec_shove (5 boolean_swap) exec_if (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times boolean_yank exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 5 integer_rot exec_shove 5 exec_if (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 2 1 0 1 1 1 1 1 1 0 0 0 0 0 3 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 46
Mean: 0.575
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3790.0
Median total errors in population: 329/2
Error averages by case: (37.076 37.178 40.48 37.327 45.569 42.698 47.827 48.946 48.081 51.405 42.921 45.355 45.906 55.859 52.088 55.909 47.252 54.555 58.927 54.673 37.671 40.758 50.017 45.136 48.418 42.766 50.603 55.164 52.426 57.682 72.532 58.478 50.801 66.986 56.747 55.489 48.244 46.519 44.172 45.326 41.689 42.716 44.09 43.121 66.811 64.557 56.25 54.238 46.356 44.963 45.29 45.626 45.949 46.489 46.831 47.181 47.518 47.868 48.21 48.56 37.69 37.714 39.972 39.107 38.15 38.34 43.295 38.567 39.573 40.627 42.77 41.749 43.891 42.943 49.999 42.242 43.665 47.095 48.437 43.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.334
Average program size in population (points): 51.257
Average percent parens in population: 0.213
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.33
Error (vector) diversity:			 0.483
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 42188612
--- Timings ---
Current time: 1481302048073 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 39
Lexicase best mean error: 0.4875
Lexicase best size: 40
Percent parens: 0.225
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 39
Zero cases best mean error: 0.4875
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 207 206 231 213 226 227 248 261 267 285 276 269 206 205 235 184 151 137 195 108 127 131 140 167 183 236 202 324 297 344 281 393 304 315 239 217 158 151 76 86 88 118 173 205 214 297 421 635 667 672 667 673 667 672 667 673 667 672 667 709 677 574 570 545 543 539 502 535 503 521 489 471 431 437 393 420 381 386 378)
Population mean number of elite cases: 28.41
Count of perfect (error zero) individuals by case: (178 207 206 231 213 226 227 248 261 267 285 276 269 206 205 235 184 151 137 195 108 127 131 140 167 183 236 202 324 297 344 281 393 304 315 239 217 158 151 76 86 88 118 173 205 214 297 421 635 667 672 667 673 667 672 667 673 667 672 667 709 677 574 570 545 543 539 502 535 503 521 489 471 431 437 393 420 381 386 378)
Population mean number of perfect (error zero) cases: 28.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3964.496
Median total errors in population: 173N
Error averages by case: (41.058 41.151 42.458 42.411 49.536 46.67 54.751 47.962 44.908 53.153 45.239 46.214 44.881 52.958 66.878 70.548 51.377 55.953 55.078 53.549 43.584 42.772 52.083 48.028 50.996 46.3 45.887 67.049 47.211 56.626 70.827 61.257 50.865 61.763 58.616 55.786 51.882 46.386 44.978 45.122 44.417 46.562 46.23 48.534 70.856 71.336 63.047 56.006 51.081 44.729 44.925 45.151 45.343 45.569 45.765 45.991 46.183 46.409 46.605 46.831 40.647 40.7 43.995 46.023 41.139 41.213 50.178 41.284 41.398 42.554 45.722 53.673 55.875 46.824 45.94 46.115 46.015 45.91 46.036 46.934)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.768
Average program size in population (points): 50.48
Average percent parens in population: 0.211
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.315
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 46313166
--- Timings ---
Current time: 1481302065075 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 39
Lexicase best mean error: 0.4875
Lexicase best size: 40
Percent parens: 0.225
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 39
Zero cases best mean error: 0.4875
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 229 238 240 228 246 240 256 261 255 268 274 265 240 251 267 225 196 164 217 115 142 158 153 169 203 228 199 324 296 328 236 346 286 359 220 211 171 148 72 114 114 136 166 198 201 268 388 651 666 669 666 670 666 669 666 670 666 669 666 673 644 565 565 534 528 522 493 524 504 506 490 474 442 461 411 456 420 406 407)
Population mean number of elite cases: 28.73
Count of perfect (error zero) individuals by case: (199 229 238 240 228 246 240 256 261 255 268 274 265 240 251 267 225 196 164 217 115 142 158 153 169 203 228 199 324 296 328 236 346 286 359 220 211 171 148 72 114 114 136 166 198 201 268 388 651 666 669 666 670 666 669 666 670 666 669 666 673 644 565 565 534 528 522 493 524 504 506 490 474 442 461 411 456 420 406 407)
Population mean number of perfect (error zero) cases: 28.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3673.356
Median total errors in population: 319/2
Error averages by case: (37.05 38.146 39.297 38.33 42.692 43.702 44.097 46.037 41.989 54.218 42.27 46.582 40.811 49.86 58.26 59.292 60.631 50.011 50.464 49.146 38.53 38.592 49.993 45.094 51.46 42.4 44.165 59.706 42.797 51.336 66.588 64.186 49.307 51.627 62.962 53.314 47.933 46.442 41.589 41.752 40.254 41.609 43.38 42.937 66.597 60.17 49.214 51.268 46.95 41.384 41.648 41.924 42.182 42.464 42.728 43.004 43.262 43.544 43.808 44.084 36.671 36.732 38.991 41.987 38.109 38.267 40.326 38.414 40.502 40.595 40.746 46.789 50.987 43.005 43.13 44.171 44.116 44.18 46.308 44.261)
Error minima by case: (0 0 0 0 0 0 0 0N 0N 0 0 0 0 0 0N 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.422
Average program size in population (points): 49.854
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.332
Error (vector) diversity:			 0.472
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 50530657
--- Timings ---
Current time: 1481302082115 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () integer_stackdepth boolean_pop in1 exec_dup_times () integer_mod (boolean_pop) in1 boolean_yank exec_dup_times () integer_min exec_stackdepth)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 38
Percent parens: 0.184
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod (boolean_pop) in1 exec_dup_times () 5 integer_div integer_min)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 226 235 227 233 256 241 252 266 259 273 269 268 253 232 239 228 193 158 214 120 137 141 146 150 179 224 197 336 321 354 259 384 304 377 254 201 169 122 53 109 128 155 185 187 206 266 382 685 705 708 705 709 705 708 705 709 705 708 705 668 645 577 551 529 535 523 503 531 500 506 496 476 444 453 397 441 431 393 395)
Population mean number of elite cases: 29.21
Count of perfect (error zero) individuals by case: (195 226 235 227 233 256 241 252 266 259 273 269 268 253 232 239 228 193 158 214 120 137 141 146 150 179 224 197 336 321 354 259 384 304 377 254 201 169 122 53 109 128 155 185 187 206 266 382 685 705 708 705 709 705 708 705 709 705 708 705 668 645 577 551 529 535 523 503 531 500 506 496 476 444 453 397 441 431 393 395)
Population mean number of perfect (error zero) cases: 29.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 4759.772
Median total errors in population: 161
Error averages by case: (55.027 53.101 54.264 55.26 58.57 54.456 59.634 56.898 59.914 67.318 63.402 63.594 59.782 67.509 68.458 71.145 79.306 60.745 66.815 65.553 54.512 54.588 56.918 58.952 70.25 58.277 56.764 73.82 57.929 68.8 70.101 73.956 59.55 68.111 68.217 61.923 58.031 54.209 52.542 51.663 55.198 57.462 58.327 60.411 75.741 63.027 63.598 69.132 55.9 51.22 51.379 51.55 51.703 51.88 52.039 52.21 52.363 52.54 52.699 52.87 52.676 53.737 54.905 55.029 53.115 54.181 56.214 54.344 56.43 55.5 54.714 64.48 67.588 56.863 54.977 65.306 60.973 62.997 63.391 61.239)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.856
Average program size in population (points): 49.377
Average percent parens in population: 0.213
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.31
Error (vector) diversity:			 0.457
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 54687080
--- Timings ---
Current time: 1481302098900 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () integer_shove 5 exec_stackdepth)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 38
Percent parens: 0.184
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod (boolean_pop) in1 exec_dup_times () exec_stackdepth)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 226 226 222 213 250 217 247 265 240 301 273 285 265 247 273 241 194 162 212 147 154 168 169 190 201 255 234 404 352 377 271 434 328 396 290 248 170 157 68 121 135 153 190 190 214 247 376 696 718 717 717 718 717 717 717 719 717 717 717 685 671 616 590 581 569 568 551 578 539 572 543 524 497 502 455 487 482 449 429)
Population mean number of elite cases: 30.88
Count of perfect (error zero) individuals by case: (202 226 226 222 213 250 217 247 265 240 301 273 285 265 247 273 241 194 162 212 147 154 168 169 190 201 255 234 404 352 377 271 434 328 396 290 248 170 157 68 121 135 153 190 190 214 247 376 696 718 717 717 718 717 717 717 719 717 717 717 685 671 616 590 581 569 568 551 578 539 572 543 524 497 502 455 487 482 449 429)
Population mean number of perfect (error zero) cases: 30.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 2711.232
Median total errors in population: 289/2
Error averages by case: (28.992 29.089 27.253 27.249 31.474 30.588 33.766 30.571 30.984 41.412 33.183 36.349 32.008 32.914 34.328 34.011 37.523 30.684 35.151 35.715 30.47 28.585 33.853 40.767 47.032 31.59 28.36 39.095 28.618 39.874 47.006 45.704 32.304 36.076 36.768 39.068 36.13 36.917 30.422 30.458 31.16 28.587 31.977 32.636 60.306 39.778 34.57 48.451 33.005 30.052 30.309 30.566 30.819 31.075 31.33 31.585 31.836 32.093 32.35 32.607 29.629 28.676 31.79 29.883 30.014 28.137 33.125 28.232 31.418 29.276 29.556 45.412 37.579 34.608 28.759 34.848 35.747 35.778 34.262 37.07)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.19
Average program size in population (points): 49.77
Average percent parens in population: 0.212
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.329
Error (vector) diversity:			 0.461
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 58811095
--- Timings ---
Current time: 1481302115741 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while boolean_pop in1 boolean_yank exec_dup_times () 5 integer_div)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 38
Percent parens: 0.184
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod () in1 boolean_yank exec_dup_times () 5 integer_div integer_min)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 259 241 273 252 267 261 243 277 259 293 277 309 259 243 268 240 226 189 194 136 152 170 153 178 186 248 228 352 336 393 285 411 362 371 279 215 154 132 65 116 143 140 175 180 220 284 398 697 724 724 724 726 724 724 724 726 724 724 724 668 636 567 557 533 516 514 490 501 489 509 472 475 446 437 402 416 389 400 379)
Population mean number of elite cases: 29.98
Count of perfect (error zero) individuals by case: (227 259 241 273 252 267 261 243 277 259 293 277 309 259 243 268 240 226 189 194 136 152 170 153 178 186 248 228 352 336 393 285 411 362 371 279 215 154 132 65 116 143 140 175 180 220 284 398 697 724 724 724 726 724 724 724 726 724 724 724 668 636 567 557 533 516 514 490 501 489 509 472 475 446 437 402 416 389 400 379)
Population mean number of perfect (error zero) cases: 29.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3001.799
Median total errors in population: 339/2
Error averages by case: (30.986 31.085 32.357 30.263 35.546 33.774 39.771 40.895 33.083 46.376 33.529 34.942 40.34 40.346 49.315 45.932 34.756 36.725 38.429 40.159 30.47 31.598 33.987 39.016 48.518 36.982 37.735 48.34 32.434 42.472 55.677 41.828 38.781 44.388 42.516 37.763 39.066 39.607 32.478 32.494 33.247 33.862 35.558 40.013 67.283 36.146 47.429 58.814 36.114 32.035 32.292 32.549 32.798 33.055 33.312 33.569 33.818 34.075 34.332 34.589 30.665 30.756 32.862 32.007 31.104 30.327 38.263 33.372 31.563 30.505 31.892 44.824 37.757 35.901 40.077 39.327 41.148 35.223 39.469 45.108)
Error minima by case: (0 0N 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.513
Average program size in population (points): 50.319
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.363
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 62903674
--- Timings ---
Current time: 1481302132483 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () 5 integer_min exec_stackdepth)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 38
Percent parens: 0.184
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 exec_dup_times () integer_min exec_stackdepth)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 199 185 206 201 208 210 200 228 230 285 265 292 263 259 252 206 200 173 222 155 178 204 191 207 212 265 241 360 373 404 321 414 383 396 316 268 194 126 66 107 127 120 171 168 200 242 362 690 732 732 732 733 732 732 732 733 732 732 732 689 668 629 631 604 596 590 572 584 557 574 534 546 507 516 480 494 456 435 418)
Population mean number of elite cases: 31.07
Count of perfect (error zero) individuals by case: (190 199 185 206 201 208 210 200 228 230 285 265 292 263 259 252 206 200 173 222 155 178 204 191 207 212 265 241 360 373 404 321 414 383 396 316 268 194 126 66 107 127 120 171 168 200 242 362 690 732 732 732 733 732 732 732 733 732 732 732 689 668 629 631 604 596 590 572 584 557 574 534 546 507 516 480 494 456 435 418)
Population mean number of perfect (error zero) cases: 31.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3148.556
Median total errors in population: 339/2
Error averages by case: (33.023 31.097 32.287 30.292 37.43 34.62 35.684 35.713 35.878 49.138 40.29 37.329 50.5 35.676 46.478 43.052 41.197 38.846 37.106 39.159 32.494 32.579 36.727 41.87 49.114 38.971 37.418 51.048 33.621 41.419 53.553 48.686 37.167 40.085 47.797 47.019 40.095 40.033 38.448 39.455 35.247 37.464 38.377 46.96 58.186 44.609 45.141 56.721 42.342 38.978 39.233 39.49 39.741 39.985 40.225 40.467 40.703 40.945 41.185 41.427 30.634 31.702 30.788 30.862 30.985 31.07 35.162 34.228 31.249 30.302 34.376 35.581 36.449 39.539 35.7 35.919 39.852 38.945 42.157 53.236)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.461
Average program size in population (points): 50.34
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.34
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 66944784
--- Timings ---
Current time: 1481302149206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while boolean_pop in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))
Lexicase best errors: [1N 1N 1N 1N 1N 1N 1N 1N 1N 4 0 0 0 0 0 0 1 1 1 2 2N 2N 2N 2N 2N 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3N 3N 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N]
Lexicase best number of elite cases: 47
Lexicase best total error: 48N
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.178
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () 5 integer_div integer_min integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))
Zero cases best errors: [1N 1N 1N 1N 1N 1N 1N 1N 1N 4 0 0 0 0 0 0 1 1 1 2 2N 2N 2N 2N 2N 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3N 3N 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 48N
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 246 224 235 241 250 245 219 258 260 305 298 285 257 259 266 212 215 188 206 174 183 199 199 214 204 295 245 354 380 400 335 437 385 408 320 281 193 130 67 108 136 111 164 170 188 242 369 663 720 720 720 721 720 720 720 721 720 720 720 636 607 557 571 534 539 529 515 533 512 510 489 490 471 471 431 472 443 392 404)
Population mean number of elite cases: 30.48
Count of perfect (error zero) individuals by case: (224 246 224 235 241 250 245 219 258 260 305 298 285 257 259 266 212 215 188 206 174 183 199 199 214 204 295 245 354 380 400 335 437 385 408 320 281 193 130 67 108 136 111 164 170 188 242 369 663 720 720 720 721 720 720 720 721 720 720 720 636 607 557 571 534 539 529 515 533 512 510 489 490 471 471 431 472 443 392 404)
Population mean number of perfect (error zero) cases: 30.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3509.678
Median total errors in population: 169
Error averages by case: (36.053 35.206 37.506 36.305 36.488 41.649 41.705 45.781 40.168 51.277 46.241 43.467 52.104 42.064 51.939 59.658 41.793 41.312 42.473 45.937 34.535 36.555 39.758 49.806 50.307 42.448 45.561 50.4 38.356 48.131 46.293 46.76 38.417 40.635 48.052 47.182 43.148 45.606 41.847 43.97 39.196 60.319 46.183 50.642 57.768 44.226 44.232 52.737 48.311 44.476 44.672 44.868 45.06 45.256 45.452 45.648 45.84 46.036 46.232 46.428 34.768 33.835 36.044 35.107 36.233 38.327 38.249 36.377 35.467 34.407 37.609 41.815 41.803 47.66 44.809 49.121 46.976 44.066 50.564 55.966)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0 0)
Average genome size in population (length): 39.103
Average program size in population (points): 49.753
Average percent parens in population: 0.214
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.346
Error (vector) diversity:			 0.486
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 71032905
--- Timings ---
Current time: 1481302166143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while () in1 boolean_yank exec_dup_times () integer_shove 5 integer_div)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 38
Percent parens: 0.184
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 exec_dup_items exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod () in1 boolean_yank exec_dup_times () integer_shove 5 integer_div)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 246 253 249 239 276 251 255 254 261 320 294 278 300 276 277 234 214 185 207 178 181 214 212 239 187 297 231 353 378 420 351 442 382 407 321 292 190 144 66 108 126 106 168 176 207 271 393 668 743 743 743 745 743 743 743 745 743 743 743 655 654 579 585 575 553 539 547 551 529 514 517 488 488 495 429 453 448 420 385)
Population mean number of elite cases: 31.40
Count of perfect (error zero) individuals by case: (241 246 253 249 239 276 251 255 254 261 320 294 278 300 276 277 234 214 185 207 178 181 214 212 239 187 297 231 353 378 420 351 442 382 407 321 292 190 144 66 108 126 106 168 176 207 271 393 668 743 743 743 745 743 743 743 745 743 743 743 655 654 579 585 575 553 539 547 551 529 514 517 488 488 495 429 453 448 420 385)
Population mean number of perfect (error zero) cases: 31.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 2855.538
Median total errors in population: 349/2
Error averages by case: (33.974 27.037 31.241 29.161 27.404 32.571 31.658 30.454 32.961 39.895 48.833 36.903 38.811 32.031 40.188 40.763 35.225 34.46 38.606 44.781 27.415 27.522 32.596 41.716 48.005 29.625 38.003 41.473 32.918 46.428 44.955 41.46 35.432 32.373 46.158 39.15 33.693 38.145 34.623 34.759 30.107 44.325 34.821 39.192 56.027 34.96 46.976 52.527 37.644 34.103 34.27 34.437 34.596 34.763 34.93 35.097 35.256 35.423 35.59 35.757 28.697 27.729 25.884 26.888 25.982 26.11 28.15 27.257 28.304 27.218 27.49 38.475 30.665 37.694 35.486 41.8 35.978 34.822 36.241 50.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N)
Average genome size in population (length): 39.687
Average program size in population (points): 50.392
Average percent parens in population: 0.211
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.329
Error (vector) diversity:			 0.477
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 75132375
--- Timings ---
Current time: 1481302182904 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_times 5 integer_flush 5 boolean_dup integer_yankdup 5 integer_mod integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Lexicase best partial simplification: (integer_dup_times 5 integer_flush 5 boolean_dup integer_yankdup 5 integer_mod integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () integer_shove 5 integer_div)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 47
Lexicase best total error: 45
Lexicase best mean error: 0.5625
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 1, :instruction integer_flush} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_times 5 integer_flush 5 boolean_dup integer_yankdup 5 integer_mod integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_shove 5 integer_div integer_min exec_stackdepth)
Zero cases best partial simplification: (integer_dup_times 5 integer_flush 5 boolean_dup integer_yankdup 5 integer_mod integer_sub boolean_empty integer_lt integer_shove integer_mod integer_mod boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () integer_div exec_stackdepth)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 2 2 2 2 2 2 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 3 3 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 47
Zero cases best number of zero cases: 47
Zero cases best total error: 45
Zero cases best mean error: 0.5625
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 280 259 278 277 303 305 282 279 294 330 346 328 336 293 284 276 260 224 194 215 211 242 228 249 224 324 258 392 416 456 381 451 414 445 364 343 265 177 113 108 121 127 184 174 202 247 343 629 701 701 701 702 701 701 701 702 701 701 701 607 585 545 542 533 524 516 502 513 511 484 478 483 467 458 425 418 407 370 349)
Population mean number of elite cases: 31.41
Count of perfect (error zero) individuals by case: (252 280 259 278 277 303 305 282 279 294 330 346 328 336 293 284 276 260 224 194 215 211 242 228 249 224 324 258 392 416 456 381 451 414 445 364 343 265 177 113 108 121 127 184 174 202 247 343 629 701 701 701 702 701 701 701 702 701 701 701 607 585 545 542 533 524 516 502 513 511 484 478 483 467 458 425 418 407 370 349)
Population mean number of perfect (error zero) cases: 31.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 39
Mean: 0.4875
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 3738.07
Median total errors in population: 174
Error averages by case: (40.937 39.986 42.146 42.156 43.527 42.665 45.819 44.72 46.962 56.089 53.839 46.033 53.521 47.39 59.185 52.19 47.707 41.234 42.557 46.031 40.367 40.474 45.775 51.029 56.236 43.78 48.727 56.765 46.717 48.696 49.396 49.571 41.341 38.689 45.953 53.534 47.632 46.219 44.399 44.549 42.19 55.555 47.693 52.602 51.621 42.509 46.381 65.353 49.861 44.128 44.398 44.67 44.936 45.208 45.478 45.75 46.016 46.288 46.558 46.83 36.683 38.751 38.863 40.944 40.024 39.184 43.195 41.431 41.459 40.381 42.675 54.675 45.671 47.828 46.706 51.773 51.164 45.963 50.344 71.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0 0N 0 0)
Average genome size in population (length): 38.439
Average program size in population (points): 48.988
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.347
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 79093747
--- Timings ---
Current time: 1481302199578 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 264 262 268 257 275 267 263 277 273 309 331 303 311 298 296 272 252 204 188 205 203 213 234 217 200 302 245 368 418 436 381 440 428 439 352 314 248 159 91 103 116 132 167 156 174 227 340 603 690 690 690 694 690 690 690 694 690 690 690 612 584 554 544 539 519 516 501 515 499 478 468 472 444 447 420 432 399 395 357)
Population mean number of elite cases: 30.62
Count of perfect (error zero) individuals by case: (246 264 262 268 257 275 267 263 277 273 309 331 303 311 298 296 272 252 204 188 205 203 213 234 217 200 302 245 368 418 436 381 440 428 439 352 314 248 159 91 103 116 132 167 156 174 227 340 603 690 690 690 694 690 690 690 694 690 690 690 612 584 554 544 539 519 516 501 515 499 478 468 472 444 447 420 432 399 395 357)
Population mean number of perfect (error zero) cases: 30.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (3 (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3600.983
Median total errors in population: 175
Error averages by case: (39.013 38.04 41.186 39.269 44.56 42.669 42.147 41.913 49.164 52.311 54.388 42.765 42.992 46.609 53.533 53.173 44.37 38.099 40.297 43.02 39.39 38.544 46.821 44.951 53.442 44.466 39.962 64.003 45.249 43.995 48.122 53.978 40.967 38.177 44.096 54.473 45.76 48.319 45.822 44.811 41.158 51.639 44.881 45.875 46.373 40.356 44.612 62.768 48.119 44.355 44.538 44.723 44.89 45.075 45.258 45.443 45.61 45.795 45.978 46.163 36.769 38.849 36.921 37.005 38.096 38.214 39.327 40.482 40.447 39.524 38.788 45.682 41.809 43.917 48.879 46.106 44.108 50.113 50.478 66.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.573
Average program size in population (points): 49.223
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.368
Error (vector) diversity:			 0.518
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 83091251
--- Timings ---
Current time: 1481302217054 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 242 261 255 247 268 259 249 266 291 330 340 292 299 275 279 264 256 209 179 215 201 229 248 243 225 317 275 394 438 458 418 498 438 455 389 337 253 193 94 117 107 135 197 164 177 228 347 593 698 698 698 699 698 698 698 699 698 698 698 627 604 558 564 546 533 519 514 532 520 488 498 487 473 475 456 456 425 425 352)
Population mean number of elite cases: 31.41
Count of perfect (error zero) individuals by case: (238 242 261 255 247 268 259 249 266 291 330 340 292 299 275 279 264 256 209 179 215 201 229 248 243 225 317 275 394 438 458 418 498 438 455 389 337 253 193 94 117 107 135 197 164 177 228 347 593 698 698 698 699 698 698 698 699 698 698 698 627 604 558 564 546 533 519 514 532 520 488 498 487 473 475 456 456 425 425 352)
Population mean number of perfect (error zero) cases: 31.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 2907.919
Median total errors in population: 172N
Error averages by case: (32.052 30.096 38.227 34.215 38.519 38.814 37.645 34.855 40.023 45.006 53.063 36.676 43.059 38.656 42.315 53.449 32.682 32.939 33.773 36.805 30.398 30.587 35.817 40.885 38.344 39.142 35.115 55.018 33.266 36.29 35.486 33.486 32.948 28.942 37.698 33.442 32.963 38.912 35.054 34.229 31.104 36.486 32.662 36.781 39.938 30.585 35.352 43.838 39.123 33.787 34.013 34.239 34.461 34.687 34.913 35.139 35.361 35.587 35.813 36.039 30.781 29.844 30.946 30.991 31.098 31.19 33.327 31.444 31.38 31.361 32.56 35.782 30.731 35.767 45.84 34.237 36.965 40.095 43.117 59.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.53
Average program size in population (points): 49.02
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.341
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 87016233
--- Timings ---
Current time: 1481302234553 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 257 281 259 261 283 259 269 283 290 327 326 303 324 294 336 312 279 219 202 211 186 225 233 229 212 296 279 357 419 429 404 490 406 439 378 352 236 211 94 118 125 154 173 167 173 269 374 589 713 713 713 713 713 713 713 713 713 713 713 631 624 591 559 561 543 542 547 548 528 518 535 507 497 501 458 465 456 443 364)
Population mean number of elite cases: 32.12
Count of perfect (error zero) individuals by case: (268 257 281 259 261 283 259 269 283 290 327 326 303 324 294 336 312 279 219 202 211 186 225 233 229 212 296 279 357 419 429 404 490 406 439 378 352 236 211 94 118 125 154 173 167 173 269 374 589 713 713 713 713 713 713 713 713 713 713 713 631 624 591 559 561 543 542 547 548 528 518 535 507 497 501 458 465 456 443 364)
Population mean number of perfect (error zero) cases: 32.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 2837.983
Median total errors in population: 297/2
Error averages by case: (37.108 31.18 32.368 34.342 36.589 35.724 33.764 32.844 34.178 41.145 45.212 36.178 41.202 37.656 40.67 46.473 34.404 34.386 35.463 44.013 33.486 32.64 35.844 38.853 38.441 38.644 36.004 49.543 34.917 42.68 38.366 39.449 31.703 30.77 40.071 33.086 34.025 35.413 29.85 30.892 35.215 40.56 34.191 39.039 45.418 35.327 34.122 39.287 36.384 30.445 30.625 30.804 30.985 31.165 31.345 31.524 31.705 31.885 32.065 32.244 31.832 32.905 31.951 31.03 30.185 30.247 33.317 31.344 31.393 30.398 30.482 33.727 32.644 33.721 46.842 35.06 34.993 33.089 37.167 51.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.611
Average program size in population (points): 49.153
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.347
Error (vector) diversity:			 0.509
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 90939531
--- Timings ---
Current time: 1481302251989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 219 240 216 230 253 236 236 272 265 311 316 287 292 249 300 271 246 188 177 232 217 246 248 245 217 301 265 362 436 451 416 473 402 435 378 349 244 209 77 116 106 147 192 174 209 297 390 600 736 736 736 736 736 736 736 736 736 736 736 651 632 617 600 593 566 563 567 576 565 551 528 534 489 518 490 482 462 446 391)
Population mean number of elite cases: 32.36
Count of perfect (error zero) individuals by case: (202 219 240 216 230 253 236 236 272 265 311 316 287 292 249 300 271 246 188 177 232 217 246 248 245 217 301 265 362 436 451 416 473 402 435 378 349 244 209 77 116 106 147 192 174 209 297 390 600 736 736 736 736 736 736 736 736 736 736 736 651 632 617 600 593 566 563 567 576 565 551 528 534 489 518 490 482 462 446 391)
Population mean number of perfect (error zero) cases: 32.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3349.956
Median total errors in population: 174
Error averages by case: (40.073 37.118 37.256 40.322 42.539 44.643 48.718 42.721 44.196 52.138 50.365 42.161 44.693 39.282 50.985 49.629 41.685 41.627 38.621 44.989 39.403 38.57 42.786 52.88 42.281 50.563 37.093 50.302 39.838 43.702 45.076 39.833 41.162 38.743 43.328 39.899 43.645 45.561 33.306 35.38 40.166 59.413 38.95 46.122 46.932 38.234 42.759 42.022 44.642 34.896 35.135 35.376 35.615 35.856 36.095 36.336 36.575 36.816 37.055 37.296 35.725 36.805 37.853 36.932 37.018 38.196 45.279 41.23 37.384 36.27 38.417 40.785 38.688 51.759 51.847 45.856 41.972 42.864 44.045 57.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.094
Average program size in population (points): 49.978
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.367
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 94850240
--- Timings ---
Current time: 1481302269443 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 255 252 237 245 263 256 244 276 297 299 310 289 298 266 288 282 237 178 175 230 217 238 247 234 218 291 276 360 456 478 430 491 417 475 395 380 270 228 90 127 124 164 193 159 184 264 371 554 720 720 720 720 720 720 720 720 720 720 720 631 601 562 563 541 529 545 536 551 535 508 510 490 458 464 438 449 424 409 386)
Population mean number of elite cases: 31.80
Count of perfect (error zero) individuals by case: (239 255 252 237 245 263 256 244 276 297 299 310 289 298 266 288 282 237 178 175 230 217 238 247 234 218 291 276 360 456 478 430 491 417 475 395 380 270 228 90 127 124 164 193 159 184 264 371 554 720 720 720 720 720 720 720 720 720 720 720 631 601 562 563 541 529 545 536 551 535 508 510 490 458 464 438 449 424 409 386)
Population mean number of perfect (error zero) cases: 31.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 2671.024
Median total errors in population: 176
Error averages by case: (33.045 26.107 28.332 28.353 38.577 36.736 40.705 30.833 38.299 36.191 52.586 34.259 33.743 30.111 45.19 46.202 32.819 27.292 27.937 30.028 26.387 26.562 30.855 43.965 34.412 40.126 28.989 42.893 31.302 29.822 34.594 30.001 35.485 34.153 30.39 35.397 35.919 38.256 29.661 28.901 28.143 47.403 33.862 32.421 34.461 32.304 31.993 36.465 37.945 28.456 28.758 29.062 29.364 29.668 29.97 30.274 30.576 30.88 31.182 31.486 25.758 27.89 27.966 29.031 28.176 26.31 33.34 29.385 27.437 27.44 28.472 31.832 27.816 41.992 49.999 37.237 32.133 42.954 40.991 44.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.009
Average program size in population (points): 49.795
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.355
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 98716489
--- Timings ---
Current time: 1481302286945 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 239 249 234 241 274 254 255 299 292 310 298 280 299 273 302 276 264 191 192 244 225 277 258 256 240 306 287 371 442 461 426 477 419 459 378 362 248 212 89 137 133 160 196 156 186 292 377 579 723 723 723 723 723 723 723 723 723 723 723 597 594 585 570 552 541 536 532 551 533 506 503 483 464 491 461 437 438 420 378)
Population mean number of elite cases: 32.06
Count of perfect (error zero) individuals by case: (256 239 249 234 241 274 254 255 299 292 310 298 280 299 273 302 276 264 191 192 244 225 277 258 256 240 306 287 371 442 461 426 477 419 459 378 362 248 212 89 137 133 160 196 156 186 292 377 579 723 723 723 723 723 723 723 723 723 723 723 597 594 585 570 552 541 536 532 551 533 506 503 483 464 491 461 437 438 420 378)
Population mean number of perfect (error zero) cases: 32.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 2883.738
Median total errors in population: 173
Error averages by case: (32.076 29.148 33.359 30.351 42.539 36.518 35.718 35.726 33.835 36.041 49.119 38.845 33.12 37.038 43.457 44.192 37.537 31.462 30.268 33.319 33.357 32.526 38.814 39.818 35.987 49.759 34.981 42.132 35.911 32.725 39.397 33.97 36.262 37.807 37.134 36.762 36.241 43.657 34.728 33.633 32.038 40.45 36.577 41.049 38.758 37.391 34.754 37.609 39.799 33.13 33.294 33.46 33.624 33.79 33.954 34.12 34.284 34.45 34.614 34.78 30.877 31.924 30.965 33.012 32.153 30.296 35.293 33.361 32.377 30.347 31.491 35.742 31.796 40.053 45.856 34.073 35.039 38.78 39.86 49.249)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.971
Average program size in population (points): 49.919
Average percent parens in population: 0.219
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.356
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 102721554
--- Timings ---
Current time: 1481302304365 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 256 259 243 254 279 240 266 283 298 324 304 284 301 265 294 289 227 191 188 253 237 271 274 253 240 325 278 393 478 487 437 520 441 463 413 370 269 226 105 120 135 156 182 158 173 269 384 565 720 720 720 721 720 720 720 721 720 720 720 589 597 566 552 553 534 515 528 546 514 495 488 488 454 487 465 435 443 436 371)
Population mean number of elite cases: 32.15
Count of perfect (error zero) individuals by case: (253 256 259 243 254 279 240 266 283 298 324 304 284 301 265 294 289 227 191 188 253 237 271 274 253 240 325 278 393 478 487 437 520 441 463 413 370 269 226 105 120 135 156 182 158 173 269 384 565 720 720 720 721 720 720 720 721 720 720 720 589 597 566 552 553 534 515 528 546 514 495 488 488 454 487 465 435 443 436 371)
Population mean number of perfect (error zero) cases: 32.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3271.599
Median total errors in population: 149
Error averages by case: (42.003 36.009 40.206 37.144 46.282 44.358 40.486 39.417 38.718 43.035 54.127 42.635 41.395 43.719 47.811 43.628 39.265 36.3 37.516 40.963 38.276 38.397 41.567 44.62 37.828 46.438 38.434 46.602 42.083 39.047 41.441 38.932 39.975 42.05 38.919 40.369 41.142 46.736 41.152 39.034 35.944 48.054 39.258 43.255 40.616 42.909 41.064 42.458 45.957 38.523 38.629 38.735 38.837 38.943 39.049 39.155 39.257 39.363 39.469 39.575 37.835 37.838 35.878 37.903 35.012 36.043 42.124 36.187 38.137 36.169 35.269 43.397 40.384 42.569 50.526 42.58 40.526 48.491 42.669 44.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.55
Average program size in population (points): 49.445
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.314
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 106570292
--- Timings ---
Current time: 1481302321633 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Lexicase best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Lexicase best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 48
Lexicase best total error: 38
Lexicase best mean error: 0.475
Lexicase best size: 46
Percent parens: 0.217
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Zero cases best partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Zero cases best errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 48
Zero cases best number of zero cases: 48
Zero cases best total error: 38
Zero cases best mean error: 0.475
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 239 263 242 254 262 238 272 288 290 302 306 305 302 269 287 261 263 168 197 249 219 250 267 256 221 293 271 373 445 472 430 507 420 454 372 371 265 246 99 132 151 163 196 167 183 297 394 554 699 699 699 700 699 699 699 700 699 699 699 621 604 588 579 563 542 544 528 546 503 513 499 492 446 488 472 468 440 426 378)
Population mean number of elite cases: 31.92
Count of perfect (error zero) individuals by case: (266 239 263 242 254 262 238 272 288 290 302 306 305 302 269 287 261 263 168 197 249 219 250 267 256 221 293 271 373 445 472 430 507 420 454 372 371 265 246 99 132 151 163 196 167 183 297 394 554 699 699 699 700 699 699 699 700 699 699 699 621 604 588 579 563 542 544 528 546 503 513 499 492 446 488 472 468 440 426 378)
Population mean number of perfect (error zero) cases: 31.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3110.294
Median total errors in population: 155N
Error averages by case: (38.944 33.038 36.298 35.256 37.436 41.672 38.685 39.587 39.806 40.055 51.348 47.592 39.59 35.333 43.865 48.953 37.968 33.355 32.74 33.99 35.267 35.474 37.663 43.758 42.094 45.802 37.049 41.952 37.314 38.513 39.056 35.627 33.829 39.531 33.91 38.656 39.49 43.748 36.235 35.468 33.995 47.216 40.39 39.625 37.547 37.926 41.601 40.603 40.32 35.045 35.301 35.56 35.81 36.064 36.325 36.577 36.829 37.088 37.342 37.596 36.717 38.775 32.821 34.819 33.017 34.148 41.152 34.327 39.314 36.316 34.28 40.541 41.625 51.824 45.59 40.773 40.622 45.723 41.987 51.216)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.714
Average program size in population (points): 49.637
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.345
Error (vector) diversity:			 0.494
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 110516899
--- Timings ---
Current time: 1481302339104 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) exec_noop (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 4 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 49
Lexicase best total error: 42
Lexicase best mean error: 0.525
Lexicase best size: 64
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) exec_noop (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 4 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 42
Zero cases best mean error: 0.525
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 226 243 227 233 243 234 247 270 280 289 314 319 300 280 271 280 236 167 213 248 219 234 266 264 220 298 280 357 444 473 435 521 414 436 376 365 270 234 85 119 161 156 217 162 181 306 402 565 727 727 727 728 727 727 727 728 727 727 727 660 619 592 592 580 575 578 560 572 537 538 525 510 475 521 488 468 472 431 389)
Population mean number of elite cases: 32.50
Count of perfect (error zero) individuals by case: (235 226 243 227 233 243 234 247 270 280 289 314 319 300 280 271 280 236 167 213 248 219 234 266 264 220 298 280 357 444 473 435 521 414 436 376 365 270 234 85 119 161 156 217 162 181 306 402 565 727 727 727 728 727 727 727 728 727 727 727 660 619 592 592 580 575 578 560 572 537 538 525 510 475 521 488 468 472 431 389)
Population mean number of perfect (error zero) cases: 32.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 5} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove})
Best program: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (integer_shove))
Partial simplification: (integer_flush integer_dup_times 5 exec_dup_times (exec_noop) integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 3 2 0 1 1 1 1 1 1 1 1 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 38
Mean: 0.475
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3209.034
Median total errors in population: 155N
Error averages by case: (38.074 33.109 33.382 36.347 38.612 41.819 39.922 36.767 38.078 41.213 52.16 41.352 42.63 39.49 46.56 50.75 45.216 38.792 39.87 38.643 35.347 34.591 36.826 40.962 41.158 47.297 41.019 43.316 38.604 41.607 44.596 40.234 36.935 43.464 39.311 41.234 38.428 40.412 37.008 38.086 36.258 56.369 38.592 42.104 44.062 39.696 46.107 40.515 44.372 37.599 37.809 38.021 38.227 38.439 38.649 38.861 39.067 39.279 39.489 39.701 36.721 35.797 34.936 34.934 34.127 33.235 36.357 35.45 37.364 37.478 35.424 39.709 47.734 42.978 48.776 42.883 39.085 40.945 41.211 47.453)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.701
Average program size in population (points): 49.532
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.329
Error (vector) diversity:			 0.491
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 114448304
--- Timings ---
Current time: 1481302356275 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 4 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 49
Lexicase best total error: 42
Lexicase best mean error: 0.525
Lexicase best size: 64
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) exec_noop (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 4 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 42
Zero cases best mean error: 0.525
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 259 263 262 268 274 259 286 291 327 306 337 326 298 274 278 292 254 193 209 247 222 238 253 282 228 323 270 377 477 492 445 519 442 490 396 418 291 271 102 106 173 144 214 137 159 277 337 543 685 685 685 689 685 685 685 689 685 685 685 656 620 602 614 583 599 605 585 593 577 584 549 537 491 525 494 487 461 432 392)
Population mean number of elite cases: 32.91
Count of perfect (error zero) individuals by case: (256 259 263 262 268 274 259 286 291 327 306 337 326 298 274 278 292 254 193 209 247 222 238 253 282 228 323 270 377 477 492 445 519 442 490 396 418 291 271 102 106 173 144 214 137 159 277 337 543 685 685 685 689 685 685 685 689 685 685 685 656 620 602 614 583 599 605 585 593 577 584 549 537 491 525 494 487 461 432 392)
Population mean number of perfect (error zero) cases: 32.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3634.088
Median total errors in population: 137
Error averages by case: (43.965 42.005 43.173 46.183 48.5 46.596 42.819 43.626 44.939 47.935 49.668 43.341 42.335 42.151 54.413 53.63 47.044 43.462 40.96 43.469 44.308 44.544 46.818 42.93 48.262 53.165 42.208 50.462 42.024 44.949 47.358 45.128 42.491 46.121 39.906 44.09 44.726 46.499 43.543 43.627 47.094 54.312 44.748 47.212 46.034 46.866 42.545 41.492 47.226 43.212 43.381 43.55 43.703 43.872 44.041 44.21 44.363 44.532 44.701 44.87 42.669 43.734 41.836 42.849 43.022 42.991 46.149 44.258 45.184 43.284 42.282 43.582 55.536 51.936 46.731 46.735 47.832 47.747 47.068 53.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.496
Average program size in population (points): 49.319
Average percent parens in population: 0.219
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.322
Error (vector) diversity:			 0.47
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 118345064
--- Timings ---
Current time: 1481302373363 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 98
Lexicase best mean error: 1.225
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 98
Zero cases best mean error: 1.225
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 244 257 259 259 268 265 294 308 303 298 325 328 322 299 308 303 256 186 208 289 252 267 279 285 227 308 272 372 498 482 454 544 459 496 434 422 304 252 106 115 166 159 198 139 176 260 350 542 705 705 705 713 705 705 705 713 705 705 705 651 632 586 573 559 579 571 548 561 538 536 530 525 483 516 473 469 464 431 367)
Population mean number of elite cases: 33.03
Count of perfect (error zero) individuals by case: (266 244 257 259 259 268 265 294 308 303 298 325 328 322 299 308 303 256 186 208 289 252 267 279 285 227 308 272 372 498 482 454 544 459 496 434 422 304 252 106 115 166 159 198 139 176 260 350 542 705 705 705 713 705 705 705 713 705 705 705 651 632 586 573 559 579 571 548 561 538 536 530 525 483 516 473 469 464 431 367)
Population mean number of perfect (error zero) cases: 33.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3200.275
Median total errors in population: 129
Error averages by case: (35.975 36.013 37.27 35.178 40.312 40.371 39.504 39.481 38.751 42.716 45.407 35.293 38.615 35.719 41.136 44.989 40.572 37.946 36.904 36.189 36.238 36.406 41.526 39.681 41.813 40.173 36.246 41.329 36.982 38.48 41.398 39.226 40.911 41.988 37.335 40.208 42.938 42.166 39.52 39.574 39.943 40.034 38.547 44.906 39.254 41.862 42.487 45.543 46.853 39.119 39.292 39.465 39.606 39.779 39.952 40.125 40.266 40.439 40.612 40.785 34.683 37.718 36.855 37.908 37.029 36.984 39.118 39.249 37.177 39.188 39.262 42.38 43.378 50.619 43.467 38.448 42.716 43.702 37.852 51.194)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.588
Average program size in population (points): 49.631
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.317
Error (vector) diversity:			 0.47
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 122221298
--- Timings ---
Current time: 1481302390219 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 98
Lexicase best mean error: 1.225
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 98
Zero cases best mean error: 1.225
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 280 282 281 283 286 270 291 298 313 318 354 331 314 289 289 298 269 167 195 263 245 250 263 298 225 336 284 416 510 501 485 551 477 509 416 423 307 243 99 120 171 132 207 140 154 263 335 578 724 724 724 727 724 724 724 727 724 724 724 669 635 597 594 571 581 585 543 565 549 548 541 529 487 535 480 458 462 415 379)
Population mean number of elite cases: 33.57
Count of perfect (error zero) individuals by case: (265 280 282 281 283 286 270 291 298 313 318 354 331 314 289 289 298 269 167 195 263 245 250 263 298 225 336 284 416 510 501 485 551 477 509 416 423 307 243 99 120 171 132 207 140 154 263 335 578 724 724 724 727 724 724 724 727 724 724 724 669 635 597 594 571 581 585 543 565 549 548 541 529 487 535 480 458 462 415 379)
Population mean number of perfect (error zero) cases: 33.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3202.152
Median total errors in population: 125N
Error averages by case: (32.977 32.997 33.155 37.203 36.325 39.451 38.446 42.545 42.661 44.711 53.134 36.808 40.567 42.357 45.988 48.766 41.577 40.024 39.64 40.029 37.284 34.448 37.619 39.747 44.572 46.028 41.488 49.776 40.31 41.405 47.296 46.937 42.484 45.341 39.2 41.257 37.126 38.303 34.861 35.036 38.991 39.99 38.477 51.581 38.561 44.637 43.885 42.589 40.838 34.536 34.644 34.752 34.848 34.956 35.064 35.172 35.268 35.376 35.484 35.592 32.698 35.726 33.841 34.868 33.997 35.008 37.112 38.274 37.221 37.277 37.293 38.427 46.304 54.535 42.44 38.525 45.876 49.477 45.853 52.28)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.508
Average program size in population (points): 49.534
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.32
Error (vector) diversity:			 0.459
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 125950739
--- Timings ---
Current time: 1481302407038 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank integer_mod 5 5 integer_div integer_min))
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank integer_mod 5 5 integer_div integer_min))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 95
Lexicase best mean error: 1.1875
Lexicase best size: 59
Percent parens: 0.186
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank integer_mod 5 5 integer_div integer_min))
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 () integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank integer_mod 5 5 integer_div integer_min))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 95
Zero cases best mean error: 1.1875
Zero cases best size: 59
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 278 274 276 277 303 289 298 287 312 334 327 325 325 284 301 316 265 172 201 263 256 269 286 313 218 314 278 396 503 491 477 558 461 497 425 426 299 235 101 122 181 159 217 132 163 265 359 587 726 726 726 729 726 726 726 729 726 726 726 664 640 605 594 568 561 575 544 570 533 527 553 522 501 498 489 470 477 430 357)
Population mean number of elite cases: 33.62
Count of perfect (error zero) individuals by case: (256 278 274 276 277 303 289 298 287 312 334 327 325 325 284 301 316 265 172 201 263 256 269 286 313 218 314 278 396 503 491 477 558 461 497 425 426 299 235 101 122 181 159 217 132 163 265 359 587 726 726 726 729 726 726 726 729 726 726 726 664 640 605 594 568 561 575 544 570 533 527 553 522 501 498 489 470 477 430 357)
Population mean number of perfect (error zero) cases: 33.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3147.619
Median total errors in population: 121
Error averages by case: (34.034 33.992 35.243 36.226 36.302 40.248 36.49 44.459 37.508 44.705 46.362 37.046 39.033 35.671 44.533 50.593 44.984 37.998 38.23 39.793 33.291 36.392 39.545 40.676 47.775 43.962 38.092 47.565 38.288 38.899 43.592 39.656 38.184 39.173 35.337 37.345 37.103 42.06 37.398 39.296 40.938 36.986 37.478 41.707 39.612 42.796 41.968 36.756 43.148 38.796 38.934 39.072 39.198 39.336 39.474 39.612 39.738 39.876 40.014 40.152 32.72 33.743 33.847 34.857 35.016 35.065 37.164 37.265 36.132 36.283 39.346 37.333 44.331 45.563 44.588 37.443 37.682 37.648 42.754 46.169)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.573
Average program size in population (points): 49.722
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.303
Error (vector) diversity:			 0.443
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 129770277
--- Timings ---
Current time: 1481302423789 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 98
Lexicase best mean error: 1.225
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 98
Zero cases best mean error: 1.225
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 262 255 256 259 269 265 275 269 300 298 324 325 319 317 325 327 258 178 208 269 249 261 286 308 228 305 283 383 492 466 461 527 452 468 417 400 298 222 98 107 162 158 183 129 170 260 360 574 713 713 713 714 713 713 713 714 713 713 713 668 636 606 579 568 574 582 551 564 539 541 545 539 495 517 523 479 491 446 367)
Population mean number of elite cases: 33.17
Count of perfect (error zero) individuals by case: (251 262 255 256 259 269 265 275 269 300 298 324 325 319 317 325 327 258 178 208 269 249 261 286 308 228 305 283 383 492 466 461 527 452 468 417 400 298 222 98 107 162 158 183 129 170 260 360 574 713 713 713 714 713 713 713 714 713 713 713 668 636 606 579 568 574 582 551 564 539 541 545 539 495 517 523 479 491 446 367)
Population mean number of perfect (error zero) cases: 33.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3842.226
Median total errors in population: 124
Error averages by case: (43.016 42.011 43.243 44.216 44.319 48.35 45.464 54.479 46.566 48.828 53.444 44.452 46.983 44.708 47.716 47.697 47.738 47.164 43.564 47.286 41.264 44.412 47.476 46.742 49.749 46.011 46.045 50.866 45.554 45.579 53.259 48.603 50.704 51.993 50.552 51.572 52.098 63.817 49.112 50.174 50.993 44.018 44.852 46.014 50.492 51.733 53.277 53.0 54.382 49.698 49.927 50.157 50.382 50.613 50.842 51.072 51.297 51.528 51.757 51.987 42.706 42.765 41.831 42.902 43.037 42.006 44.047 45.221 44.217 44.309 47.301 45.347 46.441 56.697 49.47 44.482 49.774 47.604 44.822 52.4)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.085
Average program size in population (points): 49.103
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.325
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 133499303
--- Timings ---
Current time: 1481302440645 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_yank exec_s (5 5 integer_div integer_min)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 42
Lexicase best mean error: 0.525
Lexicase best size: 65
Percent parens: 0.262
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_yank exec_s (5 5 integer_div integer_min)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 42
Zero cases best mean error: 0.525
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 264 268 266 278 282 299 290 308 291 297 324 302 284 270 286 286 244 170 186 252 253 257 279 294 237 329 304 398 469 482 439 519 431 448 400 393 309 232 103 121 183 160 201 137 176 285 351 557 700 700 700 705 701 701 701 705 701 701 701 642 601 585 569 549 549 551 523 541 509 503 518 491 454 483 471 414 438 406 353)
Population mean number of elite cases: 32.31
Count of perfect (error zero) individuals by case: (254 264 268 266 278 282 299 290 308 291 297 324 302 284 270 286 286 244 170 186 252 253 257 279 294 237 329 304 398 469 482 439 519 431 448 400 393 309 232 103 121 183 160 201 137 176 285 351 557 700 700 700 705 701 701 701 705 701 701 701 642 601 585 569 549 549 551 523 541 509 503 518 491 454 483 471 414 438 406 353)
Population mean number of perfect (error zero) cases: 32.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 exec_while () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3536.451
Median total errors in population: 130
Error averages by case: (42.067 42.059 42.293 43.347 41.425 42.466 42.51 60.681 41.808 50.912 49.839 45.578 46.075 45.825 45.388 50.041 40.755 40.179 39.383 43.589 42.321 44.495 44.633 44.792 49.983 45.267 52.992 47.105 41.63 40.442 46.499 45.052 46.742 43.926 40.408 43.416 41.634 44.459 40.149 41.353 46.992 42.992 43.624 44.961 45.715 46.762 43.69 43.119 45.326 40.865 41.106 41.353 41.576 41.823 42.064 42.311 42.536 42.783 43.024 43.271 43.815 42.854 41.92 43.001 42.177 42.176 44.329 43.44 42.343 42.483 43.533 42.475 48.645 49.851 43.722 41.682 50.109 45.878 43.085 49.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.746
Average program size in population (points): 49.847
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.326
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 137329260
--- Timings ---
Current time: 1481302457305 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while () in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank (5 5 integer_div integer_min) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 42
Lexicase best mean error: 0.525
Lexicase best size: 65
Percent parens: 0.262
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 42
Zero cases best mean error: 0.525
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 260 249 262 276 286 320 280 293 302 291 339 301 276 275 285 297 240 184 190 276 250 261 275 283 256 355 316 422 496 474 440 509 437 445 405 396 292 222 111 110 168 158 204 153 196 302 366 597 719 719 719 726 725 725 725 726 725 725 725 650 621 605 602 572 595 580 559 573 554 540 555 540 500 507 484 461 470 432 386)
Population mean number of elite cases: 33.36
Count of perfect (error zero) individuals by case: (232 260 249 262 276 286 320 280 293 302 291 339 301 276 275 285 297 240 184 190 276 250 261 275 283 256 355 316 422 496 474 440 509 437 445 405 396 292 222 111 110 168 158 204 153 196 302 366 597 719 719 719 726 725 725 725 726 725 725 725 650 621 605 602 572 595 580 559 573 554 540 555 540 500 507 484 461 470 432 386)
Population mean number of perfect (error zero) cases: 33.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 (boolean_pop) in1) (boolean_yank exec_dup_times () exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3067.632
Median total errors in population: 121
Error averages by case: (34.075 32.039 34.21 34.248 33.291 33.368 37.404 51.653 35.944 39.696 50.276 36.312 38.566 40.389 40.084 44.376 37.426 36.711 38.278 35.013 33.303 34.4 37.541 34.794 41.779 40.737 45.614 42.869 36.41 35.186 39.663 42.798 40.638 40.471 41.07 41.628 41.751 45.827 39.314 39.34 39.052 36.016 36.495 37.278 40.361 45.697 42.434 44.494 44.61 38.817 38.953 39.089 39.209 39.345 39.481 39.617 39.749 39.885 40.021 40.157 32.814 33.859 32.873 31.901 32.071 32.051 35.144 35.264 34.158 33.245 35.261 34.195 34.355 42.66 37.603 34.552 36.889 36.87 37.646 44.969)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.891
Average program size in population (points): 50.088
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.3
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 141141063
--- Timings ---
Current time: 1481302474094 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_mod) exec_noop) boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 62
Percent parens: 0.242
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod)) boolean_empty exec_s (5 5 integer_div integer_min) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 275 281 284 296 303 311 285 305 277 272 307 306 282 281 273 290 241 156 220 249 247 238 271 259 239 337 313 386 479 468 440 534 435 437 407 394 294 222 114 109 160 161 198 152 197 297 365 567 710 710 710 717 714 714 714 717 714 714 714 639 627 603 585 569 567 573 547 557 532 540 538 525 496 495 491 456 458 448 397)
Population mean number of elite cases: 32.98
Count of perfect (error zero) individuals by case: (276 275 281 284 296 303 311 285 305 277 272 307 306 282 281 273 290 241 156 220 249 247 238 271 259 239 337 313 386 479 468 440 534 435 437 407 394 294 222 114 109 160 161 198 152 197 297 365 567 710 710 710 717 714 714 714 717 714 714 714 639 627 603 585 569 567 573 547 557 532 540 538 525 496 495 491 456 458 448 397)
Population mean number of perfect (error zero) cases: 32.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3816.938
Median total errors in population: 124N
Error averages by case: (44.91 44.943 44.109 47.18 45.318 45.364 43.289 64.551 46.874 52.688 55.51 45.373 44.515 46.478 47.669 51.947 43.51 43.449 44.97 42.51 45.25 44.389 47.593 45.786 53.686 48.103 50.361 49.721 44.225 44.56 49.389 46.314 47.79 44.882 47.647 50.517 53.147 60.498 47.524 48.687 49.96 44.022 45.369 47.721 52.04 46.033 48.308 52.986 54.608 48.206 48.389 48.572 48.735 48.918 49.101 49.284 49.455 49.638 49.821 50.004 43.705 46.716 45.773 43.853 43.983 43.056 45.106 46.27 47.165 44.276 44.253 45.24 47.352 51.442 44.601 43.453 45.708 47.758 46.63 54.202)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.941
Average program size in population (points): 50.3
Average percent parens in population: 0.225
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.313
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 144956715
--- Timings ---
Current time: 1481302490834 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod)) boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 62
Percent parens: 0.242
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod () in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean) exec_noop) (integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 267 272 271 285 289 303 291 310 283 275 305 282 292 278 265 275 208 167 201 242 241 246 282 301 258 359 330 417 498 466 438 521 437 456 423 406 313 221 120 105 157 152 197 156 215 293 367 587 719 719 719 725 724 724 724 726 724 724 724 662 631 625 618 614 605 595 577 586 563 555 554 570 513 503 492 466 475 445 376)
Population mean number of elite cases: 33.56
Count of perfect (error zero) individuals by case: (255 267 272 271 285 289 303 291 310 283 275 305 282 292 278 265 275 208 167 201 242 241 246 282 301 258 359 330 417 498 466 438 521 437 456 423 406 313 221 120 105 157 152 197 156 215 293 367 587 719 719 719 725 724 724 724 726 724 724 724 662 631 625 618 614 605 595 577 586 563 555 554 570 513 503 492 466 475 445 376)
Population mean number of perfect (error zero) cases: 33.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3171.073
Median total errors in population: 119
Error averages by case: (37.005 37.053 42.185 39.277 39.381 38.45 39.446 51.61 43.879 43.955 49.5 39.698 38.59 38.761 39.115 44.361 34.302 34.16 34.572 35.051 37.374 38.503 41.692 38.746 44.817 47.044 42.522 41.111 35.46 34.382 43.666 41.896 42.722 41.581 36.415 34.545 38.571 43.412 34.65 36.421 39.084 39.243 44.625 35.965 39.259 41.754 37.812 39.783 39.904 35.95 36.207 36.464 36.705 36.96 37.217 37.474 37.723 37.98 38.237 38.494 38.705 36.769 36.811 37.856 37.976 40.097 42.091 38.23 40.192 40.229 39.355 41.321 41.368 44.576 39.708 41.55 38.819 42.703 40.804 49.192)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.882
Average program size in population (points): 50.068
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.315
Error (vector) diversity:			 0.478
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 148753462
--- Timings ---
Current time: 1481302507678 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod)) (boolean_empty integer_mod exec_s (5 5 integer_div integer_min)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 62
Percent parens: 0.242
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean) exec_noop) boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 291 276 310 297 308 307 311 319 290 307 277 290 287 265 265 262 222 150 187 227 229 220 264 252 219 334 304 374 446 467 412 501 418 413 366 382 306 222 102 120 158 162 195 155 230 338 404 577 723 723 723 727 725 725 725 727 725 725 726 665 636 599 620 591 588 586 553 565 548 542 527 526 470 494 477 460 455 459 385)
Population mean number of elite cases: 32.99
Count of perfect (error zero) individuals by case: (254 291 276 310 297 308 307 311 319 290 307 277 290 287 265 265 262 222 150 187 227 229 220 264 252 219 334 304 374 446 467 412 501 418 413 366 382 306 222 102 120 158 162 195 155 230 338 404 577 723 723 723 727 725 725 725 727 725 725 726 665 636 599 620 591 588 586 553 565 548 542 527 526 470 494 477 460 455 459 385)
Population mean number of perfect (error zero) cases: 32.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 (boolean_pop) in1) (boolean_yank exec_dup_times boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 2945.028
Median total errors in population: 126
Error averages by case: (32.055 34.02 34.278 31.169 32.361 35.352 38.407 48.388 35.745 35.773 47.282 34.709 31.477 33.389 36.192 38.281 31.451 31.185 32.089 30.493 30.393 31.451 36.622 44.682 35.846 35.037 38.351 38.897 36.199 32.819 40.307 38.13 42.036 37.319 35.367 37.784 41.163 48.566 38.215 39.231 34.986 36.015 40.119 38.528 31.455 40.528 34.465 41.755 42.253 38.711 38.832 38.952 39.066 38.984 39.091 39.202 39.296 39.405 39.516 39.616 32.765 33.795 29.887 32.868 33.011 31.049 39.009 35.178 36.172 39.2 33.274 36.323 41.406 41.654 35.582 35.426 34.654 37.743 33.486 39.26)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.314
Average program size in population (points): 50.652
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.338
Error (vector) diversity:			 0.5
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 152639219
--- Timings ---
Current time: 1481302524929 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod (integer_fromboolean) in1) exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank (5 5 integer_div integer_min)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 42
Lexicase best mean error: 0.525
Lexicase best size: 65
Percent parens: 0.262
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 1 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 42
Zero cases best mean error: 0.525
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 253 266 272 278 297 298 283 328 297 301 310 335 309 308 307 295 241 165 207 266 276 256 296 288 260 332 319 375 452 448 416 497 426 435 379 379 330 223 104 133 149 142 173 153 211 302 367 545 706 706 706 714 711 711 711 714 711 711 712 670 660 631 607 593 602 597 581 575 566 548 545 529 499 538 501 465 487 474 392)
Population mean number of elite cases: 33.42
Count of perfect (error zero) individuals by case: (262 253 266 272 278 297 298 283 328 297 301 310 335 309 308 307 295 241 165 207 266 276 256 296 288 260 332 319 375 452 448 416 497 426 435 379 379 330 223 104 133 149 142 173 153 211 302 367 545 706 706 706 714 711 711 711 714 711 711 712 670 660 631 607 593 602 597 581 575 566 548 545 529 499 538 501 465 487 474 392)
Population mean number of perfect (error zero) cases: 33.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3864.427
Median total errors in population: 125N
Error averages by case: (39.949 39.978 43.211 40.151 41.375 42.383 44.476 64.404 54.825 51.897 59.867 46.534 45.418 44.398 46.242 49.673 45.206 46.302 43.416 44.974 40.294 42.363 50.613 51.618 51.879 46.242 46.028 48.322 50.491 43.431 51.135 50.736 57.629 49.885 51.426 51.176 54.353 60.394 52.125 52.178 41.925 53.117 50.47 43.915 46.68 51.42 52.281 54.48 57.457 51.701 51.928 52.154 52.364 52.589 52.817 53.049 53.26 53.49 53.722 53.943 38.662 38.683 40.742 38.882 40.955 40.015 44.004 42.166 49.184 47.217 42.301 42.402 43.447 49.491 48.397 47.588 45.818 53.713 47.712 53.289)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.145
Average program size in population (points): 50.482
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.301
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 156477742
--- Timings ---
Current time: 1481302541950 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Lexicase best number of elite cases: 50
Lexicase best total error: 98
Lexicase best mean error: 1.225
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (integer_dup_times integer_sub integer_sub integer_mod boolean_empty exec_yank boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_pop integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 2 1 1 1 2 2 2 2 1 0 1 0 53 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 1]
Zero cases best number of elite cases: 50
Zero cases best number of zero cases: 50
Zero cases best total error: 98
Zero cases best mean error: 1.225
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 267 279 294 302 310 317 287 329 310 307 323 340 307 296 289 296 239 161 190 280 270 264 296 302 283 353 326 382 500 505 468 548 458 469 410 409 346 232 94 132 174 165 201 141 190 301 369 563 748 748 748 751 751 751 751 751 751 751 751 679 656 610 605 610 600 591 586 550 556 546 541 543 484 512 480 442 454 449 385)
Population mean number of elite cases: 34.26
Count of perfect (error zero) individuals by case: (253 267 279 294 302 310 317 287 329 310 307 323 340 307 296 289 296 239 161 190 280 270 264 296 302 283 353 326 382 500 505 468 548 458 469 410 409 346 232 94 132 174 165 201 141 190 301 369 563 748 748 748 751 751 751 751 751 751 751 751 679 656 610 605 610 600 591 586 550 556 546 541 543 484 512 480 442 454 449 385)
Population mean number of perfect (error zero) cases: 34.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3019.281
Median total errors in population: 122N
Error averages by case: (36.974 35.981 34.178 35.142 35.236 36.193 37.429 55.583 38.747 40.725 40.002 34.447 36.559 34.061 36.504 38.192 34.007 36.152 33.491 33.891 35.241 36.324 43.502 42.594 42.013 34.479 35.402 38.02 39.085 33.405 39.582 35.064 39.928 39.212 36.504 37.571 39.099 43.488 36.333 36.38 36.873 41.962 38.338 35.652 33.564 40.075 35.453 39.967 42.417 35.812 35.952 36.092 36.226 36.366 36.506 36.646 36.786 36.926 37.066 37.206 35.677 35.694 34.802 35.886 33.933 35.974 44.03 35.098 44.172 37.174 38.191 37.342 43.276 46.551 37.541 37.529 37.85 40.817 39.045 36.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.358
Average program size in population (points): 50.895
Average percent parens in population: 0.226
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.295
Error (vector) diversity:			 0.458
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 160200527
--- Timings ---
Current time: 1481302558808 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s boolean_not integer_shove boolean_xor integer_fromboolean integer_mod integer_mod integer_mod integer_yank 5 5 integer_div integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (3 (boolean_pop) integer_mod () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 293 287 307 324 326 313 286 323 327 316 322 342 334 298 303 319 243 158 184 252 251 228 262 283 268 333 289 386 479 493 445 538 449 456 421 411 358 230 101 153 170 177 201 148 206 298 368 534 734 734 734 736 736 736 736 736 736 736 736 659 633 587 590 601 582 577 565 554 559 531 526 550 475 521 467 451 467 425 391)
Population mean number of elite cases: 33.88
Count of perfect (error zero) individuals by case: (287 293 287 307 324 326 313 286 323 327 316 322 342 334 298 303 319 243 158 184 252 251 228 262 283 268 333 289 386 479 493 445 538 449 456 421 411 358 230 101 153 170 177 201 148 206 298 368 534 734 734 734 736 736 736 736 736 736 736 736 659 633 587 590 601 582 577 565 554 559 531 526 550 475 521 467 451 467 425 391)
Population mean number of perfect (error zero) cases: 33.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_shove)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 3244.296
Median total errors in population: 125N
Error averages by case: (44.978 40.034 40.242 42.201 42.271 37.383 41.599 47.57 40.784 45.759 48.313 37.21 37.491 35.953 40.206 41.326 41.577 38.592 38.458 37.362 40.302 40.41 47.686 52.744 47.175 36.907 36.403 42.153 39.82 38.229 43.577 42.143 43.437 41.007 41.766 40.617 43.628 45.801 35.633 36.821 39.939 47.25 36.492 43.136 39.769 43.213 42.044 44.361 43.659 36.283 36.463 36.643 36.819 36.999 37.179 37.359 37.539 37.719 37.899 38.079 44.708 42.761 39.886 38.983 37.984 39.075 43.097 38.177 43.23 45.217 39.36 37.537 39.507 40.656 35.76 38.832 37.757 38.704 38.268 40.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.85
Average program size in population (points): 50.29
Average percent parens in population: 0.225
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.302
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 163874203
--- Timings ---
Current time: 1481302575139 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s boolean_not integer_shove boolean_xor integer_fromboolean integer_mod integer_mod integer_mod integer_yank 5 5 integer_div integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod () in1) boolean_yank exec_dup_times () boolean_or (integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 287 303 304 297 318 315 284 322 310 309 336 340 328 307 303 294 230 180 179 266 239 244 269 298 270 326 290 400 469 497 437 527 440 470 403 398 333 255 102 139 154 167 211 139 193 271 353 544 715 715 715 722 722 722 722 722 722 722 722 651 619 600 604 606 578 568 555 571 562 547 545 549 482 495 471 452 483 442 403)
Population mean number of elite cases: 33.63
Count of perfect (error zero) individuals by case: (274 287 303 304 297 318 315 284 322 310 309 336 340 328 307 303 294 230 180 179 266 239 244 269 298 270 326 290 400 469 497 437 527 440 470 403 398 333 255 102 139 154 167 211 139 193 271 353 544 715 715 715 722 722 722 722 722 722 722 722 651 619 600 604 606 578 568 555 571 562 547 545 549 482 495 471 452 483 442 403)
Population mean number of perfect (error zero) cases: 33.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 2744.214
Median total errors in population: 125N
Error averages by case: (33.005 31.035 30.197 33.151 37.36 33.323 35.661 43.563 32.87 40.664 34.021 28.662 33.437 30.975 32.061 30.849 33.176 31.666 31.215 31.945 32.311 31.411 38.773 35.949 38.896 30.34 31.724 31.015 32.897 31.283 38.307 33.881 37.334 35.88 35.184 31.28 37.615 44.537 33.384 34.482 31.97 31.23 32.59 30.043 33.063 34.216 35.681 42.567 36.839 34.006 34.261 34.516 34.757 35.012 35.267 35.522 35.777 36.032 36.287 36.542 32.749 33.79 32.855 31.893 30.959 32.021 41.069 31.203 42.125 36.234 34.28 33.372 35.485 36.792 29.666 33.694 31.733 32.731 34.064 36.002)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.703
Average program size in population (points): 50.038
Average percent parens in population: 0.226
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.318
Error (vector) diversity:			 0.474
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 167590511
--- Timings ---
Current time: 1481302591486 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean) integer_mod integer_mod integer_yank 5 5 integer_div integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) () (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 302 287 283 296 308 307 290 307 291 310 337 340 350 321 298 291 207 164 200 227 223 236 262 272 287 310 302 402 460 479 440 540 433 467 394 410 347 267 104 136 179 160 219 157 202 282 360 558 714 714 714 715 715 715 715 715 715 715 715 661 652 627 603 612 601 601 586 590 586 549 559 555 498 535 507 468 496 463 415)
Population mean number of elite cases: 33.92
Count of perfect (error zero) individuals by case: (291 302 287 283 296 308 307 290 307 291 310 337 340 350 321 298 291 207 164 200 227 223 236 262 272 287 310 302 402 460 479 440 540 433 467 394 410 347 267 104 136 179 160 219 157 202 282 360 558 714 714 714 715 715 715 715 715 715 715 715 661 652 627 603 612 601 601 586 590 586 549 559 555 498 535 507 468 496 463 415)
Population mean number of perfect (error zero) cases: 33.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())) ())
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3622.166
Median total errors in population: 122N
Error averages by case: (43.924 40.956 41.132 42.242 45.288 42.238 42.545 57.531 47.865 51.857 54.067 43.39 43.301 46.896 45.584 49.816 43.191 42.783 43.609 43.486 41.324 39.491 45.674 50.67 57.11 46.787 45.674 46.368 44.059 44.326 47.343 42.154 49.402 47.288 49.039 46.539 46.998 53.954 43.159 43.407 40.983 49.249 48.637 46.871 44.038 43.146 47.291 52.199 48.792 42.953 43.208 43.463 43.906 44.176 44.446 44.716 44.986 45.256 45.526 45.796 43.681 44.69 39.78 40.86 41.896 39.964 41.046 39.079 42.168 43.157 39.265 41.336 45.347 46.637 42.471 45.65 46.825 50.681 45.116 50.412)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.427
Average program size in population (points): 49.71
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.297
Error (vector) diversity:			 0.462
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 171265963
--- Timings ---
Current time: 1481302608149 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 (boolean_pop) in1 exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (3 (boolean_pop) integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove integer_fromboolean integer_mod) integer_mod integer_mod integer_yank (5 5 integer_div integer_min) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 306 308 303 305 310 330 331 350 284 313 333 333 336 312 325 299 228 169 167 272 241 269 284 317 267 326 297 414 482 497 462 534 435 452 394 406 370 234 96 151 192 175 211 155 205 296 366 571 737 737 737 739 739 739 739 739 739 739 739 658 627 590 575 545 542 569 536 556 528 523 536 511 442 515 472 437 433 441 364)
Population mean number of elite cases: 33.81
Count of perfect (error zero) individuals by case: (277 306 308 303 305 310 330 331 350 284 313 333 333 336 312 325 299 228 169 167 272 241 269 284 317 267 326 297 414 482 497 462 534 435 452 394 406 370 234 96 151 192 175 211 155 205 296 366 571 737 737 737 739 739 739 739 739 739 739 739 658 627 590 575 545 542 569 536 556 528 523 536 511 442 515 472 437 433 441 364)
Population mean number of perfect (error zero) cases: 33.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3825.981
Median total errors in population: 227/2
Error averages by case: (42.984 42.971 43.145 51.218 49.365 46.323 47.488 62.457 48.849 51.91 48.929 45.449 49.754 48.088 47.919 47.647 49.072 48.426 47.295 47.1 43.23 42.409 48.547 53.75 55.839 48.05 48.763 47.191 47.601 47.076 49.205 45.247 49.465 46.837 49.444 49.073 49.112 57.751 46.022 46.24 44.9 47.041 47.459 47.715 48.905 46.243 46.122 51.756 54.159 45.723 45.964 46.379 46.441 46.68 46.921 47.161 47.401 47.641 47.881 48.121 42.699 43.738 41.832 43.906 46.058 44.099 46.075 44.212 51.157 48.277 47.376 45.351 48.433 49.758 48.496 51.542 48.81 49.762 46.073 50.473)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.364
Average program size in population (points): 49.638
Average percent parens in population: 0.225
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.287
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 174867665
--- Timings ---
Current time: 1481302624515 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 37
Lexicase best mean error: 0.4625
Lexicase best size: 67
Percent parens: 0.284
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 37
Zero cases best mean error: 0.4625
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 309 296 294 309 325 322 308 316 291 310 347 362 340 312 295 291 199 171 180 254 249 253 285 309 290 328 301 420 474 490 446 541 434 447 384 382 331 237 92 150 184 179 218 148 216 321 400 599 753 753 753 757 757 757 757 757 757 757 757 665 640 623 609 590 578 597 574 588 556 551 556 537 487 529 489 477 480 448 399)
Population mean number of elite cases: 34.51
Count of perfect (error zero) individuals by case: (280 309 296 294 309 325 322 308 316 291 310 347 362 340 312 295 291 199 171 180 254 249 253 285 309 290 328 301 420 474 490 446 541 434 447 384 382 331 237 92 150 184 179 218 148 216 321 400 599 753 753 753 757 757 757 757 757 757 757 757 665 640 623 609 590 578 597 574 588 556 551 556 537 487 529 489 477 480 448 399)
Population mean number of perfect (error zero) cases: 34.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())) ())
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3133.646
Median total errors in population: 120
Error averages by case: (38.976 36.965 37.178 38.184 37.306 35.264 39.455 48.351 38.624 38.738 44.062 34.077 39.266 41.116 39.449 38.528 38.494 40.107 35.318 36.113 40.288 37.403 39.599 46.696 53.058 35.999 39.875 39.315 38.024 34.971 36.914 33.684 42.896 38.345 38.527 36.818 39.503 42.261 35.545 39.321 36.955 42.028 38.44 39.582 37.296 32.467 35.369 43.84 40.977 38.747 38.883 39.193 39.146 39.281 39.416 39.551 39.686 39.821 39.956 40.091 39.671 39.731 37.764 37.861 43.981 37.003 38.996 37.079 45.085 46.188 35.208 35.296 43.338 37.552 34.403 39.478 37.686 43.574 37.966 40.448)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.015
Average program size in population (points): 50.353
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.302
Error (vector) diversity:			 0.474
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 178573974
--- Timings ---
Current time: 1481302641231 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while () in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) exec_noop (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or exec_s boolean_not integer_shove boolean_xor integer_fromboolean integer_mod (integer_mod integer_yank (5 5 integer_div integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 292 290 291 299 319 301 290 299 277 282 324 320 324 292 292 285 206 146 182 263 231 264 261 313 269 330 294 431 491 510 469 556 454 461 422 424 379 259 97 146 182 186 214 149 200 278 369 571 738 738 738 741 741 741 741 741 741 741 741 649 639 640 630 575 575 608 566 606 551 568 573 526 480 546 490 486 481 466 400)
Population mean number of elite cases: 34.25
Count of perfect (error zero) individuals by case: (270 292 290 291 299 319 301 290 299 277 282 324 320 324 292 292 285 206 146 182 263 231 264 261 313 269 330 294 431 491 510 469 556 454 461 422 424 379 259 97 146 182 186 214 149 200 278 369 571 738 738 738 741 741 741 741 741 741 741 741 649 639 640 630 575 575 608 566 606 551 568 573 526 480 546 490 486 481 466 400)
Population mean number of perfect (error zero) cases: 34.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3093.883
Median total errors in population: 241/2
Error averages by case: (36.009 35.992 33.18 40.184 37.363 36.277 44.429 50.537 39.886 41.024 47.716 41.844 38.298 37.34 37.359 38.063 37.625 36.791 33.426 34.883 32.303 35.454 40.48 43.655 53.153 38.813 41.685 39.556 35.631 32.98 38.294 34.029 37.609 33.49 43.141 40.544 42.074 42.927 37.116 38.179 33.977 46.204 36.581 39.385 35.205 34.672 36.114 47.0 42.74 37.63 37.749 37.87 37.983 38.104 38.223 38.344 38.463 38.584 38.703 38.824 36.746 35.782 34.771 33.851 38.018 34.061 36.027 35.099 42.019 39.202 36.103 36.216 41.355 37.84 36.499 41.606 38.768 40.742 43.27 44.214)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.145
Average program size in population (points): 50.501
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.296
Error (vector) diversity:			 0.467
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 182252748
--- Timings ---
Current time: 1481302657810 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 37
Lexicase best mean error: 0.4625
Lexicase best size: 67
Percent parens: 0.284
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 37
Zero cases best mean error: 0.4625
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 302 294 311 314 309 330 294 305 287 273 357 353 329 318 298 279 205 152 153 277 230 275 256 337 281 337 296 449 514 535 486 562 487 491 433 412 369 255 100 120 177 153 202 136 188 271 361 583 746 746 746 750 749 749 749 749 749 749 749 660 657 634 642 591 590 619 578 613 583 602 595 530 495 564 492 475 464 436 387)
Population mean number of elite cases: 34.76
Count of perfect (error zero) individuals by case: (289 302 294 311 314 309 330 294 305 287 273 357 353 329 318 298 279 205 152 153 277 230 275 256 337 281 337 296 449 514 535 486 562 487 491 433 412 369 255 100 120 177 153 202 136 188 271 361 583 746 746 746 750 749 749 749 749 749 749 749 660 657 634 642 591 590 619 578 613 583 602 595 530 495 564 492 475 464 436 387)
Population mean number of perfect (error zero) cases: 34.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (3 () integer_mod (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3802.15
Median total errors in population: 231/2
Error averages by case: (44.953 47.998 44.182 50.137 47.334 45.453 49.608 66.485 48.72 45.951 48.028 49.524 45.41 44.335 41.841 44.159 44.995 43.849 46.281 44.516 45.301 44.48 49.775 56.856 55.263 43.806 44.537 44.199 43.661 42.277 45.307 45.373 49.801 43.36 46.071 46.884 54.847 51.977 45.224 48.033 45.075 55.249 43.604 43.082 47.698 44.073 44.446 60.179 52.652 47.491 47.701 47.911 48.113 48.315 48.51 48.705 48.9 49.095 49.29 49.485 43.691 45.693 46.776 43.848 46.976 44.082 44.054 44.197 51.107 47.229 46.21 45.284 51.495 47.839 47.509 50.545 48.83 48.82 52.03 45.57)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.983
Average program size in population (points): 50.472
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.297
Error (vector) diversity:			 0.468
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 185875076
--- Timings ---
Current time: 1481302674671 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) boolean_yank exec_dup_times () exec_s (boolean_not integer_shove boolean_xor integer_mod) exec_noop integer_mod integer_mod integer_yank 5 5 integer_div integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 166
Lexicase best mean error: 2.075
Lexicase best size: 54
Percent parens: 0.241
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()))
Zero cases best partial simplification: (boolean_dup_times 3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup_items boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) boolean_yank exec_dup_times () boolean_or (boolean_not integer_shove boolean_xor integer_fromboolean integer_mod) (exec_noop) (integer_mod integer_yank 5 5 integer_div integer_min))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 0 1 0 1 0 1 0 1 1 2 0 1 2 2 2 3 3 3 3 117 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 166
Zero cases best mean error: 2.075
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 337 337 341 344 342 377 322 324 331 314 381 389 363 348 326 321 270 172 175 272 219 286 251 304 268 311 285 413 496 505 452 545 451 489 421 416 363 264 96 126 140 154 199 137 195 267 340 556 727 727 727 730 730 730 730 730 730 730 730 625 622 613 594 562 550 566 534 554 538 548 547 510 459 543 482 465 448 440 381)
Population mean number of elite cases: 34.26
Count of perfect (error zero) individuals by case: (324 337 337 341 344 342 377 322 324 331 314 381 389 363 348 326 321 270 172 175 272 219 286 251 304 268 311 285 413 496 505 452 545 451 489 421 416 363 264 96 126 140 154 199 137 195 267 340 556 727 727 727 730 730 730 730 730 730 730 730 625 622 613 594 562 550 566 534 554 538 548 547 510 459 543 482 465 448 440 381)
Population mean number of perfect (error zero) cases: 34.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3965.971
Median total errors in population: 121N
Error averages by case: (42.866 48.908 45.114 45.142 47.354 45.437 46.268 54.518 47.684 47.517 44.263 45.562 48.071 46.138 45.977 48.996 46.739 51.513 49.144 49.847 44.269 44.53 44.851 51.856 57.156 44.264 50.483 48.47 49.686 48.92 53.909 49.31 56.595 52.357 53.903 56.31 59.266 53.977 52.318 53.431 47.049 52.132 46.328 49.52 53.62 51.626 51.325 63.417 55.664 52.936 53.191 53.445 53.695 53.95 54.205 54.459 54.715 54.97 55.225 55.479 44.674 43.696 44.766 42.902 41.977 43.131 43.238 43.221 50.398 50.293 44.459 47.565 51.359 48.59 42.445 48.482 48.814 46.649 54.148 45.294)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.735
Average program size in population (points): 50.199
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.304
Error (vector) diversity:			 0.479
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 189498822
--- Timings ---
Current time: 1481302691188 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 37
Lexicase best mean error: 0.4625
Lexicase best size: 67
Percent parens: 0.284
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 37
Zero cases best mean error: 0.4625
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 319 340 328 328 337 355 318 324 300 289 348 345 319 299 279 285 206 134 169 276 228 289 241 330 273 310 260 429 526 528 488 564 483 504 434 443 383 267 85 154 163 188 225 144 201 274 353 568 747 747 747 750 750 750 750 750 750 750 750 634 612 623 597 568 565 592 550 562 548 566 557 523 485 553 477 470 467 451 385)
Population mean number of elite cases: 34.57
Count of perfect (error zero) individuals by case: (311 319 340 328 328 337 355 318 324 300 289 348 345 319 299 279 285 206 134 169 276 228 289 241 330 273 310 260 429 526 528 488 564 483 504 434 443 383 267 85 154 163 188 225 144 201 274 353 568 747 747 747 750 750 750 750 750 750 750 750 634 612 623 597 568 565 592 550 562 548 566 557 523 485 553 477 470 467 451 385)
Population mean number of perfect (error zero) cases: 34.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3389.182
Median total errors in population: 243/2
Error averages by case: (37.901 44.923 39.033 46.086 42.219 39.277 44.348 50.552 48.788 44.608 40.71 39.819 40.691 41.943 42.844 46.227 45.772 47.066 45.171 46.259 39.245 39.511 40.621 49.825 51.905 37.579 46.239 45.223 44.156 44.88 49.948 44.015 50.456 40.837 40.823 42.16 38.995 39.773 36.45 40.261 41.917 51.041 38.225 41.645 45.466 43.626 40.43 45.296 40.403 39.668 39.788 39.908 40.022 40.142 40.262 40.382 40.502 40.622 40.742 40.862 39.675 38.711 37.78 37.959 38.98 37.066 38.221 38.199 44.443 40.216 41.402 40.445 45.439 43.587 40.46 41.495 42.033 43.564 49.034 42.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.739
Average program size in population (points): 50.025
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.303
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 193049704
--- Timings ---
Current time: 1481302707881 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 () integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 51
Lexicase best total error: 37
Lexicase best mean error: 0.4625
Lexicase best size: 67
Percent parens: 0.284
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 37
Zero cases best mean error: 0.4625
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 345 342 348 339 356 362 341 348 336 328 381 398 379 348 327 316 220 168 166 260 244 282 259 312 264 319 268 435 524 529 493 555 481 513 430 474 385 310 92 147 152 147 209 144 195 273 341 543 748 748 748 748 748 748 748 748 748 748 748 623 596 588 566 557 548 565 529 544 531 526 524 508 467 548 490 468 454 445 374)
Population mean number of elite cases: 34.73
Count of perfect (error zero) individuals by case: (326 345 342 348 339 356 362 341 348 336 328 381 398 379 348 327 316 220 168 166 260 244 282 259 312 264 319 268 435 524 529 493 555 481 513 430 474 385 310 92 147 152 147 209 144 195 273 341 543 748 748 748 748 748 748 748 748 748 748 748 623 596 588 566 557 548 565 529 544 531 526 524 508 467 548 490 468 454 445 374)
Population mean number of perfect (error zero) cases: 34.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove})
Best program: (integer_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup integer_shove)
Partial simplification: (integer_dup_times 2 5 integer_rot exec_shove (5) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank exec_dup_times () boolean_or exec_do*count (boolean_not boolean_not 5) exec_dup_items integer_max boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank integer_yankdup)
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 1 2 0 1 1 1 1 1 1 1 2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 37
Mean: 0.4625
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 2779.083
Median total errors in population: 261/2
Error averages by case: (26.91 30.927 30.119 31.184 38.301 33.296 39.401 39.804 44.84 36.026 32.95 37.138 38.07 40.018 36.557 34.142 35.793 38.362 34.279 34.951 29.283 30.523 31.752 43.9 40.024 32.107 40.607 38.208 34.701 33.54 35.036 31.337 39.55 32.524 32.631 34.386 34.538 42.18 33.064 34.956 33.949 42.172 33.385 39.269 33.029 35.342 32.218 36.391 39.804 35.377 35.575 35.773 35.971 36.169 36.367 36.565 36.763 36.961 37.159 37.357 26.679 26.737 27.876 30.038 29.009 29.136 30.329 30.275 33.544 35.291 32.636 34.713 36.458 32.814 32.66 31.619 31.168 33.741 40.405 30.444)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.144
Average program size in population (points): 50.662
Average percent parens in population: 0.225
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.31
Error (vector) diversity:			 0.473
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 196593271
--- Timings ---
Current time: 1481302724465 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod exec_while integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 334 339 339 336 345 350 346 365 323 330 362 377 356 327 307 302 232 149 182 259 239 295 261 296 234 323 281 445 494 526 478 564 464 497 418 457 366 281 86 164 180 190 212 141 179 276 344 559 751 751 751 751 751 751 751 751 751 751 751 620 596 630 592 559 545 586 535 560 521 549 551 526 476 582 504 494 462 486 407)
Population mean number of elite cases: 34.87
Count of perfect (error zero) individuals by case: (314 334 339 339 336 345 350 346 365 323 330 362 377 356 327 307 302 232 149 182 259 239 295 261 296 234 323 281 445 494 526 478 564 464 497 418 457 366 281 86 164 180 190 212 141 179 276 344 559 751 751 751 751 751 751 751 751 751 751 751 620 596 630 592 559 545 586 535 560 521 549 551 526 476 582 504 494 462 486 407)
Population mean number of perfect (error zero) cases: 34.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (integer_lt) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 () integer_mod exec_while () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ())) ())
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 2898.649
Median total errors in population: 121
Error averages by case: (29.985 41.966 32.147 34.19 40.245 29.36 34.526 34.666 39.543 33.911 34.851 38.002 36.025 35.918 41.42 38.738 35.326 39.48 36.503 39.05 30.318 32.549 30.74 39.966 41.984 35.439 40.232 44.331 40.019 37.199 39.954 37.439 46.069 41.143 40.714 42.16 39.679 45.324 35.552 36.82 35.873 36.0 37.395 40.229 37.492 39.787 41.213 41.473 38.686 36.2 36.38 36.56 36.74 36.909 37.074 37.239 37.404 37.569 37.734 37.899 29.783 27.807 28.865 32.07 32.086 30.178 30.298 33.302 31.547 32.399 34.601 30.716 32.364 36.646 29.576 32.433 31.996 34.738 35.27 32.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.942
Average program size in population (points): 50.596
Average percent parens in population: 0.228
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.298
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 200166090
--- Timings ---
Current time: 1481302740876 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod exec_while () in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 360 362 358 362 371 372 356 376 359 340 363 361 324 301 293 326 236 156 175 256 229 264 242 277 248 332 277 439 506 504 469 574 469 504 426 457 341 295 87 137 157 172 215 160 191 236 340 527 744 744 744 744 744 744 744 744 744 744 744 613 593 613 578 554 562 589 551 566 526 550 565 531 496 576 496 481 443 465 415)
Population mean number of elite cases: 34.77
Count of perfect (error zero) individuals by case: (339 360 362 358 362 371 372 356 376 359 340 363 361 324 301 293 326 236 156 175 256 229 264 242 277 248 332 277 439 506 504 469 574 469 504 426 457 341 295 87 137 157 172 215 160 191 236 340 527 744 744 744 744 744 744 744 744 744 744 744 613 593 613 578 554 562 589 551 566 526 550 565 531 496 576 496 481 443 465 415)
Population mean number of perfect (error zero) cases: 34.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3657.37
Median total errors in population: 140N
Error averages by case: (38.926 47.898 43.052 44.153 45.179 41.222 46.33 49.568 45.465 46.694 44.427 43.461 43.682 42.62 44.162 43.991 41.803 43.548 42.134 43.679 42.315 43.512 42.634 56.79 48.182 45.873 45.976 47.933 43.748 42.962 46.006 44.053 50.369 48.976 50.612 54.312 50.733 55.186 48.197 49.172 47.867 52.007 49.125 44.118 42.447 45.547 46.354 54.029 53.76 48.746 48.72 49.016 48.96 49.286 49.2 49.556 49.44 49.826 49.68 50.096 38.777 39.818 39.858 40.008 39.994 41.014 41.19 41.157 40.388 44.24 44.388 42.486 42.294 44.35 41.469 41.527 41.879 42.69 48.306 44.222)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.268
Average program size in population (points): 49.698
Average percent parens in population: 0.228
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.303
Error (vector) diversity:			 0.462
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 203593699
--- Timings ---
Current time: 1481302757262 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 boolean_pop integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 365 375 363 357 360 367 350 379 339 322 379 364 339 322 307 319 241 161 171 262 234 292 227 284 260 304 259 438 519 533 503 581 492 522 442 467 361 317 102 138 162 161 226 151 190 248 330 519 744 744 744 744 744 744 744 744 744 744 744 612 612 607 581 550 545 584 528 547 512 553 554 526 502 572 486 480 459 471 422)
Population mean number of elite cases: 34.94
Count of perfect (error zero) individuals by case: (344 365 375 363 357 360 367 350 379 339 322 379 364 339 322 307 319 241 161 171 262 234 292 227 284 260 304 259 438 519 533 503 581 492 522 442 467 361 317 102 138 162 161 226 151 190 248 330 519 744 744 744 744 744 744 744 744 744 744 744 612 612 607 581 550 545 584 528 547 512 553 554 526 502 572 486 480 459 471 422)
Population mean number of perfect (error zero) cases: 34.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min))) ())
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3872.88
Median total errors in population: 283/2
Error averages by case: (47.934 46.893 46.038 47.064 53.1 47.25 49.331 64.439 48.524 54.578 48.943 47.787 51.143 57.996 51.617 48.971 47.716 51.938 48.455 47.904 47.323 45.462 47.694 61.84 55.88 57.362 55.249 50.517 53.318 47.448 51.167 48.363 50.146 45.811 50.949 49.671 48.653 50.35 41.689 41.93 51.879 53.965 51.339 47.23 49.933 48.895 48.04 51.795 49.031 41.348 41.438 41.528 41.618 41.708 41.798 41.888 41.978 42.068 42.158 42.248 45.769 46.768 45.846 45.956 45.024 45.067 49.127 47.227 46.33 49.265 50.33 48.492 47.348 48.408 46.488 48.464 46.832 48.577 52.045 49.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.804
Average program size in population (points): 50.426
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.31
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 207145227
--- Timings ---
Current time: 1481302773726 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while boolean_pop integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 boolean_pop integer_mod exec_while () in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 379 399 382 373 388 391 362 384 348 341 364 364 337 341 322 318 262 192 189 272 239 288 240 320 277 329 264 419 504 509 478 538 478 497 416 428 332 268 87 130 172 146 213 150 217 269 364 562 764 765 764 765 764 765 764 765 764 765 764 601 601 608 600 556 554 595 523 559 526 533 562 525 486 554 450 466 442 438 404)
Population mean number of elite cases: 35.19
Count of perfect (error zero) individuals by case: (359 379 399 382 373 388 391 362 384 348 341 364 364 337 341 322 318 262 192 189 272 239 288 240 320 277 329 264 419 504 509 478 538 478 497 416 428 332 268 87 130 172 146 213 150 217 269 364 562 764 765 764 765 764 765 764 765 764 765 764 601 601 608 600 556 554 595 523 559 526 533 562 525 486 554 450 466 442 438 404)
Population mean number of perfect (error zero) cases: 35.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()) ())
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 0 3 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]
Total: 37
Mean: 0.4625
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 3109.125
Median total errors in population: 281/2
Error averages by case: (33.721 39.532 37.701 41.768 40.886 36.993 38.124 44.161 35.511 38.594 34.661 33.979 39.046 38.937 40.0 39.807 39.305 37.637 37.029 37.442 37.287 36.252 36.278 50.78 37.51 36.871 36.703 41.161 38.729 35.901 37.534 35.842 49.645 38.563 40.587 43.34 43.394 47.572 39.263 39.502 38.633 40.79 37.195 39.661 40.397 38.954 42.522 44.067 47.187 38.892 39.069 39.252 39.429 39.612 39.789 39.972 40.149 40.332 40.509 40.692 33.71 33.643 34.726 35.654 33.659 34.747 36.969 35.904 36.236 46.929 39.26 37.379 39.052 38.458 34.544 38.41 35.877 36.535 37.368 35.414)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.767
Average program size in population (points): 50.277
Average percent parens in population: 0.226
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.32
Error (vector) diversity:			 0.471
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 210621236
--- Timings ---
Current time: 1481302790093 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 (boolean_pop) in1 boolean_yank exec_dup_times boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 () integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while boolean_pop integer_mod integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 379 403 360 374 381 390 337 374 351 327 338 379 363 350 293 309 245 174 181 298 277 319 272 319 292 329 293 446 511 510 495 542 486 500 424 446 359 312 101 107 135 142 189 154 213 259 341 502 729 729 729 729 729 729 729 729 729 729 729 580 585 571 589 544 538 567 512 551 533 536 574 527 478 534 466 458 497 437 430)
Population mean number of elite cases: 34.77
Count of perfect (error zero) individuals by case: (366 379 403 360 374 381 390 337 374 351 327 338 379 363 350 293 309 245 174 181 298 277 319 272 319 292 329 293 446 511 510 495 542 486 500 424 446 359 312 101 107 135 142 189 154 213 259 341 502 729 729 729 729 729 729 729 729 729 729 729 580 585 571 589 544 538 567 512 551 533 536 574 527 478 534 466 458 497 437 430)
Population mean number of perfect (error zero) cases: 34.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 1 1 1 1 1 1 1 1 1 1 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0]
Total: 35
Mean: 0.4375
Genome size: 48
Size: 59
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 3846.421
Median total errors in population: 137
Error averages by case: (42.852 44.847 45.966 47.021 48.22 44.233 46.289 49.503 47.578 50.694 48.503 43.694 48.117 49.778 44.864 45.587 42.395 43.924 42.36 43.715 43.208 43.424 43.475 57.777 52.778 50.621 43.83 44.583 44.264 43.978 45.703 41.924 47.99 47.532 56.994 56.118 61.44 60.783 53.058 53.03 44.899 55.101 45.251 42.765 46.842 42.902 49.389 58.01 60.064 52.473 52.578 52.683 52.788 52.893 52.998 53.103 53.208 53.313 53.418 53.523 42.739 42.721 42.812 43.931 42.985 43.061 46.167 45.149 44.346 47.161 44.429 44.426 46.368 50.571 44.629 48.592 44.9 44.631 47.399 48.553)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.359
Average program size in population (points): 49.431
Average percent parens in population: 0.220
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.311
Error (vector) diversity:			 0.474
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 214029995
--- Timings ---
Current time: 1481302807057 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while () integer_mod () in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 385 408 358 385 382 414 365 386 360 350 333 370 341 333 273 278 237 161 172 313 273 324 268 314 279 339 296 450 504 535 484 540 462 484 403 448 345 302 94 113 142 135 219 168 245 295 391 540 770 770 770 770 770 770 770 770 770 770 770 604 614 563 588 561 557 579 515 569 536 539 575 529 500 520 464 472 498 434 447)
Population mean number of elite cases: 35.49
Count of perfect (error zero) individuals by case: (357 385 408 358 385 382 414 365 386 360 350 333 370 341 333 273 278 237 161 172 313 273 324 268 314 279 339 296 450 504 535 484 540 462 484 403 448 345 302 94 113 142 135 219 168 245 295 391 540 770 770 770 770 770 770 770 770 770 770 770 604 614 563 588 561 557 579 515 569 536 539 575 529 500 520 464 472 498 434 447)
Population mean number of perfect (error zero) cases: 35.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_pop in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 1 1 1 1 1 1 1 1 1 1 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0]
Total: 35
Mean: 0.4375
Genome size: 48
Size: 59
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 2276.231
Median total errors in population: 136
Error averages by case: (24.897 29.873 26.955 27.099 30.227 24.344 27.455 29.593 31.619 29.004 25.647 26.157 25.642 33.109 28.201 33.212 28.963 30.03 29.088 27.014 25.232 26.47 24.582 38.893 29.974 28.918 28.299 29.008 32.482 27.803 26.532 26.132 31.06 27.939 28.858 29.99 31.14 36.421 28.075 27.793 28.945 28.129 33.492 28.464 28.632 25.977 29.796 32.64 36.16 27.0 27.165 27.33 27.495 27.66 27.825 27.99 28.155 28.32 28.485 28.65 26.775 24.761 23.916 24.001 25.049 23.109 26.27 24.329 26.474 30.401 26.606 28.56 32.578 28.846 27.755 28.773 29.13 30.91 31.528 24.42)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.296
Average program size in population (points): 50.558
Average percent parens in population: 0.220
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.31
Error (vector) diversity:			 0.478
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 217441813
--- Timings ---
Current time: 1481302823622 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Lexicase best partial simplification: (boolean_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while integer_fromboolean in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 54
Lexicase best total error: 167
Lexicase best mean error: 2.0875
Lexicase best size: 60
Percent parens: 0.267
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min)) () ()) ()) ())
Zero cases best partial simplification: (boolean_dup_times 3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank 5 boolean_dup 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1 exec_if (exec_dup_times () boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 integer_mod integer_yank exec_do*count (5 5 integer_div integer_min))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 1 1 1 1 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 128 0 1 2 2 2 0 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 54
Zero cases best number of zero cases: 54
Zero cases best total error: 167
Zero cases best mean error: 2.0875
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 375 396 340 368 375 410 361 359 345 351 325 395 366 369 303 322 271 171 199 294 274 328 266 304 250 318 278 442 539 538 517 563 490 505 436 459 357 307 95 122 157 159 215 147 216 258 361 521 750 750 750 750 750 750 750 750 750 750 750 615 613 595 599 573 562 602 530 592 556 556 579 525 507 545 486 479 498 437 454)
Population mean number of elite cases: 35.61
Count of perfect (error zero) individuals by case: (340 375 396 340 368 375 410 361 359 345 351 325 395 366 369 303 322 271 171 199 294 274 328 266 304 250 318 278 442 539 538 517 563 490 505 436 459 357 307 95 122 157 159 215 147 216 258 361 521 750 750 750 750 750 750 750 750 750 750 750 615 613 595 599 573 562 602 530 592 556 556 579 525 507 545 486 479 498 437 454)
Population mean number of perfect (error zero) cases: 35.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 boolean_pop in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_not boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_s (boolean_not integer_shove 5) (exec_dup_items 5 integer_yank integer_fromboolean integer_mod) (exec_noop) in1 integer_yank integer_fromboolean integer_max integer_yank in1 integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 1 1 1 1 1 1 1 1 1 1 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0]
Total: 35
Mean: 0.4375
Genome size: 48
Size: 59
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 2168.16
Median total errors in population: 121
Error averages by case: (23.896 26.906 24.037 24.123 32.342 22.409 22.541 26.838 29.787 30.024 21.594 25.667 21.26 25.767 22.997 24.63 28.33 28.396 26.144 21.658 21.277 23.536 21.713 32.124 29.095 28.085 23.365 24.795 28.542 23.694 21.787 22.396 30.981 26.963 32.191 30.238 31.397 34.819 34.577 33.615 26.009 24.259 23.427 24.937 22.291 22.909 27.417 29.598 38.125 33.027 33.192 33.357 33.522 33.687 33.852 34.017 34.182 34.347 34.512 34.677 23.718 23.717 20.903 23.019 24.028 21.172 26.287 22.33 23.507 27.365 21.638 25.599 29.697 25.818 23.014 25.891 25.23 27.123 28.806 23.418)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.174
Average program size in population (points): 50.275
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.312
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 220840242
--- Timings ---
Current time: 1481302840155 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 55
Lexicase best total error: 34
Lexicase best mean error: 0.425
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 55
Zero cases best number of zero cases: 55
Zero cases best total error: 34
Zero cases best mean error: 0.425
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 366 385 325 371 369 405 359 398 370 372 333 381 379 363 295 338 283 206 209 294 288 328 289 332 288 339 279 439 520 524 505 555 473 510 422 453 393 337 110 133 146 149 217 142 207 255 382 534 763 763 763 763 763 763 763 763 763 763 763 614 628 587 575 587 584 577 547 565 576 550 568 547 532 536 507 491 505 436 445)
Population mean number of elite cases: 36.03
Count of perfect (error zero) individuals by case: (332 366 385 325 371 369 405 359 398 370 372 333 381 379 363 295 338 283 206 209 294 288 328 289 332 288 339 279 439 520 524 505 555 473 510 422 453 393 337 110 133 146 149 217 142 207 255 382 534 763 763 763 763 763 763 763 763 763 763 763 614 628 587 575 587 584 577 547 565 576 550 568 547 532 536 507 491 505 436 445)
Population mean number of perfect (error zero) cases: 36.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3000.469
Median total errors in population: 251/2
Error averages by case: (32.868 39.888 33.01 36.074 37.222 35.283 33.364 39.607 37.664 42.759 37.281 34.513 34.367 43.263 41.628 38.86 37.193 41.571 44.657 36.099 32.265 33.44 32.568 42.857 41.833 40.479 37.565 38.974 35.907 42.272 38.024 37.54 44.621 42.558 46.502 43.867 42.521 53.021 35.569 35.581 34.937 35.175 36.333 36.252 36.859 39.794 40.772 45.981 42.164 34.887 35.037 35.187 35.337 35.487 35.637 35.787 35.937 36.087 36.237 36.387 34.714 33.701 31.854 32.009 32.965 32.038 36.219 32.165 34.387 38.139 32.448 33.482 33.536 36.554 35.778 36.459 39.172 36.84 38.483 44.117)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.491
Average program size in population (points): 49.617
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.325
Error (vector) diversity:			 0.481
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 224204270
--- Timings ---
Current time: 1481302856748 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 55
Lexicase best total error: 34
Lexicase best mean error: 0.425
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 () integer_mod exec_while () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 55
Zero cases best number of zero cases: 55
Zero cases best total error: 34
Zero cases best mean error: 0.425
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 424 457 385 415 424 459 391 422 373 377 331 369 359 346 287 329 272 203 221 277 260 299 259 291 278 353 290 440 543 514 489 533 476 507 458 473 374 309 103 125 153 161 238 156 216 246 330 525 741 741 741 741 741 741 741 741 741 741 741 638 652 606 601 612 597 596 568 588 604 583 603 578 557 566 522 507 529 448 477)
Population mean number of elite cases: 36.48
Count of perfect (error zero) individuals by case: (378 424 457 385 415 424 459 391 422 373 377 331 369 359 346 287 329 272 203 221 277 260 299 259 291 278 353 290 440 543 514 489 533 476 507 458 473 374 309 103 125 153 161 238 156 216 246 330 525 741 741 741 741 741 741 741 741 741 741 741 638 652 606 601 612 597 596 568 588 604 583 603 578 557 566 522 507 529 448 477)
Population mean number of perfect (error zero) cases: 36.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 2965.218
Median total errors in population: 120
Error averages by case: (33.904 37.833 33.886 35.038 40.042 35.033 35.151 41.436 35.421 36.523 34.337 33.147 36.936 50.809 43.925 44.988 39.785 40.187 40.955 37.599 33.329 34.486 33.547 40.745 36.118 38.651 37.371 42.626 39.597 38.604 37.272 40.017 40.146 37.748 37.047 36.232 36.311 44.328 35.639 35.634 37.868 39.035 37.144 41.769 39.306 38.809 37.733 35.802 38.775 34.899 35.049 35.199 35.349 35.499 35.649 35.799 35.949 36.099 36.249 36.399 34.725 33.75 32.858 32.946 33.908 32.956 38.11 33.134 34.234 34.05 33.229 33.258 34.219 36.352 34.524 34.375 33.955 34.862 36.256 52.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.873
Average program size in population (points): 50.22
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.292
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 227515475
--- Timings ---
Current time: 1481302873171 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s ((integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times boolean_swap exec_dup_times (boolean_rot 3 () integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 428 447 390 426 415 454 384 426 362 392 331 378 365 356 307 350 297 226 211 292 278 334 264 320 303 340 282 417 501 487 466 499 430 465 424 418 361 284 104 131 142 159 236 182 232 292 373 546 738 738 738 738 738 738 738 738 738 738 738 617 628 584 580 561 560 581 544 556 571 566 575 539 528 540 504 492 526 453 466)
Population mean number of elite cases: 36.00
Count of perfect (error zero) individuals by case: (403 428 447 390 426 415 454 384 426 362 392 331 378 365 356 307 350 297 226 211 292 278 334 264 320 303 340 282 417 501 487 466 499 430 465 424 418 361 284 104 131 142 159 236 182 232 292 373 546 738 738 738 738 738 738 738 738 738 738 738 617 628 584 580 561 560 581 544 556 571 566 575 539 528 540 504 492 526 453 466)
Population mean number of perfect (error zero) cases: 36.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3241.245
Median total errors in population: 114
Error averages by case: (37.798 45.79 37.887 41.041 40.008 38.106 37.352 44.523 40.524 40.81 37.125 38.041 37.14 40.808 40.0 39.6 38.566 40.976 38.84 38.673 39.23 39.428 36.432 45.872 39.891 45.827 37.101 41.649 39.454 39.785 39.145 38.093 43.446 42.709 39.974 38.283 41.239 45.475 41.745 42.232 39.805 39.057 41.225 39.846 41.309 37.502 41.202 40.786 44.671 41.639 41.864 42.087 42.314 42.539 42.764 42.987 43.214 43.439 43.664 43.887 39.697 36.691 38.826 38.949 37.951 38.036 42.166 38.152 39.292 39.099 39.375 38.358 38.6 38.449 38.653 37.623 39.136 40.785 42.939 52.049)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.614
Average program size in population (points): 49.772
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.278
Error (vector) diversity:			 0.437
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 230885100
--- Timings ---
Current time: 1481302889707 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if boolean_dup_items (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank (5 5 integer_div integer_min)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank (5 5 integer_div integer_min)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 428 441 390 420 409 453 392 407 359 397 362 409 385 380 325 343 324 221 201 275 251 317 240 305 266 342 254 414 503 507 464 529 462 487 443 482 372 284 104 132 145 157 227 176 243 294 339 574 768 768 768 768 768 768 768 768 768 768 768 604 606 580 575 570 558 585 545 558 566 565 582 536 516 556 510 502 526 461 450)
Population mean number of elite cases: 36.42
Count of perfect (error zero) individuals by case: (391 428 441 390 420 409 453 392 407 359 397 362 409 385 380 325 343 324 221 201 275 251 317 240 305 266 342 254 414 503 507 464 529 462 487 443 482 372 284 104 132 145 157 227 176 243 294 339 574 768 768 768 768 768 768 768 768 768 768 768 604 606 580 575 570 558 585 545 558 566 565 582 536 516 556 510 502 526 461 450)
Population mean number of perfect (error zero) cases: 36.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 2972.278
Median total errors in population: 119
Error averages by case: (34.848 38.843 34.954 37.121 39.143 37.298 36.382 44.637 36.714 37.179 34.643 37.382 33.14 35.247 37.311 38.785 35.779 36.394 33.189 33.776 34.299 35.532 35.596 44.092 40.173 42.303 34.186 34.136 36.803 32.887 34.523 36.255 41.163 42.034 37.98 37.673 39.624 42.017 38.092 38.332 38.9 34.219 36.583 36.15 36.674 37.56 35.862 41.99 40.64 37.703 37.838 37.973 38.108 38.243 38.378 38.513 38.648 38.783 38.918 39.053 35.726 34.744 33.869 35.001 34.974 34.096 37.271 36.19 38.448 37.226 34.531 38.454 34.593 35.654 32.813 32.692 33.194 37.822 38.209 45.57)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.581
Average program size in population (points): 51.243
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.293
Error (vector) diversity:			 0.45
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 234186027
--- Timings ---
Current time: 1481302906128 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty exec_s (5 5 integer_div integer_min)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod exec_s (5 5 integer_div integer_min)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 431 447 402 428 420 452 414 427 389 405 348 397 388 385 349 354 321 234 222 294 269 315 256 318 283 338 261 408 500 483 477 522 444 468 423 474 344 269 92 132 142 163 232 152 252 306 343 576 767 767 767 767 767 767 767 767 767 767 767 588 601 588 566 557 538 577 541 551 543 564 577 533 517 560 505 509 503 460 459)
Population mean number of elite cases: 36.44
Count of perfect (error zero) individuals by case: (415 431 447 402 428 420 452 414 427 389 405 348 397 388 385 349 354 321 234 222 294 269 315 256 318 283 338 261 408 500 483 477 522 444 468 423 474 344 269 92 132 142 163 232 152 252 306 343 576 767 767 767 767 767 767 767 767 767 767 767 588 601 588 566 557 538 577 541 551 543 564 577 533 517 560 505 509 503 460 459)
Population mean number of perfect (error zero) cases: 36.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3597.742
Median total errors in population: 125N
Error averages by case: (43.85 47.886 42.054 43.109 44.163 42.209 43.461 50.483 43.422 43.704 41.45 43.039 42.85 47.794 49.291 43.388 45.908 47.085 46.347 46.756 42.305 42.433 42.571 49.866 42.921 42.546 45.323 44.605 45.083 44.908 47.247 46.909 54.27 52.181 47.839 50.596 47.455 50.824 43.581 45.235 42.853 41.127 43.038 44.559 51.1 49.125 45.546 47.754 50.403 44.595 44.715 44.835 44.955 45.075 45.195 45.315 45.435 45.555 45.675 45.795 43.788 41.775 42.854 41.994 43.09 43.136 44.155 42.187 41.287 42.271 42.323 41.32 41.542 42.545 42.527 40.552 42.9 43.743 42.858 51.298)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.024
Average program size in population (points): 50.724
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.281
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 237523271
--- Timings ---
Current time: 1481302922549 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod exec_while () in1) exec_if (boolean_dup_items) boolean_or exec_s (exec_do*while integer_shove integer_pop integer_fromboolean integer_mod exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod)) boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 421 452 386 428 408 458 402 419 394 411 336 394 370 391 349 357 318 255 245 279 251 328 243 305 266 343 264 385 471 464 447 517 439 465 417 441 359 264 94 120 128 150 217 147 241 286 329 566 757 757 757 757 757 757 757 757 757 757 757 566 585 574 563 574 554 568 543 566 571 565 596 535 517 549 497 507 530 445 479)
Population mean number of elite cases: 36.03
Count of perfect (error zero) individuals by case: (400 421 452 386 428 408 458 402 419 394 411 336 394 370 391 349 357 318 255 245 279 251 328 243 305 266 343 264 385 471 464 447 517 439 465 417 441 359 264 94 120 128 150 217 147 241 286 329 566 757 757 757 757 757 757 757 757 757 757 757 566 585 574 563 574 554 568 543 566 571 565 596 535 517 549 497 507 530 445 479)
Population mean number of perfect (error zero) cases: 36.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_invert_first_then_and) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_invert_first_then_and in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 boolean_pop integer_mod integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 4039.507
Median total errors in population: 119
Error averages by case: (50.776 56.816 49.884 48.055 48.093 50.134 49.408 53.441 52.373 53.62 52.374 51.069 51.109 53.435 56.471 52.198 47.818 47.885 46.013 47.769 49.269 50.468 47.536 55.913 53.925 53.151 52.363 55.509 48.268 45.937 48.766 47.604 58.36 54.57 51.362 52.171 50.706 55.568 49.708 47.97 49.882 49.093 51.292 50.402 49.266 49.005 48.945 52.602 55.44 47.375 47.597 47.795 48.017 48.215 48.437 48.635 48.857 49.055 49.277 49.475 50.77 50.735 47.819 48.001 49.943 48.084 50.174 47.154 49.319 49.224 47.322 50.31 51.489 50.511 48.635 48.575 50.08 53.589 52.845 58.401)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.166
Average program size in population (points): 50.606
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.276
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 240790221
--- Timings ---
Current time: 1481302939229 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (boolean_dup_items) boolean_or exec_s (exec_do*while integer_shove integer_pop integer_fromboolean integer_mod exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or ((integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 451 471 419 458 449 504 446 445 403 427 363 401 379 409 342 360 318 268 227 277 247 301 244 304 260 332 247 381 460 465 433 534 419 454 407 446 368 270 95 119 145 164 240 188 281 311 340 563 758 758 758 758 758 758 758 758 758 758 758 618 645 588 572 582 556 592 524 600 576 582 619 551 519 567 482 531 518 462 494)
Population mean number of elite cases: 36.76
Count of perfect (error zero) individuals by case: (410 451 471 419 458 449 504 446 445 403 427 363 401 379 409 342 360 318 268 227 277 247 301 244 304 260 332 247 381 460 465 433 534 419 454 407 446 368 270 95 119 145 164 240 188 281 311 340 563 758 758 758 758 758 758 758 758 758 758 758 618 645 588 572 582 556 592 524 600 576 582 619 551 519 567 482 531 518 462 494)
Population mean number of perfect (error zero) cases: 36.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3715.463
Median total errors in population: 119
Error averages by case: (45.765 43.785 45.835 43.992 45.972 45.974 43.104 46.342 47.315 48.485 46.437 47.115 45.013 48.027 47.472 46.664 43.143 43.298 42.927 42.774 43.262 46.44 45.52 47.715 49.071 46.421 46.499 47.115 44.19 41.818 42.564 45.111 50.225 48.764 48.59 50.936 49.058 52.373 47.235 47.177 46.838 45.114 45.147 45.279 43.419 45.528 46.696 53.51 53.544 46.582 46.807 47.032 47.257 47.482 47.707 47.932 48.157 48.382 48.607 48.832 46.649 45.616 42.782 42.9 45.898 44.032 47.006 43.103 46.097 47.088 44.07 46.071 46.332 43.444 43.426 45.457 44.647 47.545 47.766 56.159)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.555
Average program size in population (points): 51.052
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.286
Error (vector) diversity:			 0.446
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 244088240
--- Timings ---
Current time: 1481302955776 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod)) (integer_mod integer_yank exec_s (5 5 integer_div integer_min) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if boolean_dup_items (boolean_or (exec_do*while integer_shove integer_pop integer_fromboolean integer_mod exec_noop) boolean_empty integer_yank exec_s (5 5 integer_div integer_min) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 438 432 405 438 434 473 461 433 410 376 374 430 378 379 350 352 312 206 196 288 269 310 261 306 252 341 262 380 481 477 455 511 443 467 419 431 348 255 84 129 133 156 257 184 250 299 337 557 760 760 760 760 760 760 760 760 760 760 760 572 600 575 521 531 527 547 507 547 542 560 563 498 500 531 495 505 500 489 471)
Population mean number of elite cases: 35.94
Count of perfect (error zero) individuals by case: (380 438 432 405 438 434 473 461 433 410 376 374 430 378 379 350 352 312 206 196 288 269 310 261 306 252 341 262 380 481 477 455 511 443 467 419 431 348 255 84 129 133 156 257 184 250 299 337 557 760 760 760 760 760 760 760 760 760 760 760 572 600 575 521 531 527 547 507 547 542 560 563 498 500 531 495 505 500 489 471)
Population mean number of perfect (error zero) cases: 35.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3408.322
Median total errors in population: 121
Error averages by case: (40.96 45.895 39.989 40.103 42.12 41.146 39.193 41.35 41.317 42.581 44.995 44.387 42.598 47.916 43.906 45.096 42.036 42.235 41.044 41.042 41.343 40.513 40.572 43.817 42.834 44.654 43.239 41.135 42.411 40.541 41.426 45.594 45.768 44.058 48.882 48.234 48.815 48.106 43.093 42.303 40.881 41.004 43.219 41.366 42.092 44.175 44.747 49.562 47.397 41.662 41.782 41.902 42.022 42.132 42.237 42.342 42.447 42.552 42.657 42.762 40.897 40.877 39.999 40.172 42.136 41.213 43.331 40.335 40.437 41.28 39.403 40.361 41.453 40.552 38.646 38.544 39.807 41.598 40.735 50.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.023
Average program size in population (points): 50.286
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.302
Error (vector) diversity:			 0.465
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 247353208
--- Timings ---
Current time: 1481302972121 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Lexicase best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Lexicase best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod () in1) exec_if (boolean_dup_items) boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 56
Lexicase best total error: 139
Lexicase best mean error: 1.7375
Lexicase best size: 66
Percent parens: 0.273
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Zero cases best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Zero cases best partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod integer_fromboolean in1) exec_if (boolean_dup_items) boolean_or exec_s boolean_empty integer_mod integer_yank (5 5 integer_div integer_min) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 0 98 2 1 0 1 1 1 2 2 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 56
Zero cases best number of zero cases: 56
Zero cases best total error: 139
Zero cases best mean error: 1.7375
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 469 481 424 462 464 494 460 436 421 416 367 410 397 402 355 354 323 258 221 306 266 327 272 336 282 369 297 429 502 499 467 554 463 486 429 433 373 307 106 135 156 169 241 196 257 298 345 561 751 751 751 751 751 751 751 751 751 751 751 597 635 587 552 550 537 566 517 577 561 576 599 527 516 576 489 545 525 493 486)
Population mean number of elite cases: 37.16
Count of perfect (error zero) individuals by case: (413 469 481 424 462 464 494 460 436 421 416 367 410 397 402 355 354 323 258 221 306 266 327 272 336 282 369 297 429 502 499 467 554 463 486 429 433 373 307 106 135 156 169 241 196 257 298 345 561 751 751 751 751 751 751 751 751 751 751 751 597 635 587 552 550 537 566 517 577 561 576 599 527 516 576 489 545 525 493 486)
Population mean number of perfect (error zero) cases: 37.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 2186.603
Median total errors in population: 110
Error averages by case: (24.806 30.756 24.845 23.929 26.016 25.057 24.291 27.303 26.198 27.57 27.488 27.958 29.548 36.456 35.506 31.315 25.469 27.046 23.486 25.367 25.243 26.367 25.498 26.674 28.846 29.411 31.962 31.991 26.511 24.188 23.014 30.274 27.688 28.301 26.587 31.97 26.566 32.58 27.304 28.533 25.812 25.026 28.157 27.428 23.806 22.912 24.551 31.313 27.287 27.801 27.936 28.071 28.206 28.341 28.476 28.611 28.746 28.881 29.016 29.151 25.754 26.68 24.816 25.977 25.982 26.086 29.06 25.171 25.157 26.159 25.135 27.239 26.424 24.438 26.367 26.474 25.509 26.436 27.623 30.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0N 0)
Average genome size in population (length): 39.097
Average program size in population (points): 50.209
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.278
Error (vector) diversity:			 0.466
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 250577361
--- Timings ---
Current time: 1481302988412 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times integer_stackdepth exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times exec_dup_times () integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 456 465 412 457 464 496 462 445 417 413 370 423 377 388 360 346 311 229 190 323 267 339 281 337 284 381 292 441 530 534 503 597 495 519 464 480 373 303 102 147 163 197 254 190 253 279 318 564 768 768 768 768 768 768 768 768 768 768 768 576 607 574 538 540 518 559 498 566 534 565 580 507 481 556 479 519 501 493 470)
Population mean number of elite cases: 37.20
Count of perfect (error zero) individuals by case: (403 456 465 412 457 464 496 462 445 417 413 370 423 377 388 360 346 311 229 190 323 267 339 281 337 284 381 292 441 530 534 503 597 495 519 464 480 373 303 102 147 163 197 254 190 253 279 318 564 768 768 768 768 768 768 768 768 768 768 768 576 607 574 538 540 518 559 498 566 534 565 580 507 481 556 479 519 501 493 470)
Population mean number of perfect (error zero) cases: 37.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3036.999
Median total errors in population: 108
Error averages by case: (37.809 39.867 38.997 35.087 38.143 35.217 35.33 45.331 41.388 43.759 36.7 35.682 36.627 38.003 37.494 36.809 41.102 39.514 37.04 34.655 36.246 37.512 35.639 39.784 43.815 35.915 35.184 37.222 37.887 36.542 34.447 37.756 37.802 36.61 37.967 38.678 37.741 42.835 36.145 39.238 37.944 37.174 35.146 35.928 33.94 32.603 34.501 40.542 38.568 38.641 38.881 39.121 39.361 39.589 39.814 40.039 40.264 40.489 40.714 40.939 37.761 37.747 35.874 37.061 38.173 35.281 39.173 35.342 37.233 38.351 35.285 37.355 37.553 35.712 35.444 36.624 35.745 39.597 41.551 46.42)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.842
Average program size in population (points): 49.887
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.274
Error (vector) diversity:			 0.442
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 253747696
--- Timings ---
Current time: 1481303004569 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 454 449 410 457 454 471 452 426 416 389 405 446 403 418 381 318 309 217 213 296 269 312 271 313 288 348 272 399 487 505 466 549 466 485 436 441 374 267 106 131 141 158 231 196 246 289 321 558 740 740 740 740 740 740 740 740 740 740 740 608 638 591 546 555 529 559 522 570 546 576 590 527 510 554 500 536 505 507 508)
Population mean number of elite cases: 36.62
Count of perfect (error zero) individuals by case: (395 454 449 410 457 454 471 452 426 416 389 405 446 403 418 381 318 309 217 213 296 269 312 271 313 288 348 272 399 487 505 466 549 466 485 436 441 374 267 106 131 141 158 231 196 246 289 321 558 740 740 740 740 740 740 740 740 740 740 740 608 638 591 546 555 529 559 522 570 546 576 590 527 510 554 500 536 505 507 508)
Population mean number of perfect (error zero) cases: 36.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction 4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min) () ()) ()))
Partial simplification: (integer_dup_times 4 exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while () integer_mod () in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop integer_fromboolean integer_mod) exec_noop) (boolean_empty integer_mod integer_yank exec_s (5 5 integer_div integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 1 1 1 1 2 2 2 2 2 2 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 34
Mean: 0.425
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3412.432
Median total errors in population: 118
Error averages by case: (39.827 41.833 38.944 39.024 41.112 40.199 40.332 46.483 44.647 43.951 42.677 42.664 41.728 44.842 42.717 40.675 48.774 49.646 46.516 42.0 40.288 40.427 40.644 43.888 49.307 42.144 42.241 42.316 46.786 45.866 41.041 45.186 51.985 47.199 41.569 45.327 43.952 50.621 40.679 40.877 40.877 43.26 40.319 42.261 42.317 45.584 43.336 47.918 45.498 40.15 40.332 40.51 40.692 40.87 41.052 41.23 41.412 41.59 41.772 41.95 40.697 38.693 38.808 39.013 40.05 40.172 40.152 41.26 41.287 41.302 40.251 40.397 40.5 41.567 40.611 42.727 43.792 44.825 45.017 47.447)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.604
Average program size in population (points): 49.376
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.286
Error (vector) diversity:			 0.456
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 256946582
--- Timings ---
Current time: 1481303020619 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times () integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 493 480 454 493 495 513 488 461 441 426 430 461 428 426 390 351 313 240 203 291 271 307 256 320 288 343 271 424 509 510 485 527 462 507 448 432 381 270 95 162 150 166 234 189 242 291 333 568 757 757 757 757 757 757 757 757 757 757 757 611 632 607 547 577 547 610 528 598 557 600 615 537 522 586 503 565 515 529 519)
Population mean number of elite cases: 37.75
Count of perfect (error zero) individuals by case: (404 493 480 454 493 495 513 488 461 441 426 430 461 428 426 390 351 313 240 203 291 271 307 256 320 288 343 271 424 509 510 485 527 462 507 448 432 381 270 95 162 150 166 234 189 242 291 333 568 757 757 757 757 757 757 757 757 757 757 757 611 632 607 547 577 547 610 528 598 557 600 615 537 522 586 503 565 515 529 519)
Population mean number of perfect (error zero) cases: 37.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 exec_while () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 3951.844
Median total errors in population: 217/2
Error averages by case: (45.807 48.758 44.828 44.908 46.999 46.049 46.073 54.206 49.318 52.621 49.142 48.487 48.465 48.646 49.672 50.068 50.199 52.783 47.735 47.609 45.268 44.366 47.523 49.661 52.765 49.643 49.239 50.983 50.152 47.484 50.532 52.876 51.956 53.815 53.471 58.247 51.946 56.647 48.877 51.782 46.721 50.077 48.226 49.51 47.903 49.075 48.588 54.597 52.658 51.094 51.169 51.244 51.319 51.394 51.469 51.544 51.619 51.694 51.769 51.844 44.7 43.687 45.76 43.962 43.936 46.042 44.954 46.171 46.116 46.181 47.06 46.193 46.369 48.408 48.414 49.491 50.455 50.498 49.588 60.739)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.925
Average program size in population (points): 49.425
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.276
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 260063326
--- Timings ---
Current time: 1481303036558 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 489 471 438 481 482 509 492 459 436 401 402 448 426 432 385 339 321 221 197 285 265 309 256 318 263 337 265 423 532 538 519 557 484 536 454 457 393 288 87 174 161 188 241 180 234 290 325 555 771 771 771 771 771 771 771 771 771 771 771 595 616 583 535 583 528 601 517 572 553 575 595 527 504 572 478 536 515 501 506)
Population mean number of elite cases: 37.60
Count of perfect (error zero) individuals by case: (386 489 471 438 481 482 509 492 459 436 401 402 448 426 432 385 339 321 221 197 285 265 309 256 318 263 337 265 423 532 538 519 557 484 536 454 457 393 288 87 174 161 188 241 180 234 290 325 555 771 771 771 771 771 771 771 771 771 771 771 595 616 583 535 583 528 601 517 572 553 575 595 527 504 572 478 536 515 501 506)
Population mean number of perfect (error zero) cases: 37.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 (boolean_pop) in1 boolean_yank exec_dup_times () integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2324.968
Median total errors in population: 233/2
Error averages by case: (25.943 31.86 25.964 27.077 33.163 27.227 28.329 35.343 31.528 34.827 29.534 30.49 29.926 30.01 29.154 28.908 30.48 29.083 24.385 24.972 27.373 27.488 27.705 29.833 32.077 28.653 28.675 26.296 26.657 22.638 23.697 30.128 30.942 27.717 25.751 30.938 30.28 33.56 27.892 29.765 26.847 28.219 27.397 26.529 24.276 26.566 26.262 30.167 31.192 29.142 29.412 29.682 29.952 30.222 30.492 30.762 31.032 31.302 31.572 31.842 26.834 26.81 27.903 27.1 28.037 28.243 29.124 28.296 28.324 28.347 28.325 28.393 29.59 29.689 30.636 29.732 30.997 29.695 33.833 35.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.329
Average program size in population (points): 50.074
Average percent parens in population: 0.211
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.291
Error (vector) diversity:			 0.465
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 263222737
--- Timings ---
Current time: 1481303052887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times () integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 () in1 exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 509 491 467 502 505 525 504 479 451 417 417 459 454 442 396 374 318 239 203 298 260 313 253 330 260 341 263 400 516 530 505 561 481 549 463 508 415 315 104 161 161 197 232 179 234 272 314 544 770 770 770 770 770 770 770 770 770 770 770 644 638 623 578 585 547 625 545 616 572 617 631 543 527 612 515 580 524 549 539)
Population mean number of elite cases: 38.61
Count of perfect (error zero) individuals by case: (418 509 491 467 502 505 525 504 479 451 417 417 459 454 442 396 374 318 239 203 298 260 313 253 330 260 341 263 400 516 530 505 561 481 549 463 508 415 315 104 161 161 197 232 179 234 272 314 544 770 770 770 770 770 770 770 770 770 770 770 644 638 623 578 585 547 625 545 616 572 617 631 543 527 612 515 580 524 549 539)
Population mean number of perfect (error zero) cases: 38.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2464.531
Median total errors in population: 108
Error averages by case: (27.851 31.78 27.845 28.901 30.927 29.019 32.022 35.165 30.229 33.351 31.023 31.804 30.594 30.834 36.0 33.849 33.299 38.716 31.105 31.486 28.306 29.37 30.472 32.567 32.633 30.273 30.573 38.199 32.172 29.308 28.976 38.652 36.813 31.66 28.533 32.081 30.96 36.259 26.627 27.588 28.719 29.851 28.936 31.746 28.934 30.195 29.275 30.443 30.1 26.836 26.986 27.138 27.286 27.436 27.586 27.738 27.886 28.036 28.186 28.338 28.715 28.741 28.769 27.946 29.92 30.06 30.94 32.103 30.089 32.085 30.051 30.094 30.264 32.351 32.186 32.313 32.416 31.333 36.29 38.392)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.043
Average program size in population (points): 49.529
Average percent parens in population: 0.207
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.288
Error (vector) diversity:			 0.477
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 266338942
--- Timings ---
Current time: 1481303068815 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times () integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_noop integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 491 482 454 481 484 516 491 446 432 395 391 427 422 422 376 356 320 238 217 314 272 315 268 334 274 355 283 400 518 521 488 536 467 532 441 466 391 303 89 156 164 188 237 179 242 273 336 546 776 776 776 776 776 776 776 776 776 776 776 685 667 636 584 615 572 643 557 633 589 623 648 559 547 636 525 595 543 552 552)
Population mean number of elite cases: 38.61
Count of perfect (error zero) individuals by case: (383 491 482 454 481 484 516 491 446 432 395 391 427 422 422 376 356 320 238 217 314 272 315 268 334 274 355 283 400 518 521 488 536 467 532 441 466 391 303 89 156 164 188 237 179 242 273 336 546 776 776 776 776 776 776 776 776 776 776 776 685 667 636 584 615 572 643 557 633 589 623 648 559 547 636 525 595 543 552 552)
Population mean number of perfect (error zero) cases: 38.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2311.81
Median total errors in population: 108
Error averages by case: (26.849 28.76 25.835 25.902 27.952 28.052 29.136 37.248 29.345 30.35 28.095 32.323 28.739 27.556 28.756 29.139 29.803 30.749 26.617 28.423 27.26 25.404 28.511 28.625 32.64 29.553 27.869 36.265 28.366 27.207 25.855 33.247 29.621 27.353 29.794 36.395 32.057 36.795 29.262 29.245 26.785 28.019 29.119 28.138 26.625 27.196 28.919 31.769 34.668 28.56 28.699 28.8 28.939 29.04 29.179 29.28 29.419 29.52 29.659 29.76 26.598 25.639 27.711 25.898 24.849 25.05 24.906 27.105 26.088 28.085 26.08 26.075 26.251 26.367 28.199 27.357 30.387 27.48 35.442 33.197)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.333
Average program size in population (points): 49.827
Average percent parens in population: 0.206
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.276
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 269514788
--- Timings ---
Current time: 1481303084675 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times integer_stackdepth integer_div exec_shove (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times exec_noop integer_div (boolean_dup_times 3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 493 483 450 492 498 508 499 461 429 419 420 422 421 402 359 350 301 240 204 310 279 320 279 333 268 346 289 409 525 524 496 537 480 529 441 464 386 267 86 150 156 174 224 180 237 274 345 577 775 775 775 775 775 775 775 775 775 775 775 634 623 611 567 593 555 620 548 594 568 599 622 548 521 592 492 565 529 528 519)
Population mean number of elite cases: 38.09
Count of perfect (error zero) individuals by case: (399 493 483 450 492 498 508 499 461 429 419 420 422 421 402 359 350 301 240 204 310 279 320 279 333 268 346 289 409 525 524 496 537 480 529 441 464 386 267 86 150 156 174 224 180 237 274 345 577 775 775 775 775 775 775 775 775 775 775 775 634 623 611 567 593 555 620 548 594 568 599 622 548 521 592 492 565 529 528 519)
Population mean number of perfect (error zero) cases: 38.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2612.026
Median total errors in population: 120
Error averages by case: (29.896 35.803 29.884 29.981 31.013 31.046 32.176 37.255 32.395 35.655 33.184 31.391 33.736 30.855 32.88 31.615 31.679 32.011 29.223 30.663 32.297 31.418 32.523 35.68 33.035 35.494 32.192 42.765 30.586 29.606 28.684 34.142 38.229 33.188 33.956 39.725 33.03 38.702 29.695 31.783 31.81 31.063 34.48 32.763 29.182 30.832 31.929 34.434 36.279 31.182 31.466 31.752 32.036 32.311 32.58 32.851 33.12 33.391 33.66 33.931 31.75 30.789 30.845 31.99 31.972 31.112 30.956 32.177 31.153 32.186 31.133 32.12 31.329 31.448 32.312 31.6 32.401 31.554 33.802 39.274)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.084
Average program size in population (points): 49.714
Average percent parens in population: 0.209
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.287
Error (vector) diversity:			 0.48
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 272613632
--- Timings ---
Current time: 1481303100629 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup boolean_yank integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 57 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 45
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop () boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 57 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 482 483 460 476 488 500 505 448 435 412 410 431 425 418 375 339 295 223 195 301 248 323 257 349 264 345 282 409 520 549 506 555 477 535 455 486 405 307 104 171 174 195 249 211 275 321 323 560 782 782 782 782 782 782 782 782 782 782 782 685 646 615 579 580 546 635 525 600 554 605 613 538 508 592 476 563 492 517 528)
Population mean number of elite cases: 38.34
Count of perfect (error zero) individuals by case: (387 482 483 460 476 488 500 505 448 435 412 410 431 425 418 375 339 295 223 195 301 248 323 257 349 264 345 282 409 520 549 506 555 477 535 455 486 405 307 104 171 174 195 249 211 275 321 323 560 782 782 782 782 782 782 782 782 782 782 782 685 646 615 579 580 546 635 525 600 554 605 613 538 508 592 476 563 492 517 528)
Population mean number of perfect (error zero) cases: 38.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_yankdup) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2811.81
Median total errors in population: 101
Error averages by case: (35.808 39.786 32.846 31.952 32.998 31.132 36.212 34.412 32.654 36.606 32.512 33.247 32.82 33.925 36.401 35.644 35.622 41.8 34.667 34.914 34.268 33.454 32.558 34.797 32.979 34.524 33.119 40.591 36.562 33.856 36.306 39.097 39.203 39.561 38.729 40.35 36.514 41.169 35.075 36.622 32.808 32.109 34.519 36.539 35.437 34.732 38.297 39.1 38.221 35.847 36.103 36.357 36.613 36.856 37.097 37.336 37.577 37.816 38.057 38.296 35.583 34.673 34.765 32.929 32.956 32.101 32.006 32.233 32.203 32.248 32.15 31.336 31.423 31.607 31.441 31.723 31.652 32.774 32.986 38.012)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.915
Average program size in population (points): 49.399
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.274
Error (vector) diversity:			 0.451
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 275737534
--- Timings ---
Current time: 1481303116167 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 57 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 45
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times exec_do*range (exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 boolean_pop in1) boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 3 integer_mod boolean_pop exec_dup boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 57 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 469 514 454 467 474 541 497 446 412 445 396 389 395 426 343 327 286 282 217 314 283 319 288 356 290 371 302 413 531 520 495 525 479 554 458 510 435 311 137 173 173 215 283 225 284 303 361 557 750 750 750 750 750 750 750 750 750 750 750 644 610 586 608 590 549 615 531 595 618 582 643 544 521 575 491 556 558 506 570)
Population mean number of elite cases: 38.37
Count of perfect (error zero) individuals by case: (380 469 514 454 467 474 541 497 446 412 445 396 389 395 426 343 327 286 282 217 314 283 319 288 356 290 371 302 413 531 520 495 525 479 554 458 510 435 311 137 173 173 215 283 225 284 303 361 557 750 750 750 750 750 750 750 750 750 750 750 644 610 586 608 590 549 615 531 595 618 582 643 544 521 575 491 556 558 506 570)
Population mean number of perfect (error zero) cases: 38.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 3110.076
Median total errors in population: 100
Error averages by case: (36.876 35.767 36.8 35.905 38.932 37.006 39.047 38.145 38.265 43.375 38.81 37.225 37.675 39.498 37.484 39.771 38.152 39.361 36.034 37.548 36.246 36.375 36.514 38.568 39.827 39.975 39.64 49.154 37.285 35.643 36.333 47.114 44.28 38.627 40.316 48.396 40.815 41.739 40.5 40.301 37.73 35.924 40.983 36.634 37.073 36.437 38.824 39.708 44.233 39.657 40.883 40.107 41.333 40.557 41.783 41.007 42.233 41.457 42.683 41.907 35.676 35.726 35.841 35.824 35.876 35.988 35.893 36.094 35.994 36.02 36.001 36.057 36.302 37.229 36.166 37.364 36.34 39.477 39.777 45.954)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0N 0 0N)
Average genome size in population (length): 38.526
Average program size in population (points): 48.852
Average percent parens in population: 0.209
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.265
Error (vector) diversity:			 0.44
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 278885540
--- Timings ---
Current time: 1481303131809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_noop integer_div exec_shove (3) 3 (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 488 517 463 490 498 548 505 487 456 467 434 440 441 454 394 376 321 312 199 336 321 354 320 393 308 388 320 455 554 529 510 536 487 545 469 498 399 310 136 179 175 223 273 229 298 342 377 594 779 779 779 779 779 779 779 779 779 779 779 660 652 620 637 586 564 624 555 605 622 607 657 548 522 581 513 568 560 535 593)
Population mean number of elite cases: 39.92
Count of perfect (error zero) individuals by case: (397 488 517 463 490 498 548 505 487 456 467 434 440 441 454 394 376 321 312 199 336 321 354 320 393 308 388 320 455 554 529 510 536 487 545 469 498 399 310 136 179 175 223 273 229 298 342 377 594 779 779 779 779 779 779 779 779 779 779 779 660 652 620 637 586 564 624 555 605 622 607 657 548 522 581 513 568 560 535 593)
Population mean number of perfect (error zero) cases: 39.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 3 3 () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 2177.551
Median total errors in population: 94
Error averages by case: (23.876 25.722 24.755 25.854 26.872 24.911 30.97 26.007 28.115 33.243 29.242 27.927 31.914 26.526 28.924 28.029 29.956 25.928 25.839 26.49 25.262 25.327 25.43 26.534 28.91 31.252 27.829 28.988 28.029 25.417 25.511 29.039 36.27 27.166 30.574 31.745 26.993 30.877 27.202 27.252 25.733 26.978 27.953 27.385 24.352 26.532 27.182 29.495 30.082 26.681 26.82 26.951 27.09 27.221 27.36 27.491 27.63 27.761 27.9 28.031 24.695 23.719 23.796 24.822 24.873 25.972 24.898 25.049 25.019 26.024 27.028 25.066 24.265 24.259 25.164 25.366 25.504 26.48 30.11 32.107)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.824
Average program size in population (points): 49.21
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.271
Error (vector) diversity:			 0.423
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 282117058
--- Timings ---
Current time: 1481303147697 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 463 518 453 461 480 546 492 463 443 474 420 428 412 458 376 319 298 294 207 325 314 341 309 385 307 375 315 443 541 543 506 553 479 547 466 523 416 336 142 184 176 218 272 217 281 307 357 552 757 756 757 756 757 756 757 756 757 756 757 629 592 566 617 569 530 611 502 572 576 554 624 522 493 570 469 539 534 489 560)
Population mean number of elite cases: 38.57
Count of perfect (error zero) individuals by case: (394 463 518 453 461 480 546 492 463 443 474 420 428 412 458 376 319 298 294 207 325 314 341 309 385 307 375 315 443 541 543 506 553 479 547 466 523 416 336 142 184 176 218 272 217 281 307 357 552 757 756 757 756 757 756 757 756 757 756 757 629 592 566 617 569 530 611 502 572 576 554 624 522 493 570 469 539 534 489 560)
Population mean number of perfect (error zero) cases: 38.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction 5} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction 5} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (integer_dup_times 3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while (boolean_pop) integer_mod exec_while (integer_fromboolean) in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while (integer_shove integer_pop exec_noop) integer_mod integer_div integer_yank integer_mod 5 5 integer_div integer_min) () ()))
Partial simplification: (integer_dup_times 3 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () exec_dup_times () boolean_or integer_stackdepth boolean_pop 5 boolean_dup exec_dup_times () boolean_swap exec_dup_times (boolean_rot 3 exec_while boolean_pop integer_mod exec_while integer_fromboolean in1) exec_if (boolean_dup_items) (boolean_or exec_s (exec_do*while integer_shove integer_pop exec_noop integer_mod integer_div integer_yank integer_mod 5 5 integer_div integer_min)))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 1 2 2 2 2 2 2 2 0 1 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 3249.845
Median total errors in population: 98N
Error averages by case: (36.888 36.813 36.854 38.974 37.04 38.085 43.007 41.119 41.337 49.261 42.01 41.751 38.541 40.642 44.233 40.571 44.831 38.422 38.944 39.742 37.274 37.369 38.538 41.613 41.64 43.035 39.735 47.116 40.428 39.618 40.1 44.164 41.444 42.64 41.14 45.652 42.155 44.092 39.239 40.932 38.778 45.97 41.043 40.99 39.22 40.709 40.312 44.03 47.701 40.219 40.561 40.579 40.951 40.939 41.341 41.299 41.731 41.659 42.121 42.019 36.756 36.829 36.949 36.921 36.983 38.136 38.04 38.253 37.191 37.266 37.221 38.323 38.386 39.443 40.367 40.472 41.785 42.476 43.965 44.922)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.844
Average program size in population (points): 49.136
Average percent parens in population: 0.206
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.279
Error (vector) diversity:			 0.44
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 285292183
--- Timings ---
Current time: 1481303163786 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times () integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth () integer_div exec_shove (boolean_dup_times 3) 3 () in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 492 523 460 491 498 543 500 469 443 476 415 446 431 451 398 353 346 278 229 307 282 340 293 372 276 370 303 419 540 533 519 570 502 571 474 520 418 340 127 172 173 193 265 204 257 281 345 536 759 759 759 759 759 759 759 759 759 759 759 634 617 581 599 556 531 602 523 560 578 563 613 511 482 560 487 541 537 503 555)
Population mean number of elite cases: 38.65
Count of perfect (error zero) individuals by case: (424 492 523 460 491 498 543 500 469 443 476 415 446 431 451 398 353 346 278 229 307 282 340 293 372 276 370 303 419 540 533 519 570 502 571 474 520 418 340 127 172 173 193 265 204 257 281 345 536 759 759 759 759 759 759 759 759 759 759 759 634 617 581 599 556 531 602 523 560 578 563 613 511 482 560 487 541 537 503 555)
Population mean number of perfect (error zero) cases: 38.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (3 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (3 3 boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 2 2 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 33
Mean: 0.4125
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 3119.82
Median total errors in population: 102
Error averages by case: (34.834 34.75 35.807 35.937 36.99 37.055 45.058 38.185 36.294 44.435 37.993 38.233 40.563 38.757 41.964 39.791 42.789 37.183 38.417 39.25 35.241 36.36 36.467 38.59 38.751 39.182 41.963 46.816 38.045 37.151 37.571 41.427 39.58 39.149 39.977 45.122 41.311 41.887 41.11 41.978 36.769 36.914 37.134 38.901 37.916 37.883 40.998 39.088 45.392 41.425 41.636 41.845 42.056 42.265 42.476 42.685 42.896 43.105 43.316 43.525 35.668 33.725 34.776 35.91 34.93 35.05 36.926 36.191 37.151 36.161 37.125 38.129 37.3 35.391 36.276 34.486 37.737 35.541 40.118 41.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.509
Average program size in population (points): 50.07
Average percent parens in population: 0.207
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.29
Error (vector) diversity:			 0.466
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 288468540
--- Timings ---
Current time: 1481303179732 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 58
Lexicase best total error: 94
Lexicase best mean error: 1.175
Lexicase best size: 51
Percent parens: 0.176
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_stackdepth exec_dup_times (exec_noop) integer_div exec_shove (boolean_dup_times 3) 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times integer_stackdepth exec_dup_times exec_noop integer_div exec_shove (boolean_dup_times 3) 3 exec_while boolean_pop in1 boolean_yank exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop in1 boolean_yank exec_dup_times () boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 62 1 1 2 2 2 2 2 2 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 58
Zero cases best number of zero cases: 58
Zero cases best total error: 94
Zero cases best mean error: 1.175
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 493 531 467 489 492 564 492 473 468 470 415 412 395 436 354 332 312 293 199 329 343 351 311 375 317 396 344 453 554 548 523 555 496 535 467 485 391 328 141 170 170 197 289 223 287 317 407 563 775 775 775 775 775 775 775 775 775 775 775 648 632 583 622 586 555 620 542 592 613 582 665 551 525 587 497 563 579 520 602)
Population mean number of elite cases: 39.55
Count of perfect (error zero) individuals by case: (405 493 531 467 489 492 564 492 473 468 470 415 412 395 436 354 332 312 293 199 329 343 351 311 375 317 396 344 453 554 548 523 555 496 535 467 485 391 328 141 170 170 197 289 223 287 317 407 563 775 775 775 775 775 775 775 775 775 775 775 648 632 583 622 586 555 620 542 592 613 582 665 551 525 587 497 563 579 520 602)
Population mean number of perfect (error zero) cases: 39.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while})
Best program: (integer_dup_times integer_dup_times integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (integer_mult 3 exec_while (boolean_pop) exec_while (boolean_pop) in1) (boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup) (exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop) in1 boolean_yankdup integer_mod integer_div in1 integer_mod integer_yank exec_do*count (exec_while ()))
Partial simplification: (integer_dup_times 2 5 exec_shove 5 exec_s (3 exec_while exec_while in1) (exec_dup_times () integer_mod integer_mod) (integer_stackdepth integer_stackdepth) in1 integer_mod integer_div integer_yank exec_do*count ())
Errors: [1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0]
Total: 25
Mean: 0.3125
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 2994.212
Median total errors in population: 94
Error averages by case: (34.858 34.752 35.774 35.928 36.02 36.078 42.107 37.257 34.409 38.533 36.829 34.959 34.932 35.903 39.963 37.847 40.185 37.059 39.76 39.624 35.232 36.307 37.539 39.681 34.82 39.267 36.275 45.888 38.088 37.471 35.794 43.635 37.644 43.181 38.859 42.986 39.878 43.801 36.575 36.703 36.776 36.08 36.336 37.949 36.922 35.108 38.511 38.602 45.787 36.131 36.311 36.491 36.671 36.851 37.031 37.211 37.391 37.571 37.751 37.931 35.653 35.705 34.838 34.924 35.885 36.032 34.98 35.136 37.102 37.123 36.157 37.21 37.311 36.442 35.332 35.539 35.777 35.6 36.976 38.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.029
Average program size in population (points): 49.282
Average percent parens in population: 0.206
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.259
Error (vector) diversity:			 0.428
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 291663066
--- Timings ---
Current time: 1481303195499 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_add boolean_dup_times 1 5 exec_shove 5 exec_s (3 in1) integer_mod () in1 integer_mod integer_yank exec_do*count boolean_pop in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 60
Lexicase best total error: 20
Lexicase best mean error: 0.25
Lexicase best size: 53
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (1 5 integer_rot exec_shove 5 exec_s (boolean_rot 3 in1) (integer_fromboolean integer_mod) () in1 integer_mod integer_yank exec_do*count boolean_pop in1 boolean_yank integer_mod boolean_or exec_noop integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 60
Zero cases best number of zero cases: 60
Zero cases best total error: 20
Zero cases best mean error: 0.25
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 532 493 458 470 533 516 468 473 499 443 419 434 462 409 383 349 371 272 206 356 347 384 327 416 339 417 345 459 540 538 518 562 492 531 460 493 408 331 156 203 182 199 262 226 280 342 404 570 764 764 763 764 764 764 763 764 764 764 763 627 649 582 636 612 527 655 522 563 608 569 659 558 493 606 489 541 575 510 590)
Population mean number of elite cases: 39.65
Count of perfect (error zero) individuals by case: (406 532 493 458 470 533 516 468 473 499 443 419 434 462 409 383 349 371 272 206 356 347 384 327 416 339 417 345 459 540 538 518 562 492 531 460 493 408 331 156 203 182 199 262 226 280 342 404 570 764 764 763 764 764 764 763 764 764 764 763 627 649 582 636 612 527 655 522 563 608 569 659 558 493 606 489 541 575 510 590)
Population mean number of perfect (error zero) cases: 39.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (1 5 exec_shove 5 exec_s (3 in1) (boolean_invert_second_then_and integer_mod) () in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod boolean_or integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 20
Mean: 0.25
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 2312.599
Median total errors in population: 102
Error averages by case: (24.891 24.779 24.886 24.043 26.159 24.152 30.313 29.373 26.522 32.575 27.147 25.832 24.077 26.94 30.093 27.268 29.446 26.697 26.129 27.307 25.262 25.4 25.617 27.734 28.863 30.288 25.102 36.94 28.68 26.881 28.59 32.29 30.998 31.302 28.81 35.163 35.282 36.467 33.302 33.716 24.795 27.107 28.474 28.767 26.165 25.643 27.18 33.756 40.675 33.262 33.652 34.042 34.431 34.823 35.213 35.604 35.993 36.383 36.773 37.164 23.729 23.779 24.878 23.979 24.979 24.155 24.067 24.328 25.303 25.289 26.286 25.329 26.471 26.598 27.55 28.691 26.939 26.768 26.004 32.259)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.529
Average program size in population (points): 48.639
Average percent parens in population: 0.204
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.272
Error (vector) diversity:			 0.419
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 294854095
--- Timings ---
Current time: 1481303210907 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_mod boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (1 5 exec_shove (5 boolean_swap) exec_s (3 in1) (integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod exec_noop integer_stackdepth in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 60
Lexicase best total error: 20
Lexicase best mean error: 0.25
Lexicase best size: 53
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_mod boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (boolean_dup_times 1 5 exec_shove 5 exec_s (3 in1) (boolean_yank integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod boolean_or boolean_pop integer_stackdepth in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 60
Zero cases best number of zero cases: 60
Zero cases best total error: 20
Zero cases best mean error: 0.25
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 539 490 421 472 541 515 433 486 522 483 408 455 489 447 366 376 422 328 283 358 326 374 318 400 317 416 331 455 503 533 494 543 467 503 441 461 393 337 165 251 236 263 307 267 300 397 438 575 749 749 750 749 749 749 750 749 749 749 750 623 677 564 649 627 551 636 552 560 652 560 663 602 524 606 538 544 637 522 620)
Population mean number of elite cases: 40.23
Count of perfect (error zero) individuals by case: (432 539 490 421 472 541 515 433 486 522 483 408 455 489 447 366 376 422 328 283 358 326 374 318 400 317 416 331 455 503 533 494 543 467 503 441 461 393 337 165 251 236 263 307 267 300 397 438 575 749 749 750 749 749 749 750 749 749 749 750 623 677 564 649 627 551 636 552 560 652 560 663 602 524 606 538 544 637 522 620)
Population mean number of perfect (error zero) cases: 40.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (boolean_dup_times 1 5 exec_shove 5 exec_s (boolean_rot 3 in1) integer_mod () in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod boolean_or integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 20
Mean: 0.25
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 2607.217
Median total errors in population: 89
Error averages by case: (31.817 29.721 28.824 28.977 29.053 29.055 34.139 31.211 30.325 35.494 29.993 29.697 29.54 28.513 35.383 34.026 31.968 29.899 29.643 31.929 31.144 30.307 30.482 31.692 33.819 31.095 29.893 37.002 31.741 30.832 33.919 41.035 35.885 36.73 36.142 39.361 36.321 37.876 36.047 36.056 29.601 29.84 30.916 32.224 30.623 31.014 32.001 35.778 40.699 34.276 34.562 34.845 35.133 35.416 35.702 35.985 36.273 36.556 36.842 37.125 30.688 30.681 29.856 30.876 29.899 31.066 30.003 30.215 30.235 30.145 30.272 30.288 30.301 30.446 30.387 30.557 30.869 30.493 31.962 35.981)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.236
Average program size in population (points): 49.272
Average percent parens in population: 0.201
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.273
Error (vector) diversity:			 0.43
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 298248452
--- Timings ---
Current time: 1481303226474 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (boolean_dup_times 1 5 exec_shove (5 boolean_swap) exec_s (3 in1) integer_mod exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 60
Lexicase best total error: 20
Lexicase best mean error: 0.25
Lexicase best size: 53
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_add 1 5 integer_rot exec_shove 5 exec_s (3 exec_while boolean_pop in1) (boolean_invert_second_then_and integer_fromboolean integer_mod) () in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 60
Zero cases best number of zero cases: 60
Zero cases best total error: 20
Zero cases best mean error: 0.25
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 531 479 421 474 534 510 437 481 513 481 405 454 488 418 360 370 430 304 306 371 335 400 325 413 325 426 327 478 527 562 506 566 478 499 457 464 407 330 166 254 249 276 310 254 295 383 440 575 750 750 750 750 750 750 750 750 750 750 750 623 684 561 646 635 572 628 546 554 650 556 651 603 543 594 530 539 624 512 607)
Population mean number of elite cases: 40.33
Count of perfect (error zero) individuals by case: (432 531 479 421 474 534 510 437 481 513 481 405 454 488 418 360 370 430 304 306 371 335 400 325 413 325 426 327 478 527 562 506 566 478 499 457 464 407 330 166 254 249 276 310 254 295 383 440 575 750 750 750 750 750 750 750 750 750 750 750 623 684 561 646 635 572 628 546 554 650 556 651 603 543 594 530 539 624 512 607)
Population mean number of perfect (error zero) cases: 40.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_add boolean_dup_times 1 5 exec_shove 5 exec_s (3 exec_while boolean_pop in1) (integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod integer_stackdepth in1 boolean_yank 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 20
Mean: 0.25
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 2119.245
Median total errors in population: 173/2
Error averages by case: (23.822 23.752 23.855 24.028 25.07 26.09 30.243 25.359 23.383 32.346 24.601 24.908 24.813 24.612 27.201 25.124 26.067 23.007 23.039 23.693 25.137 25.343 26.388 26.808 27.682 26.0 25.696 26.991 23.298 23.029 23.396 27.048 32.037 27.146 27.112 30.283 28.533 30.344 26.403 28.493 25.6 23.858 24.991 23.659 23.046 24.675 25.316 29.684 30.48 27.858 28.324 28.758 29.224 29.658 30.124 30.558 31.024 31.458 31.924 32.358 25.766 24.721 24.926 24.94 24.888 25.05 25.078 25.208 25.291 26.161 25.309 26.307 26.373 25.386 24.54 25.546 25.812 24.561 25.697 32.928)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.534
Average program size in population (points): 49.499
Average percent parens in population: 0.200
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.265
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 301639567
--- Timings ---
Current time: 1481303241953 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (1 5 exec_shove 5 exec_s (3 in1) integer_mod exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod boolean_pop integer_stackdepth in1 3 boolean_empty integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 60
Lexicase best total error: 20
Lexicase best mean error: 0.25
Lexicase best size: 53
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (1 5 exec_shove 5 exec_s (3 exec_while () in1) (boolean_invert_second_then_and integer_fromboolean integer_mod) exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 integer_mod integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 60
Zero cases best number of zero cases: 60
Zero cases best total error: 20
Zero cases best mean error: 0.25
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (472 578 508 478 517 567 539 485 505 550 478 450 477 514 444 399 388 416 308 343 402 358 417 329 445 352 456 356 520 547 589 530 609 511 537 493 501 437 357 199 257 249 272 312 276 314 346 458 596 750 750 750 750 750 750 750 750 750 750 750 602 713 554 670 657 591 674 531 602 670 552 693 622 572 643 518 588 648 500 653)
Population mean number of elite cases: 41.94
Count of perfect (error zero) individuals by case: (472 578 508 478 517 567 539 485 505 550 478 450 477 514 444 399 388 416 308 343 402 358 417 329 445 352 456 356 520 547 589 530 609 511 537 493 501 437 357 199 257 249 272 312 276 314 346 458 596 750 750 750 750 750 750 750 750 750 750 750 602 713 554 670 657 591 674 531 602 670 552 693 622 572 643 518 588 648 500 653)
Population mean number of perfect (error zero) cases: 41.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (1 5 exec_shove 5 exec_s (3 in1) integer_mod exec_noop in1 integer_mod integer_yank exec_do*count boolean_pop in1 boolean_yank integer_mod integer_stackdepth in1 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 20
Mean: 0.25
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 2736.65
Median total errors in population: 79
Error averages by case: (31.727 31.607 32.719 31.803 32.85 32.854 36.004 33.018 34.114 37.136 33.729 33.45 34.317 35.123 35.86 38.209 37.239 33.047 34.467 32.157 31.034 31.22 32.27 32.583 32.462 33.932 35.572 38.534 32.358 31.602 32.857 34.223 35.854 35.698 33.206 36.458 38.299 38.181 33.819 36.935 32.463 33.638 33.894 34.908 32.652 32.989 35.513 36.127 39.812 37.145 37.327 37.679 37.876 38.069 38.266 38.459 38.656 38.849 39.046 39.239 30.651 30.574 30.78 30.775 30.734 30.889 30.818 31.057 31.035 30.953 31.11 31.963 32.101 32.185 33.105 32.335 33.516 32.343 32.948 35.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.01
Average program size in population (points): 48.857
Average percent parens in population: 0.199
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.235
Error (vector) diversity:			 0.371
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 304963704
--- Timings ---
Current time: 1481303257170 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while () in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 1 2 1 1 1 1 1 1 1 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 60
Lexicase best total error: 30
Lexicase best mean error: 0.375
Lexicase best size: 54
Percent parens: 0.185
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 () in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 boolean_pop in1 boolean_yank exec_dup_times () integer_mod boolean_pop exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod boolean_pop exec_dup () boolean_yank integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 1 2 1 1 1 1 1 1 1 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 60
Zero cases best number of zero cases: 60
Zero cases best total error: 30
Zero cases best mean error: 0.375
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (455 535 497 450 487 540 517 448 480 513 468 421 450 482 432 381 386 422 319 363 374 327 390 307 413 327 419 322 452 491 535 466 555 447 468 431 467 382 334 171 260 261 276 316 280 328 376 475 595 758 758 759 758 758 758 759 758 758 758 759 598 688 543 659 651 588 661 538 599 667 536 676 628 571 628 517 571 639 490 632)
Population mean number of elite cases: 40.71
Count of perfect (error zero) individuals by case: (455 535 497 450 487 540 517 448 480 513 468 421 450 482 432 381 386 422 319 363 374 327 390 307 413 327 419 322 452 491 535 466 555 447 468 431 467 382 334 171 260 261 276 316 280 328 376 475 595 758 758 759 758 758 758 759 758 758 758 759 598 688 543 659 651 588 661 538 599 667 536 676 628 571 628 517 571 639 490 632)
Population mean number of perfect (error zero) cases: 40.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 1} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_add boolean_dup_times 1 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_pop) in1) (boolean_yank boolean_invert_second_then_and integer_fromboolean integer_mod) (exec_noop) in1 integer_mod integer_yank exec_do*count (boolean_pop) in1 boolean_yank integer_mod boolean_or exec_noop boolean_pop integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (1 5 exec_shove (5 boolean_swap) exec_s 3 (boolean_invert_second_then_and) () in1 integer_mod integer_yank exec_do*count boolean_pop in1 boolean_yank integer_mod integer_stackdepth in1 boolean_yank 3 exec_while boolean_pop integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 20
Mean: 0.25
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 2629.003
Median total errors in population: 163/2
Error averages by case: (32.794 31.8 31.86 32.002 33.037 32.216 34.292 31.427 31.432 34.617 31.99 30.858 30.831 32.796 32.642 33.792 33.948 32.345 31.017 31.55 31.117 32.323 31.388 30.778 31.773 31.166 30.975 34.516 31.923 29.919 30.335 35.655 35.201 34.296 32.885 34.588 32.646 36.17 33.272 35.573 32.583 30.895 30.289 31.939 30.108 30.645 32.255 32.054 37.096 34.844 35.1 35.324 35.579 35.803 36.059 36.283 36.539 36.763 37.019 37.243 31.727 31.683 31.876 31.861 31.847 32.003 31.979 32.127 33.176 32.023 32.257 31.193 32.242 31.401 31.383 31.493 31.856 31.598 33.138 33.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.361
Average program size in population (points): 49.369
Average percent parens in population: 0.201
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.234
Error (vector) diversity:			 0.404
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 308376818
--- Timings ---
Current time: 1481303272875 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 integer_rot exec_shove 5 exec_s (boolean_rot 3 in1) (boolean_xor integer_mod) exec_noop in1 integer_mod 3 exec_while boolean_rot exec_dup_times integer_mod exec_when integer_stackdepth integer_stackdepth in1 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times 2 5 exec_shove (5) exec_s (3 () in1) (boolean_yank boolean_invert_second_then_and integer_mod) () in1 3 exec_dup_times integer_mod exec_when integer_stackdepth integer_stackdepth in1 3 boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 550 516 465 530 536 539 467 522 519 483 446 485 478 461 411 423 421 349 403 447 383 459 361 483 381 495 381 538 546 607 528 573 494 527 493 509 447 385 250 289 288 295 352 303 333 394 493 609 746 746 747 746 746 746 747 746 746 746 747 596 715 566 663 661 606 660 583 595 685 570 689 640 597 638 571 596 670 530 652)
Population mean number of elite cases: 42.80
Count of perfect (error zero) individuals by case: (457 550 516 465 530 536 539 467 522 519 483 446 485 478 461 411 423 421 349 403 447 383 459 361 483 381 495 381 538 546 607 528 573 494 527 493 509 447 385 250 289 288 295 352 303 333 394 493 609 746 746 747 746 746 746 747 746 746 746 747 596 715 566 663 661 606 660 583 595 685 570 689 640 597 638 571 596 670 530 652)
Population mean number of perfect (error zero) cases: 42.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items in1) integer_mod () in1 3 exec_while boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 1623.56
Median total errors in population: 69
Error averages by case: (17.726 17.644 17.743 17.81 19.852 17.888 18.992 18.081 19.101 21.178 19.655 20.566 20.309 20.423 23.452 23.495 20.961 19.912 19.462 19.937 17.966 18.179 18.221 19.449 18.507 20.661 21.673 22.331 20.721 19.328 19.723 23.877 20.614 20.541 23.504 27.007 22.59 23.023 20.637 21.736 18.501 19.753 21.871 19.219 21.658 19.861 22.915 22.812 24.32 21.293 21.492 21.655 21.853 22.013 22.212 22.375 22.573 22.733 22.932 23.095 17.686 17.59 17.771 17.769 17.757 18.874 17.835 17.99 18.992 17.936 18.065 17.965 18.114 19.16 19.164 19.367 19.316 19.207 19.611 23.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.527
Average program size in population (points): 49.602
Average percent parens in population: 0.202
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.218
Error (vector) diversity:			 0.376
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 311818131
--- Timings ---
Current time: 1481303288032 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times 2 5 exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod 3 boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_pop boolean_or integer_stackdepth in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod () in1 integer_mod 3 boolean_pop exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (420 497 557 550 471 497 585 552 462 475 533 518 435 446 520 492 376 396 421 465 441 413 464 378 480 396 499 401 524 543 593 533 583 508 548 504 523 479 430 289 306 304 313 346 311 342 383 460 563 694 692 694 692 694 692 694 692 694 692 694 558 745 639 680 689 649 567 635 523 694 645 710 671 636 553 625 518 681 615 672)
Population mean number of elite cases: 42.85
Count of perfect (error zero) individuals by case: (420 497 557 550 471 497 585 552 462 475 533 518 435 446 520 492 376 396 421 465 441 413 464 378 480 396 499 401 524 543 593 533 583 508 548 504 523 479 430 289 306 304 313 346 311 342 383 460 563 694 692 694 692 694 692 694 692 694 692 694 558 745 639 680 689 649 567 635 523 694 645 710 671 636 553 625 518 681 615 672)
Population mean number of perfect (error zero) cases: 42.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (boolean_dup_times 2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items in1) (boolean_invert_second_then_and integer_mod) () in1 integer_mod integer_mod 3 exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3606.487
Median total errors in population: 61
Error averages by case: (42.76 43.715 43.691 43.738 45.89 43.888 43.857 43.921 44.061 49.085 45.261 45.335 46.153 46.259 46.096 48.072 46.713 43.809 43.331 43.98 43.971 44.112 44.172 44.392 44.316 45.628 46.544 48.898 44.328 43.493 43.851 47.882 44.886 45.37 45.419 48.022 45.034 44.933 46.289 46.366 44.389 44.528 45.734 45.339 43.677 44.372 45.476 45.918 47.825 45.615 45.729 45.825 45.939 46.035 46.149 46.245 46.359 46.455 46.569 46.665 43.681 44.504 43.674 43.74 43.682 43.765 43.901 43.883 43.998 43.829 43.95 43.879 43.918 44.02 44.157 44.101 44.235 44.1 46.377 46.729)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.662
Average program size in population (points): 50.608
Average percent parens in population: 0.197
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 124
Genome diversity (% unique Plush genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.201
Error (vector) diversity:			 0.339
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 315285904
--- Timings ---
Current time: 1481303303265 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times 2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod 3 exec_while boolean_rot exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 3 3 exec_while boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 integer_rot exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 boolean_yank 3 exec_while boolean_pop boolean_empty integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 475 546 547 463 476 573 543 470 459 536 520 437 439 523 500 391 405 442 500 455 431 473 401 479 426 498 436 507 531 560 522 559 511 510 501 498 482 431 330 348 351 362 393 377 394 444 497 573 683 683 682 683 683 683 682 683 683 683 682 529 755 629 663 685 650 541 637 509 689 636 690 673 637 534 618 498 676 614 654)
Population mean number of elite cases: 42.97
Count of perfect (error zero) individuals by case: (415 475 546 547 463 476 573 543 470 459 536 520 437 439 523 500 391 405 442 500 455 431 473 401 479 426 498 436 507 531 560 522 559 511 510 501 498 482 431 330 348 351 362 393 377 394 444 497 573 683 683 682 683 683 683 682 683 683 683 682 529 755 629 663 685 650 541 637 509 689 636 690 673 637 534 618 498 676 614 654)
Population mean number of perfect (error zero) cases: 42.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod 3 exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 3 3 () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3747.669
Median total errors in population: 46
Error averages by case: (43.77 43.764 43.748 43.802 44.938 45.061 46.027 47.064 44.2 48.254 44.249 44.214 46.225 44.193 43.898 47.019 46.204 43.773 43.503 44.891 44.921 45.093 46.146 48.391 45.327 47.593 45.526 48.047 46.289 44.592 45.977 48.904 47.632 46.058 45.643 49.117 47.656 47.533 50.379 52.423 44.282 46.511 45.521 43.888 44.623 45.04 47.345 47.044 51.38 50.964 51.1 51.234 51.37 51.505 51.642 51.776 51.912 52.042 52.18 52.314 44.73 45.534 44.715 44.816 44.731 44.828 45.038 44.954 45.095 44.896 46.056 46.043 47.054 47.116 48.278 47.226 46.466 46.162 45.399 52.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.105
Average program size in population (points): 51.146
Average percent parens in population: 0.198
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 130
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.204
Error (vector) diversity:			 0.333
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 318971235
--- Timings ---
Current time: 1481303318469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) (boolean_yank integer_mod) () in1 integer_mod 3 boolean_pop exec_dup_times integer_mod exec_when integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (boolean_dup_times 2 5 exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod boolean_yank integer_mod integer_mod integer_stackdepth boolean_pop boolean_or integer_stackdepth boolean_pop in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 502 560 557 496 497 584 549 485 493 553 532 483 472 544 517 427 428 443 476 428 393 428 372 450 390 466 411 473 513 539 508 540 472 478 477 475 451 392 288 316 313 315 339 328 365 414 492 572 696 693 696 693 696 693 696 693 696 693 696 532 706 624 644 655 622 539 621 506 662 625 660 643 615 526 623 495 650 607 630)
Population mean number of elite cases: 42.26
Count of perfect (error zero) individuals by case: (442 502 560 557 496 497 584 549 485 493 553 532 483 472 544 517 427 428 443 476 428 393 428 372 450 390 466 411 473 513 539 508 540 472 478 477 475 451 392 288 316 313 315 339 328 365 414 492 572 696 693 696 693 696 693 696 693 696 693 696 532 706 624 644 655 622 539 621 506 662 625 660 643 615 526 623 495 650 607 630)
Population mean number of perfect (error zero) cases: 42.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 in1) integer_mod exec_noop in1 3 exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 boolean_yank 3 boolean_pop boolean_empty integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3516.863
Median total errors in population: 53
Error averages by case: (41.737 40.767 41.774 41.862 41.065 42.127 43.131 44.164 42.346 43.396 41.514 44.414 42.469 42.532 44.564 44.22 44.487 42.79 41.777 42.254 40.948 42.131 42.251 44.466 42.401 42.593 41.781 47.879 43.754 41.644 42.371 42.316 44.189 43.845 44.005 46.558 46.781 48.404 46.671 47.848 41.445 43.691 42.881 45.168 42.045 42.039 43.855 47.874 51.72 47.413 47.599 47.772 47.959 48.133 48.319 48.492 48.679 48.853 49.039 49.212 40.742 40.603 40.714 40.973 41.85 42.894 42.004 41.965 41.075 42.032 42.062 42.102 43.156 44.24 44.334 43.277 43.483 42.382 42.583 45.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.386
Average program size in population (points): 50.18
Average percent parens in population: 0.197
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.21
Error (vector) diversity:			 0.345
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 322514164
--- Timings ---
Current time: 1481303333412 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 integer_rot exec_shove (5) exec_s (3 in1) (boolean_xor integer_mod) exec_noop in1 3 boolean_pop boolean_rot boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 3 exec_while boolean_pop exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 496 559 556 473 488 584 553 472 485 548 522 447 449 530 494 397 409 446 488 455 428 459 406 463 420 490 432 516 528 552 518 539 502 498 472 466 459 409 312 309 313 318 350 327 343 386 461 550 657 656 657 656 657 656 657 656 657 656 657 530 740 624 681 669 634 538 619 503 696 628 694 666 630 527 610 500 687 603 674)
Population mean number of elite cases: 42.17
Count of perfect (error zero) individuals by case: (417 496 559 556 473 488 584 553 472 485 548 522 447 449 530 494 397 409 446 488 455 428 459 406 463 420 490 432 516 528 552 518 539 502 498 472 466 459 409 312 309 313 318 350 327 343 386 461 550 657 656 657 656 657 656 657 656 657 656 657 530 740 624 681 669 634 538 619 503 696 628 694 666 630 527 610 500 687 603 674)
Population mean number of perfect (error zero) cases: 42.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times boolean_dup_times 2 5 exec_shove (5) exec_s (3 in1) (integer_mod) exec_noop in1 integer_mod integer_mod exec_while boolean_yank integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3378.603
Median total errors in population: 46
Error averages by case: (38.826 39.795 39.78 39.838 40.032 40.102 41.014 42.026 42.171 42.326 42.333 41.308 42.283 41.384 43.069 45.187 42.85 41.787 41.524 41.999 39.924 40.091 40.243 42.366 42.315 44.531 41.554 45.565 42.063 41.594 43.188 42.18 42.699 44.103 42.232 46.303 44.064 44.117 43.104 43.379 40.426 42.579 43.78 42.244 42.908 42.088 43.107 46.0 47.273 43.274 43.445 43.604 43.775 43.934 44.105 44.264 44.435 44.594 44.765 44.925 38.739 39.547 39.708 39.759 39.752 39.878 39.959 39.945 40.04 40.94 40.002 39.966 40.027 42.117 42.178 42.162 42.262 42.238 42.225 46.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.67
Average program size in population (points): 50.38
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 122
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.189
Error (vector) diversity:			 0.325
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 326125661
--- Timings ---
Current time: 1481303348541 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (boolean_dup_times 2 5 integer_rot exec_shove 5 exec_s (3 exec_while in1) (boolean_yank boolean_xor) exec_noop in1 integer_mod 3 exec_while boolean_rot exec_dup_times integer_mod integer_stackdepth boolean_pop integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (boolean_dup_times 2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod 3 boolean_pop exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 494 541 544 468 486 568 544 479 483 521 521 451 455 520 493 380 406 416 468 440 424 447 392 456 416 476 421 498 530 551 528 531 489 486 497 468 459 385 302 308 308 309 339 318 333 396 481 574 685 684 685 683 685 683 685 683 686 683 685 535 706 592 648 661 620 541 587 500 664 602 669 640 618 537 582 503 666 584 649)
Population mean number of elite cases: 41.86
Count of perfect (error zero) individuals by case: (426 494 541 544 468 486 568 544 479 483 521 521 451 455 520 493 380 406 416 468 440 424 447 392 456 416 476 421 498 530 551 528 531 489 486 497 468 459 385 302 308 308 309 339 318 333 396 481 574 685 684 685 683 685 683 685 683 686 683 685 535 706 592 648 661 620 541 587 500 664 602 669 640 618 537 582 503 666 584 649)
Population mean number of perfect (error zero) cases: 41.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod () in1 3 boolean_rot exec_dup_times integer_mod exec_when integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3963.044
Median total errors in population: 57
Error averages by case: (48.744 47.735 49.761 48.797 48.011 48.077 49.014 49.088 48.253 48.42 50.527 50.362 48.449 49.733 50.442 52.117 50.347 48.058 48.9 48.547 48.918 48.078 48.274 48.435 48.555 51.548 50.636 49.295 49.996 47.826 50.117 48.892 48.693 50.04 48.911 51.04 50.192 49.467 50.699 50.657 48.41 48.638 48.912 48.281 48.315 49.431 50.805 51.59 52.22 50.077 50.404 50.378 50.737 50.668 51.041 50.938 51.34 51.205 51.639 51.478 48.713 48.566 49.745 48.809 47.795 47.936 48.001 49.059 48.104 51.049 49.101 49.032 48.228 48.237 48.247 49.414 48.444 49.297 49.409 55.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.175
Average program size in population (points): 49.774
Average percent parens in population: 0.194
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.196
Error (vector) diversity:			 0.323
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 329674318
--- Timings ---
Current time: 1481303363631 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 integer_rot exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) (boolean_yank boolean_xor integer_mod) exec_noop in1 3 exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 521 567 570 499 510 599 570 494 510 552 546 478 481 542 522 412 433 451 510 454 400 455 365 471 392 492 402 513 520 583 527 562 500 506 493 488 466 415 305 332 332 337 374 333 344 391 477 562 674 674 674 674 674 674 674 674 674 674 674 553 747 625 679 691 655 566 625 534 697 641 706 684 650 564 618 535 699 625 687)
Population mean number of elite cases: 43.19
Count of perfect (error zero) individuals by case: (440 521 567 570 499 510 599 570 494 510 552 546 478 481 542 522 412 433 451 510 454 400 455 365 471 392 492 402 513 520 583 527 562 500 506 493 488 466 415 305 332 332 337 374 333 344 391 477 562 674 674 674 674 674 674 674 674 674 674 674 553 747 625 679 691 655 566 625 534 697 641 706 684 650 564 618 535 699 625 687)
Population mean number of perfect (error zero) cases: 43.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while () in1) (boolean_invert_second_then_and integer_mod) exec_noop in1 integer_mod 3 boolean_rot exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3844.613
Median total errors in population: 45
Error averages by case: (46.747 45.705 45.71 45.747 45.881 45.959 46.817 46.939 46.068 46.123 47.347 47.026 46.018 47.104 47.969 51.806 47.958 46.308 48.167 47.496 46.925 46.123 47.13 47.397 47.245 49.41 47.191 46.851 47.092 47.202 46.559 46.783 46.433 46.714 46.966 51.23 50.677 50.697 50.514 50.704 44.366 46.416 46.55 47.52 47.483 47.736 50.219 53.024 53.198 50.364 50.471 50.514 50.621 50.664 50.771 50.814 50.921 50.964 51.071 51.114 46.727 48.532 47.696 47.766 45.707 45.82 45.953 46.883 47.017 47.906 47.948 47.883 46.957 47.007 47.076 48.071 47.236 48.047 48.225 52.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.357
Average program size in population (points): 49.9
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 101
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.183
Error (vector) diversity:			 0.292
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 333213790
--- Timings ---
Current time: 1481303378972 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items in1) (boolean_yank integer_mod) () in1 3 boolean_pop exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 65
Lexicase best total error: 15
Lexicase best mean error: 0.1875
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod () in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 exec_while boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 65
Zero cases best number of zero cases: 65
Zero cases best total error: 15
Zero cases best mean error: 0.1875
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 517 585 585 501 515 603 585 494 507 570 560 465 463 545 535 393 409 455 479 494 442 497 410 505 432 524 442 544 549 599 548 580 515 514 528 508 472 430 331 333 336 342 367 340 359 420 509 584 698 696 698 696 698 696 698 696 698 696 698 545 723 623 648 650 608 518 608 487 658 628 682 636 607 518 597 478 667 619 655)
Population mean number of elite cases: 43.48
Count of perfect (error zero) individuals by case: (437 517 585 585 501 515 603 585 494 507 570 560 465 463 545 535 393 409 455 479 494 442 497 410 505 432 524 442 544 549 599 548 580 515 514 528 508 472 430 331 333 336 342 367 340 359 420 509 584 698 696 698 696 698 696 698 696 698 696 698 545 723 623 648 650 608 518 608 487 658 628 682 636 607 518 597 478 667 619 655)
Population mean number of perfect (error zero) cases: 43.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items in1) (boolean_yank integer_mod) exec_noop in1 integer_mod 3 boolean_pop exec_dup_times integer_mod boolean_yankdup integer_stackdepth boolean_pop integer_stackdepth in1 boolean_yank 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0]
Total: 15
Mean: 0.1875
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3031.605
Median total errors in population: 91/2
Error averages by case: (35.731 35.72 35.723 35.772 35.925 35.967 35.917 35.992 37.153 36.142 36.419 36.102 36.207 37.422 39.241 38.684 38.558 37.746 36.418 37.819 36.824 38.031 37.032 38.314 37.285 38.423 37.282 40.793 37.435 38.454 36.986 39.104 38.443 37.422 35.937 38.643 38.966 38.918 39.607 40.752 36.341 36.504 36.841 37.961 36.727 37.964 38.043 37.738 40.413 39.315 39.409 39.465 39.559 39.615 39.709 39.765 39.859 39.915 40.009 40.065 37.678 36.536 37.694 37.794 36.757 36.867 37.983 36.938 38.06 36.936 37.98 37.95 37.053 37.04 38.162 37.12 38.276 37.213 39.304 43.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.996
Average program size in population (points): 50.723
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.192
Error (vector) diversity:			 0.312
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 336844449
--- Timings ---
Current time: 1481303394218 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) integer_mod () in1 integer_mod 3 boolean_pop boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_pop boolean_or integer_stackdepth boolean_pop in1 boolean_yank 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 72
Lexicase best total error: 8
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 integer_mod integer_mod boolean_yank integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 72
Zero cases best number of zero cases: 72
Zero cases best total error: 8
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 481 571 564 473 484 590 558 466 468 559 542 454 444 536 521 395 394 458 523 458 422 467 395 479 414 502 425 535 529 574 532 529 492 498 500 485 471 412 322 346 349 354 381 351 360 411 493 578 676 675 676 675 676 675 676 675 676 675 676 530 741 624 667 678 649 533 621 503 690 626 689 668 645 529 614 496 681 609 659)
Population mean number of elite cases: 42.84
Count of perfect (error zero) individuals by case: (410 481 571 564 473 484 590 558 466 468 559 542 454 444 536 521 395 394 458 523 458 422 467 395 479 414 502 425 535 529 574 532 529 492 498 500 485 471 412 322 346 349 354 381 351 360 411 493 578 676 675 676 675 676 675 676 675 676 675 676 530 741 624 667 678 649 533 621 503 690 626 689 668 645 529 614 496 681 609 659)
Population mean number of perfect (error zero) cases: 42.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while () integer_stackdepth) (integer_mod) exec_noop in1 3 boolean_rot exec_dup_times integer_mod exec_when integer_stackdepth boolean_pop integer_stackdepth boolean_pop in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3943.778
Median total errors in population: 46
Error averages by case: (47.766 47.757 47.7 47.745 47.944 47.959 47.91 47.953 48.147 48.14 48.443 48.091 48.34 48.272 48.877 49.943 50.645 49.759 50.322 49.556 46.912 48.071 48.134 48.33 48.202 49.446 48.266 48.586 49.863 49.464 48.824 48.824 49.82 50.195 49.007 54.935 51.918 52.468 51.505 50.936 48.299 48.451 48.631 51.978 48.6 50.834 49.987 51.264 52.136 50.665 50.772 50.875 50.984 51.085 51.192 51.295 51.404 51.505 51.612 51.715 47.735 47.537 47.694 47.744 47.742 47.796 47.965 47.908 48.043 47.895 47.973 47.905 48.001 47.997 48.171 48.139 48.179 48.219 48.362 54.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.881
Average program size in population (points): 50.56
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 119
Genome diversity (% unique Plush genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.176
Error (vector) diversity:			 0.304
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 340473028
--- Timings ---
Current time: 1481303409421 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times 2 5 exec_shove (5 boolean_swap) exec_s (3 () integer_stackdepth) (boolean_invert_second_then_and integer_mod) () in1 integer_mod integer_mod integer_mod (integer_stackdepth) integer_stackdepth boolean_pop boolean_pop in1 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 72
Lexicase best total error: 8
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 integer_mod integer_mod 3 exec_while boolean_yank exec_dup_times integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 72
Zero cases best number of zero cases: 72
Zero cases best total error: 8
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 408 607 611 618 410 619 610 609 400 590 587 603 386 579 567 549 346 511 564 491 447 491 437 505 449 514 447 539 538 577 543 555 518 524 523 527 501 461 383 432 432 441 456 431 446 471 543 603 688 688 689 688 688 688 689 688 688 688 689 416 726 674 706 713 662 712 672 398 718 675 724 707 661 709 669 389 713 663 696)
Population mean number of elite cases: 45.57
Count of perfect (error zero) individuals by case: (600 408 607 611 618 410 619 610 609 400 590 587 603 386 579 567 549 346 511 564 491 447 491 437 505 449 514 447 539 538 577 543 555 518 524 523 527 501 461 383 432 432 441 456 431 446 471 543 603 688 688 689 688 688 688 689 688 688 688 689 416 726 674 706 713 662 712 672 398 718 675 724 707 661 709 669 389 713 663 696)
Population mean number of perfect (error zero) cases: 45.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 integer_stackdepth) (boolean_invert_second_then_and integer_mod) exec_noop in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 4326.539
Median total errors in population: 40
Error averages by case: (52.992 55.242 54.09 53.139 53.238 53.465 53.278 53.284 53.425 53.65 54.682 54.475 54.532 53.743 54.231 54.763 55.173 54.218 53.783 53.075 52.242 52.415 53.481 52.604 52.586 53.719 53.69 52.931 53.613 53.891 53.498 53.067 54.544 55.582 54.872 56.817 53.625 54.144 54.548 55.361 53.54 53.676 53.821 54.3 53.979 54.283 56.452 54.432 56.384 56.278 56.268 56.547 56.51 56.818 56.748 57.087 56.99 57.358 57.228 57.627 52.267 52.961 53.03 52.089 52.097 53.203 52.177 52.261 52.51 53.295 52.279 52.251 52.391 52.404 52.342 52.437 52.629 52.453 52.657 56.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.962
Average program size in population (points): 51.712
Average percent parens in population: 0.189
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 252
Genome diversity (% unique Plush genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.182
Error (vector) diversity:			 0.273
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 344173536
--- Timings ---
Current time: 1481303424599 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times boolean_dup_times 2 5 exec_shove 5 exec_s (3 exec_while () integer_stackdepth) (boolean_yank integer_mod) exec_noop in1 integer_mod integer_mod integer_mod integer_stackdepth boolean_or integer_stackdepth in1 3 3 boolean_pop boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 72
Lexicase best total error: 8
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times boolean_dup_times 2 5 exec_shove (5) exec_s (3 exec_while boolean_dup_items integer_stackdepth) (integer_mod) exec_noop in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth integer_stackdepth boolean_pop in1 boolean_yank 3 3 exec_while () boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 72
Zero cases best number of zero cases: 72
Zero cases best total error: 8
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 422 611 617 631 421 629 615 625 412 603 595 616 392 583 579 551 351 513 555 496 454 504 435 518 453 536 458 549 558 599 555 570 535 529 533 511 505 474 380 399 397 402 418 394 411 439 504 559 667 667 667 667 667 667 667 667 667 667 667 453 739 683 726 721 671 729 671 433 725 683 742 712 668 722 668 427 722 666 713)
Population mean number of elite cases: 45.61
Count of perfect (error zero) individuals by case: (600 422 611 617 631 421 629 615 625 412 603 595 616 392 583 579 551 351 513 555 496 454 504 435 518 453 536 458 549 558 599 555 570 535 529 533 511 505 474 380 399 397 402 418 394 411 439 504 559 667 667 667 667 667 667 667 667 667 667 667 453 739 683 726 721 671 729 671 433 725 683 742 712 668 722 668 427 722 666 713)
Population mean number of perfect (error zero) cases: 45.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 exec_s (3 integer_stackdepth) (boolean_yank integer_mod) exec_noop in1 integer_mod 3 exec_dup_times integer_mod exec_when integer_stackdepth boolean_pop integer_stackdepth boolean_pop in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 4506.842
Median total errors in population: 40
Error averages by case: (53.586 53.809 53.697 53.74 54.822 55.163 54.89 55.107 56.14 56.325 56.431 56.14 56.226 55.531 56.175 55.661 58.115 58.074 56.573 57.755 54.827 54.014 55.136 55.424 56.426 56.427 55.355 55.719 58.255 57.559 56.041 55.877 58.277 56.969 57.417 57.77 58.925 59.336 57.739 57.685 54.247 56.495 55.751 57.187 56.865 56.987 57.172 59.607 59.509 58.406 57.637 58.766 57.997 59.126 58.357 59.486 58.717 59.846 59.077 60.206 53.793 53.534 54.613 53.661 52.662 53.795 53.791 53.841 54.117 53.882 54.97 54.905 54.988 55.055 55.028 55.156 56.403 56.086 56.231 59.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.393
Average program size in population (points): 51.035
Average percent parens in population: 0.191
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 224
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.156
Error (vector) diversity:			 0.253
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 347796876
--- Timings ---
Current time: 1481303439734 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (2 5 exec_shove 5 exec_s (boolean_rot 3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 3 boolean_yank exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 72
Lexicase best total error: 8
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 integer_stackdepth) integer_mod () in1 integer_mod integer_mod 3 integer_mod integer_mod integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 72
Zero cases best number of zero cases: 72
Zero cases best total error: 8
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (584 418 592 606 619 416 616 599 607 409 593 589 611 401 590 568 564 361 515 584 499 466 506 447 520 454 515 441 532 529 573 533 547 500 507 515 522 484 464 382 397 399 403 424 404 415 463 525 567 665 663 665 663 665 663 665 663 665 663 665 443 739 657 703 722 675 710 677 428 734 668 728 719 676 706 672 422 729 653 710)
Population mean number of elite cases: 45.25
Count of perfect (error zero) individuals by case: (584 418 592 606 619 416 616 599 607 409 593 589 611 401 590 568 564 361 515 584 499 466 506 447 520 454 515 441 532 529 573 533 547 500 507 515 522 484 464 382 397 399 403 424 404 415 463 525 567 665 663 665 663 665 663 665 663 665 663 665 443 739 657 703 722 675 710 677 428 734 668 728 719 676 706 672 422 729 653 710)
Population mean number of perfect (error zero) cases: 45.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times integer_lte 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 boolean_yank integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 exec_shove 5 3 integer_stackdepth boolean_xor integer_mod in1 boolean_yank 3 exec_while boolean_rot exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3699.77
Median total errors in population: 40
Error averages by case: (44.62 43.849 43.731 43.772 43.876 44.151 43.952 44.066 44.172 44.306 44.498 44.197 44.438 44.531 44.616 44.674 45.618 44.873 45.552 45.707 44.866 45.053 45.146 45.408 46.289 44.536 44.439 44.832 45.311 45.616 46.342 45.934 46.153 46.992 47.575 48.584 49.184 50.55 48.237 50.276 44.259 44.424 44.789 45.646 45.773 45.953 47.851 46.157 51.578 49.858 49.996 50.098 50.236 50.338 50.476 50.578 50.716 50.818 50.956 51.058 45.867 44.576 44.699 44.77 44.717 44.844 44.879 44.888 45.198 44.918 45.068 45.031 45.012 45.125 45.139 45.121 46.515 46.117 45.592 49.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.895
Average program size in population (points): 51.604
Average percent parens in population: 0.189
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.168
Error (vector) diversity:			 0.274
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 351503269
--- Timings ---
Current time: 1481303454651 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_dup_times 2 5 integer_rot exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) (boolean_invert_second_then_and integer_mod) exec_noop in1 integer_mod integer_mod 3 exec_dup_times integer_mod integer_stackdepth integer_stackdepth in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 72
Lexicase best total error: 8
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove 5 exec_s (3 boolean_dup_items integer_stackdepth) boolean_yank exec_noop in1 integer_mod integer_mod boolean_rot integer_mod exec_when integer_stackdepth integer_stackdepth in1 3 boolean_pop integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 72
Zero cases best number of zero cases: 72
Zero cases best total error: 8
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (604 402 623 627 637 406 637 622 630 385 611 599 619 376 593 579 561 321 523 561 501 467 507 450 526 477 537 477 563 563 600 573 573 555 536 541 542 520 486 398 419 424 422 437 427 449 471 535 588 698 696 698 696 698 696 698 696 698 696 698 426 747 673 722 727 675 729 671 409 735 674 738 722 677 718 658 406 734 655 709)
Population mean number of elite cases: 46.35
Count of perfect (error zero) individuals by case: (604 402 623 627 637 406 637 622 630 385 611 599 619 376 593 579 561 321 523 561 501 467 507 450 526 477 537 477 563 563 600 573 573 555 536 541 542 520 486 398 419 424 422 437 427 449 471 535 588 698 696 698 696 698 696 698 696 698 696 698 426 747 673 722 727 675 729 671 409 735 674 738 722 677 718 658 406 734 655 709)
Population mean number of perfect (error zero) cases: 46.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times 2 5 exec_shove (5) exec_s (boolean_rot 3 exec_while boolean_dup_items integer_stackdepth) (boolean_xor integer_mod) exec_noop in1 integer_mod 3 exec_while boolean_pop exec_dup_times integer_mod exec_when integer_stackdepth integer_stackdepth boolean_pop in1 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 4198.577
Median total errors in population: 40
Error averages by case: (52.623 51.857 51.674 50.722 52.81 53.08 51.86 51.916 52.996 53.33 51.635 52.131 52.153 52.473 51.925 51.474 53.729 52.062 50.553 51.85 52.887 51.016 52.097 52.254 52.285 51.344 51.337 51.574 51.12 50.508 51.09 50.893 52.764 53.602 53.941 55.191 53.907 51.63 53.101 53.254 51.198 52.376 51.529 52.6 50.743 52.828 53.6 52.564 52.96 53.056 53.209 53.356 53.509 53.656 53.809 53.956 54.109 54.256 54.409 54.556 51.885 49.583 52.651 51.677 52.673 52.782 52.709 51.837 53.09 51.829 51.879 51.865 52.894 53.015 52.91 52.092 53.283 52.038 52.167 54.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.156
Average program size in population (points): 52.094
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 222
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.164
Error (vector) diversity:			 0.253
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 355204933
--- Timings ---
Current time: 1481303469647 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times boolean_dup_times integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (boolean_dup_times 2 5 integer_rot exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) (boolean_yank boolean_xor integer_mod) exec_noop in1 integer_mod integer_mod 3 boolean_pop exec_dup_times boolean_or integer_stackdepth in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 0 2 0 0 0 0 2 0 0 2 0]
Lexicase best number of elite cases: 75
Lexicase best total error: 10
Lexicase best mean error: 0.125
Lexicase best size: 58
Percent parens: 0.172
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times boolean_dup_times integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) in1) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (integer_dup_times boolean_dup_times 2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items in1) integer_mod exec_noop in1 integer_mod integer_mod 3 exec_dup_times boolean_or integer_stackdepth boolean_pop in1 integer_mod boolean_yank exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth boolean_pop in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 0 2 0 0 0 0 2 0 0 2 0]
Zero cases best number of elite cases: 75
Zero cases best number of zero cases: 75
Zero cases best total error: 10
Zero cases best mean error: 0.125
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (595 406 603 604 622 405 620 601 621 398 600 583 604 379 576 570 556 346 521 576 480 453 489 430 502 455 514 448 532 532 582 533 553 515 511 514 517 500 459 383 433 433 438 463 439 458 497 556 606 691 689 691 689 692 690 692 690 692 690 692 446 742 662 718 729 684 715 673 420 735 672 738 724 682 716 669 418 739 655 718)
Population mean number of elite cases: 45.86
Count of perfect (error zero) individuals by case: (595 406 603 604 622 405 620 601 621 398 600 583 604 379 576 570 556 346 521 576 480 453 489 430 502 455 514 448 532 532 582 533 553 515 511 514 517 500 459 383 433 433 438 463 439 458 497 556 606 691 689 691 689 692 690 692 690 692 690 692 446 742 662 718 729 684 715 673 420 735 672 738 724 682 716 669 418 739 655 718)
Population mean number of perfect (error zero) cases: 45.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times boolean_dup_times 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) boolean_rot boolean_yank exec_dup_times () integer_mod integer_mod boolean_yankdup exec_when (integer_stackdepth boolean_pop) boolean_or integer_stackdepth boolean_pop boolean_pop in1 boolean_yank 3 3 exec_while (boolean_pop) boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (2 5 integer_rot exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 3 exec_dup_times integer_mod boolean_yankdup exec_when integer_stackdepth boolean_pop integer_stackdepth in1 boolean_yank 3 3 boolean_empty boolean_yank integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0]
Total: 8
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 4133.693
Median total errors in population: 40
Error averages by case: (52.81 53.998 51.845 51.889 50.964 51.181 50.995 51.01 51.063 51.245 51.173 51.067 52.276 51.35 52.015 52.419 52.222 51.703 51.24 51.633 53.035 52.162 50.231 51.356 51.321 51.349 51.395 51.468 51.941 51.333 51.575 51.799 51.656 51.632 50.822 52.839 51.388 50.836 52.066 51.892 51.295 51.4 51.478 52.294 51.445 51.631 51.569 51.309 51.559 51.493 51.563 51.629 51.712 51.79 51.86 51.926 52.01 52.09 52.16 52.226 51.063 51.777 53.863 52.894 51.863 51.968 51.959 51.05 51.295 51.015 50.085 51.048 51.094 51.164 51.123 51.184 51.399 51.136 51.397 54.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.911
Average program size in population (points): 51.655
Average percent parens in population: 0.191
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 208
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.159
Error (vector) diversity:			 0.253
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 358908683
--- Timings ---
Current time: 1481303484975 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_dup_times integer_mod 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best partial simplification: (integer_mod 2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 integer_mod integer_mod 3 boolean_pop exec_dup_times boolean_or integer_stackdepth boolean_yank exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth boolean_pop in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 80
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_dup_times integer_mod 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best partial simplification: (2 5 exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while boolean_dup_items integer_stackdepth) (integer_mod) exec_noop in1 integer_mod integer_mod 3 exec_while boolean_pop integer_mod 3 exec_while boolean_pop exec_dup_times boolean_or integer_stackdepth boolean_pop in1 integer_mod exec_yankdup boolean_or exec_while () integer_stackdepth in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 80
Zero cases best number of zero cases: 80
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 513 656 663 668 513 665 659 668 507 658 650 657 499 641 643 640 482 623 670 614 582 620 569 624 585 636 584 638 612 653 615 641 604 620 603 613 602 587 552 560 561 566 573 565 573 599 626 649 678 677 679 677 678 677 679 677 678 677 679 569 757 401 706 718 710 705 403 526 732 398 718 716 708 705 407 524 727 394 709)
Population mean number of elite cases: 49.45
Count of perfect (error zero) individuals by case: (662 513 656 663 668 513 665 659 668 507 658 650 657 499 641 643 640 482 623 670 614 582 620 569 624 585 636 584 638 612 653 615 641 604 620 603 613 602 587 552 560 561 566 573 565 573 599 626 649 678 677 679 677 678 677 679 677 678 677 679 569 757 401 706 718 710 705 403 526 732 398 718 716 708 705 407 524 727 394 709)
Population mean number of perfect (error zero) cases: 49.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction 2} {:close 0, :instruction 5} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction 5} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction 3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction 3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_dup_times integer_mod 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Partial simplification: (integer_dup_times 2 5 exec_shove (5 boolean_swap) exec_s (3 exec_while boolean_dup_items integer_stackdepth) (boolean_invert_second_then_and integer_mod) exec_noop in1 integer_mod integer_mod 3 exec_while boolean_pop exec_dup_times boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth boolean_pop in1 3 integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 4432.577
Median total errors in population: 24
Error averages by case: (53.664 53.876 54.796 54.859 53.994 54.223 55.113 55.174 54.241 54.493 55.333 55.394 54.506 54.739 55.97 55.775 55.06 55.001 55.779 55.125 53.743 53.956 54.183 54.42 54.475 54.696 54.726 55.047 55.434 55.265 55.42 55.653 55.835 56.87 55.762 59.179 56.638 57.484 56.454 56.707 54.056 54.337 54.547 55.42 54.971 55.296 55.596 57.437 56.014 55.937 56.165 56.386 56.617 56.837 57.065 57.286 57.517 57.737 57.965 58.186 52.814 53.614 55.35 54.849 53.852 53.937 54.008 55.647 54.269 55.07 55.827 55.227 54.233 54.3 54.35 55.984 54.576 55.39 56.13 58.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.396
Average program size in population (points): 53.162
Average percent parens in population: 0.188
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 277
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.153
Error (vector) diversity:			 0.229
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 362864153
--- Timings ---
Current time: 1481303500229 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 99
Successful program: (integer_dup_times integer_mod 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (integer_dup_times integer_mod 2 5 integer_rot exec_shove (5 boolean_swap) exec_s (boolean_rot 3 exec_while (boolean_dup_items) integer_stackdepth) (boolean_yank boolean_invert_second_then_and boolean_xor integer_mod) (exec_noop) in1 integer_mod integer_mod 3 exec_while (boolean_pop) integer_mod 3 exec_while (boolean_pop) exec_dup_times () boolean_or integer_stackdepth boolean_pop in1 boolean_yankdup integer_mod boolean_yank exec_yankdup boolean_or exec_while (boolean_pop) integer_stackdepth boolean_pop in1 boolean_yank 3 integer_mod integer_mod integer_yank exec_do*count ())
errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 500
program: (2 5 exec_shove 5 exec_s (3 exec_while boolean_dup_items integer_stackdepth) integer_mod exec_noop in1 integer_mod integer_mod integer_stackdepth in1 integer_mod exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth in1 3 integer_mod integer_mod integer_yank exec_do*count ())
errors: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
total: 0
size: 31

step: 1000
program: (2 5 exec_shove 5 exec_s (3 integer_stackdepth) integer_mod exec_noop in1 integer_mod integer_mod integer_stackdepth in1 integer_mod exec_yankdup boolean_or exec_while boolean_pop integer_stackdepth in1 3 integer_mod integer_mod integer_yank exec_do*count ())
errors: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
total: 0
size: 29

;;******************************
;; Problem-Specific Report of Simplified Solution
