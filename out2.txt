Command line args: clojush.problems.ec-ai-demos.fizzbuzz
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup in1 3 5)
error-function = #object[clojush.problems.ec_ai_demos.fizzbuzz$all_errors 0x12d2ddde clojush.problems.ec_ai_demos.fizzbuzz$all_errors@12d2ddde]
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 50d7fa7d4badb42cebbc6fa9513e768e26977540
GitHub link = https://github.com/lspector/Clojush/commit/50d7fa7d4badb42cebbc6fa9513e768e26977540
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup in1 3 5)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.fizzbuzz$all_errors 0x12d2ddde clojush.problems.ec_ai_demos.fizzbuzz$all_errors@12d2ddde]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 250
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x7f0b93b4 clojush.pushgp.report$default_problem_specific_initial_report@7f0b93b4]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x1f736d00 clojush.pushgp.report$default_problem_specific_report@1f736d00]
random-seed = 3 -113 -55 -30 -53 41 33 2 -81 -52 -4 29 93 -7 115 -51
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "a9e46ac6-291c-4ead-81bb-e32bb74a4b0e"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (integer_gt exec_do*while ()))))))
Lexicase best partial simplification: (in1 exec_do*count (exec_rot () (integer_shove) (exec_do*count (exec_if))))
Lexicase best errors: [1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]
Lexicase best number of elite cases: 23
Lexicase best total error: 111
Lexicase best mean error: 1.3875
Lexicase best size: 25
Percent parens: 0.440
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (integer_gt exec_do*while ()))))))
Zero cases best partial simplification: (in1 exec_do*count (exec_rot () (integer_shove) exec_do*count (exec_if (() ()))))
Zero cases best errors: [1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]
Zero cases best number of elite cases: 23
Zero cases best number of zero cases: 23
Zero cases best total error: 111
Zero cases best mean error: 1.3875
Zero cases best size: 25
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (29 28 28 29 29 28 29 28 29 28 28 29 29 28 28 28 29 29 29 80 12 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 87 86 85 84 83 83 83 83 81 82 80 82 81 81 81 81 81 82 81 82)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (29 28 28 29 29 28 29 28 29 28 28 29 29 28 28 28 29 29 29 80 12 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 87 86 85 84 83 83 83 83 81 82 80 82 81 81 81 81 81 82 81 82)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction 3} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_rot (3 integer_gt) () (integer_mod integer_dup_items exec_dup_items) exec_dup_items exec_eq exec_dup (boolean_and exec_eq integer_max) exec_pop (boolean_yank exec_yank) integer_lt boolean_dup_times boolean_stackdepth integer_dec boolean_eq integer_lt integer_lt boolean_invert_second_then_and)
Partial simplification: (exec_eq integer_max exec_yank boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 81
Mean: 1.0125
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 56163.085
Median total errors in population: 80000
Error averages by case: (702.896 703.084 702.437 701.392 698.766 697.983 698.141 698.327 698.631 698.816 698.915 699.067 699.415 700.569 700.725 699.883 700.194 700.349 700.505 701.742 701.952 701.416 697.85 698.16 698.689 699.928 700.44 699.702 700.221 701.48 702.0 702.26 702.78 703.04 703.56 703.82 704.34 704.6 705.12 705.38 701.452 698.355 699.175 699.907 701.685 702.465 703.245 704.025 704.805 705.585 706.365 707.145 707.925 708.705 709.485 710.265 711.045 711.825 712.605 713.385 699.916 702.959 703.071 703.284 704.399 701.466 701.578 701.618 700.781 699.846 699.007 698.175 698.234 699.4 699.51 698.563 698.693 697.715 698.846 698.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.728
Average program size in population (points): 34.657
Average percent parens in population: 0.258
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.058
Error (vector) diversity:			 0.059
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 2592620
--- Timings ---
Current time: 1481130823143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best errors: [2 2 2 2 1 1 1 1 2 1 1 1 47 50 53 56 62 65 68 71 0 2 2 2 1 2 48 53 63 68 1 1 1 1 1 1 1 1 1 1 0 0 3 57 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 0 2 3 3 0 0 0 0 0 0 0 0 3 3 3 0]
Lexicase best number of elite cases: 28
Lexicase best total error: 830
Lexicase best mean error: 10.375
Lexicase best size: 27
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best errors: [2 2 2 2 1 1 1 1 2 1 1 1 47 50 53 56 62 65 68 71 0 2 2 2 1 2 48 53 63 68 1 1 1 1 1 1 1 1 1 1 0 0 3 57 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 0 2 3 3 0 0 0 0 0 0 0 0 3 3 3 0]
Zero cases best number of elite cases: 28
Zero cases best number of zero cases: 28
Zero cases best total error: 830
Zero cases best mean error: 10.375
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 233 232 243 234 234 232 232 232 232 233 232 242 232 232 233 233 232 233 233 195 193 194 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 252 251 252 252 253 251 253 253 253 253 253 253 253 253 253 253 253 253 253 253 488 484 481 236 236 234 235 238 237 237 234 246 246 245 247 247 244 246 246 245)
Population mean number of elite cases: 19.14
Count of perfect (error zero) individuals by case: (233 233 232 243 234 234 232 232 232 232 233 232 242 232 232 233 233 232 233 233 195 193 194 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 252 251 252 252 253 251 253 253 253 253 253 253 253 253 253 253 253 253 253 253 488 484 481 236 236 234 235 238 237 237 234 246 246 245 247 247 244 246 246 245)
Population mean number of perfect (error zero) cases: 19.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while})
Best program: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_lte) () integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (integer_gt exec_do*while ())))))))
Partial simplification: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_lte) () integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count ((exec_eq integer_eq) ())))))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]
Total: 75
Mean: 0.9375
Genome size: 19
Size: 34
Percent parens: 0.441
--- Population Statistics ---
Average total errors in population: 4229.805
Median total errors in population: 111
Error averages by case: (51.774 55.031 53.088 52.125 51.205 53.264 53.274 53.348 51.381 51.395 53.407 53.424 53.49 51.542 51.59 51.648 51.744 51.782 51.828 52.344 54.05 52.103 51.252 53.329 51.397 53.418 51.506 51.586 51.746 51.826 51.909 52.148 52.134 52.209 52.359 52.434 52.584 52.659 52.809 52.884 52.537 53.758 53.831 52.034 52.201 54.427 52.652 52.877 53.102 53.327 53.552 53.777 54.002 54.227 54.452 54.677 54.902 55.127 55.352 55.577 51.731 55.737 55.755 55.517 56.519 51.602 51.627 51.628 52.641 51.688 51.737 53.697 53.715 53.796 51.811 51.816 51.831 51.834 51.844 51.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.545
Average program size in population (points): 30.211
Average percent parens in population: 0.294
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 225
Genome diversity (% unique Plush genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.039
Error (vector) diversity:			 0.042
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 6540713
--- Timings ---
Current time: 1481130842598 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_pop boolean_pop integer_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup boolean_invert_first_then_and integer_gt boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_pop boolean_pop integer_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup boolean_invert_first_then_and integer_gt boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best errors: [2 1 2 2 1 2 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 2 1 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 3 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4 2 0 0 3 3 0 0 3 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 30
Lexicase best total error: 75
Lexicase best mean error: 0.9375
Lexicase best size: 25
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_pop boolean_pop integer_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup boolean_invert_first_then_and integer_gt boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_pop boolean_pop integer_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup boolean_invert_first_then_and integer_gt boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best errors: [2 1 2 2 1 2 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 2 1 2 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 3 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4 2 0 0 3 3 0 0 3 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 30
Zero cases best number of zero cases: 30
Zero cases best total error: 75
Zero cases best mean error: 0.9375
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 165 164 172 239 268 195 194 193 194 267 194 208 197 197 271 271 243 271 132 343 246 244 242 242 243 242 241 243 243 245 249 248 248 248 248 248 248 248 248 237 206 208 177 204 207 274 274 274 274 274 274 274 274 274 274 274 274 274 274 569 541 443 143 249 144 211 279 385 312 310 250 247 321 387 388 224 288 288 320)
Population mean number of elite cases: 20.52
Count of perfect (error zero) individuals by case: (103 165 164 172 239 268 195 194 193 194 267 194 208 197 197 271 271 243 271 132 343 246 244 242 242 243 242 241 243 243 245 249 248 248 248 248 248 248 248 248 237 206 208 177 204 207 274 274 274 274 274 274 274 274 274 274 274 274 274 274 569 541 443 143 249 144 211 279 385 312 310 250 247 321 387 388 224 288 288 320)
Population mean number of perfect (error zero) cases: 20.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while})
Best program: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_lte) () integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (integer_gt exec_do*while ())))))))
Partial simplification: (integer_lte integer_sub (exec_rot () (integer_lte) () integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () ()))))))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]
Total: 75
Mean: 0.9375
Genome size: 19
Size: 34
Percent parens: 0.441
--- Population Statistics ---
Average total errors in population: 4584.654
Median total errors in population: 115
Error averages by case: (45.169 43.204 42.204 40.279 39.192 107.076 107.2 107.257 39.487 39.351 106.236 106.405 109.133 44.531 44.885 45.043 45.745 46.144 46.44 47.37 70.836 40.065 39.334 107.369 39.502 106.374 44.156 44.647 45.816 46.401 39.869 45.445 41.396 40.497 40.697 40.797 40.997 41.097 41.297 41.397 43.628 104.75 108.871 45.618 40.159 106.632 40.929 41.229 41.529 41.829 42.129 42.429 42.729 43.029 43.329 43.629 43.929 44.229 44.529 44.829 44.017 75.019 102.036 143.61 115.397 41.919 40.84 39.636 40.32 39.865 39.531 107.484 107.663 107.497 39.549 39.558 39.917 39.863 39.883 40.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.996
Average program size in population (points): 29.79
Average percent parens in population: 0.292
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.3
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.3
Total error diversity:				 0.071
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 13449575
--- Timings ---
Current time: 1481130864119 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best partial simplification: (integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Lexicase best errors: [2 2 1000 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 3 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 1000 0 3 3 0 0 0 22 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 35
Lexicase best total error: 2088
Lexicase best mean error: 26.1
Lexicase best size: 17
Percent parens: 0.118
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best partial simplification: (integer_dup_times integer_gt boolean_shove boolean_xor boolean_shove boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_flush))
Zero cases best errors: [2 2 1000 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 3 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 1000 0 3 3 0 0 0 22 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 35
Zero cases best number of zero cases: 35
Zero cases best total error: 2088
Zero cases best mean error: 26.1
Zero cases best size: 17
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 136 92 151 221 231 226 218 131 178 255 181 297 253 251 291 291 278 291 77 245 191 134 127 128 186 141 123 186 189 256 358 336 336 336 336 336 336 336 336 413 190 182 314 191 275 344 344 344 344 344 344 344 344 344 344 344 344 344 344 307 299 183 127 203 239 169 262 551 469 341 377 265 357 407 449 372 377 380 343)
Population mean number of elite cases: 21.99
Count of perfect (error zero) individuals by case: (135 136 92 151 221 231 226 218 131 178 255 181 297 253 251 291 291 278 291 77 245 191 134 127 128 186 141 123 186 189 256 358 336 336 336 336 336 336 336 336 413 190 182 314 191 275 344 344 344 344 344 344 344 344 344 344 344 344 344 344 307 299 183 127 203 239 169 262 551 469 341 377 265 357 407 449 372 377 380 343)
Population mean number of perfect (error zero) cases: 21.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while})
Best program: (integer_lte integer_sub in1 exec_do*count (exec_rot () (integer_lte) () integer_sub in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (integer_gt exec_do*while ())))))))
Partial simplification: (integer_lte integer_sub () () in1 exec_do*count (exec_rot () (integer_min integer_shove) (exec_do*count (exec_if (())))))
Errors: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]
Total: 75
Mean: 0.9375
Genome size: 19
Size: 34
Percent parens: 0.441
--- Population Statistics ---
Average total errors in population: 4936.853
Median total errors in population: 153
Error averages by case: (93.331 56.501 53.055 41.54 40.559 133.475 132.477 132.608 40.508 39.529 83.999 84.045 64.851 43.75 43.962 45.946 46.231 45.51 45.668 46.432 55.96 46.076 42.606 130.821 40.563 83.973 44.416 45.48 46.195 45.462 43.203 44.029 63.355 44.413 44.673 44.803 45.063 45.193 45.453 45.583 51.477 60.915 134.438 45.953 42.455 93.379 44.712 45.102 45.492 45.882 46.272 46.662 47.052 47.442 47.832 48.222 48.612 49.002 49.392 49.782 40.9 96.747 60.17 145.803 188.621 43.992 99.049 45.929 40.191 39.598 41.806 131.53 132.764 130.728 41.312 41.309 41.652 40.74 39.75 42.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.862
Average program size in population (points): 30.742
Average percent parens in population: 0.211
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.291
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.291
Total error diversity:				 0.129
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 21771151
--- Timings ---
Current time: 1481130885444 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Lexicase best errors: [2 1 1000 1 1 1 1 1 1 1 0 0 0 0 0 2 2 2 2 3 1 1000 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 38
Lexicase best total error: 3060
Lexicase best mean error: 38.25
Lexicase best size: 39
Percent parens: 0.103
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Zero cases best errors: [2 1 1000 1 1 1 1 1 1 1 0 0 0 0 0 2 2 2 2 3 1 1000 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 38
Zero cases best number of zero cases: 38
Zero cases best total error: 3060
Zero cases best mean error: 38.25
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 117 98 146 183 153 219 211 144 154 223 161 340 345 301 321 322 327 320 75 200 148 97 95 136 223 187 149 197 205 254 302 293 291 291 291 292 291 291 291 417 239 286 303 278 406 446 445 445 445 445 445 445 446 446 446 446 446 446 446 197 196 125 182 190 304 243 260 543 497 380 305 340 345 392 320 351 329 386 283)
Population mean number of elite cases: 23.11
Count of perfect (error zero) individuals by case: (87 117 98 146 183 153 219 211 144 154 223 161 340 345 301 321 322 327 320 75 200 148 97 95 136 223 187 149 197 205 254 302 293 291 291 291 292 291 291 291 417 239 286 303 278 406 446 445 445 445 445 445 445 446 446 446 446 446 446 446 197 196 125 182 190 304 243 260 543 497 380 305 340 345 392 320 351 329 386 283)
Population mean number of perfect (error zero) cases: 23.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte exec_yankdup boolean_or integer_pop boolean_or exec_do*count (integer_dup_items boolean_frominteger boolean_yankdup) exec_dup_items integer_sub in1 exec_do*count (exec_rot () (exec_pop (integer_shove) exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (3) exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_flush)))) ()))
Partial simplification: (boolean_dup_times integer_gte exec_yankdup integer_pop boolean_or (integer_dup_items boolean_frominteger boolean_yankdup) exec_dup_items integer_sub in1 exec_do*count (exec_rot () (exec_pop integer_shove exec_do*count (exec_if (exec_eq integer_eq) (exec_k () () exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_flush)))) ()))
Errors: [0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]
Total: 74
Mean: 0.925
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5484.747
Median total errors in population: 2069
Error averages by case: (144.387 59.62 187.53 96.329 50.735 133.883 105.495 75.119 49.325 46.797 55.031 59.602 55.055 54.235 53.466 51.702 51.871 52.06 53.153 55.073 61.962 88.173 87.841 76.69 47.24 60.421 54.093 51.268 51.86 55.503 50.521 47.929 79.052 49.306 49.566 49.696 49.955 50.086 50.346 50.476 77.386 51.24 82.413 51.734 52.796 71.07 49.42 49.927 50.202 50.592 50.982 51.372 51.762 51.946 52.321 52.696 53.071 53.446 53.821 54.196 49.2 145.914 64.382 116.228 327.183 56.01 137.782 113.715 44.199 44.476 51.068 99.419 101.876 77.212 46.301 49.939 48.623 50.884 48.331 47.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.519
Average program size in population (points): 28.763
Average percent parens in population: 0.172
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.169
Error (vector) diversity:			 0.187
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 30451947
--- Timings ---
Current time: 1481130910345 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Lexicase best errors: [2 1 1000 1 1 1 1 1 1 1 0 0 0 0 0 2 2 2 2 3 1 1000 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 38
Lexicase best total error: 3060
Lexicase best mean error: 38.25
Lexicase best size: 39
Percent parens: 0.103
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_dup boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_eq exec_do*while () boolean_yankdup integer_inc integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor))
Zero cases best errors: [2 1 1000 1 1 1 1 1 1 1 0 0 0 0 0 2 2 2 2 3 1 1000 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 38
Zero cases best number of zero cases: 38
Zero cases best total error: 3060
Zero cases best mean error: 38.25
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 187 134 169 232 158 244 247 223 233 320 239 377 387 377 331 338 340 324 66 219 171 106 141 126 197 172 159 205 204 218 256 265 251 250 250 259 250 250 250 310 221 295 324 338 420 441 433 433 433 433 433 433 433 433 432 432 432 432 432 195 187 130 208 231 253 265 259 471 428 327 330 327 324 352 330 292 299 317 270)
Population mean number of elite cases: 22.99
Count of perfect (error zero) individuals by case: (98 187 134 169 232 158 244 247 223 233 320 239 377 387 377 331 338 340 324 66 219 171 106 141 126 197 172 159 205 204 218 256 265 251 250 250 259 250 250 250 310 221 295 324 338 420 441 433 433 433 433 433 433 433 433 432 432 432 432 432 195 187 130 208 231 253 265 259 471 428 327 330 327 324 352 330 292 299 317 270)
Population mean number of perfect (error zero) cases: 22.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor})
Best program: (boolean_pop boolean_dup_times integer_gte exec_yankdup boolean_or integer_pop boolean_or exec_do*count (integer_dup_items boolean_frominteger boolean_yankdup) exec_dup_items integer_sub in1 exec_do*count (exec_rot () (exec_pop (integer_shove) exec_do*count (exec_if (exec_eq integer_eq) (exec_k () (3) exec_do*range (in1 exec_dup_items integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor)))) ()))
Partial simplification: (boolean_pop boolean_dup_times integer_gte exec_yankdup boolean_or integer_pop boolean_or exec_do*count (integer_dup_items boolean_frominteger boolean_yankdup) exec_dup_items integer_sub in1 exec_do*count (exec_rot () (() exec_do*count (exec_if (exec_eq integer_eq) (exec_k () 3 exec_do*range (in1 exec_dup_items integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor)))) ()))
Errors: [2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 71
Mean: 0.8875
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5559.489
Median total errors in population: 1130
Error averages by case: (107.47 89.403 144.478 119.448 52.474 101.742 72.961 57.02 55.378 50.468 57.628 60.405 60.549 70.175 57.695 54.032 56.303 55.419 62.624 58.778 59.873 96.281 105.87 57.128 53.195 73.271 59.077 54.651 55.461 62.763 55.712 50.623 67.758 50.952 51.39 51.448 51.891 51.943 52.273 52.438 125.619 59.477 62.075 55.197 55.716 56.643 51.106 52.653 52.113 52.608 53.103 53.598 54.093 54.591 55.086 55.583 56.079 56.574 57.069 57.564 45.221 156.885 63.412 111.975 209.353 97.713 158.805 145.611 48.367 47.41 66.975 80.124 91.902 69.175 50.623 63.646 52.323 66.366 49.639 48.969)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.136
Average program size in population (points): 31.433
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.2
Error (vector) diversity:			 0.23
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 39221679
--- Timings ---
Current time: 1481130935757 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 184 135 171 233 162 210 227 201 213 294 244 386 381 367 317 332 331 310 56 188 151 109 133 144 218 175 171 201 205 221 254 293 253 247 246 255 246 246 246 323 240 316 333 377 463 488 487 485 485 486 487 485 485 485 478 478 478 478 478 164 151 108 215 246 300 242 253 460 435 335 353 366 355 373 330 312 307 344 268)
Population mean number of elite cases: 23.78
Count of perfect (error zero) individuals by case: (91 184 135 171 233 162 210 227 201 213 294 244 386 381 367 317 332 331 310 56 188 151 109 133 144 218 175 171 201 205 221 254 293 253 247 246 255 246 246 246 323 240 316 333 377 463 488 487 485 485 486 487 485 485 485 478 478 478 478 478 164 151 108 215 246 300 242 253 460 435 335 353 366 355 373 330 312 307 344 268)
Population mean number of perfect (error zero) cases: 23.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4783.762
Median total errors in population: 1161
Error averages by case: (88.538 80.41 141.453 135.406 52.273 78.226 70.919 71.812 43.931 42.175 41.148 42.535 51.953 50.037 51.656 44.253 44.553 44.304 59.904 55.885 49.926 93.3 77.558 58.808 43.963 45.915 46.661 44.313 43.507 60.008 44.07 38.101 51.247 37.441 37.834 37.979 38.993 38.415 38.704 38.708 117.494 58.031 52.207 44.409 49.487 47.156 37.513 38.972 38.363 38.783 39.2 39.617 40.044 40.464 40.884 41.318 41.745 42.165 42.585 43.005 36.315 160.981 69.386 71.024 180.519 103.584 162.791 145.582 50.242 47.303 53.678 82.721 77.023 60.028 56.163 63.1 40.205 41.691 50.61 40.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.902
Average program size in population (points): 32.898
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.228
Error (vector) diversity:			 0.267
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 48284137
--- Timings ---
Current time: 1481130960459 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 194 153 180 250 216 220 232 219 237 263 213 362 346 331 315 327 323 314 112 193 118 105 120 150 224 179 186 230 223 241 271 314 268 268 265 270 263 263 263 272 219 285 293 262 475 481 481 474 474 479 480 474 474 474 469 469 469 469 469 258 259 201 299 330 342 332 333 457 437 366 377 377 370 379 313 310 307 355 277)
Population mean number of elite cases: 24.44
Count of perfect (error zero) individuals by case: (102 194 153 180 250 216 220 232 219 237 263 213 362 346 331 315 327 323 314 112 193 118 105 120 150 224 179 186 230 223 241 271 314 268 268 265 270 263 263 263 272 219 285 293 262 475 481 481 474 474 479 480 474 474 474 469 469 469 469 469 258 259 201 299 330 342 332 333 457 437 366 377 377 370 379 313 310 307 355 277)
Population mean number of perfect (error zero) cases: 24.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3874.046
Median total errors in population: 1083
Error averages by case: (75.411 80.36 134.379 91.315 59.328 59.011 67.935 47.665 36.603 29.876 40.756 39.475 37.172 54.328 36.114 32.55 34.441 33.18 41.812 39.561 32.071 90.315 62.739 63.098 34.226 40.042 33.266 32.68 32.436 41.054 35.203 32.71 39.011 31.991 32.542 32.45 33.54 33.702 33.463 33.457 75.891 62.69 43.854 32.92 40.897 44.989 32.054 33.209 33.159 33.549 33.924 34.311 34.719 35.112 35.502 35.902 36.297 36.687 37.077 37.467 31.017 123.704 67.061 54.721 134.387 103.486 98.605 83.497 41.268 39.412 37.7 63.887 70.963 47.035 36.062 40.389 35.938 37.43 35.248 30.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.12
Average program size in population (points): 32.72
Average percent parens in population: 0.138
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.271
Error (vector) diversity:			 0.305
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 57363262
--- Timings ---
Current time: 1481130985221 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 252 152 201 238 201 216 246 210 212 244 184 348 336 310 302 318 301 294 112 175 110 104 109 117 238 218 213 249 233 256 279 307 252 255 251 257 250 250 250 255 258 309 287 290 496 501 499 494 494 497 497 495 495 495 494 492 492 492 492 267 275 204 303 328 382 322 329 434 409 367 368 374 357 372 311 304 325 355 276)
Population mean number of elite cases: 24.64
Count of perfect (error zero) individuals by case: (107 252 152 201 238 201 216 246 210 212 244 184 348 336 310 302 318 301 294 112 175 110 104 109 117 238 218 213 249 233 256 279 307 252 255 251 257 250 250 250 255 258 309 287 290 496 501 499 494 494 497 497 495 495 495 494 492 492 492 492 267 275 204 303 328 382 322 329 434 409 367 368 374 357 372 311 304 325 355 276)
Population mean number of perfect (error zero) cases: 24.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3822.042
Median total errors in population: 1075
Error averages by case: (71.392 74.275 120.358 90.194 55.417 59.032 51.911 44.595 36.489 30.795 39.336 40.585 43.873 40.115 36.498 34.17 34.084 35.388 39.583 37.498 33.103 79.405 64.954 50.023 32.271 35.523 34.208 33.157 35.126 40.801 35.438 34.07 41.425 34.808 35.329 35.162 36.066 36.502 36.325 36.631 68.866 43.776 43.468 34.385 42.609 41.738 34.86 35.907 36.072 36.567 37.053 37.548 38.051 38.546 39.041 39.538 40.04 40.534 41.309 41.819 29.947 111.662 100.893 54.784 122.342 71.62 98.664 77.557 42.5 52.535 39.001 63.985 51.241 43.077 43.104 45.57 43.848 31.615 34.495 35.96)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.424
Average program size in population (points): 32.971
Average percent parens in population: 0.137
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.287
Error (vector) diversity:			 0.328
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 66347288
--- Timings ---
Current time: 1481131010083 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 233 139 177 190 176 202 211 173 214 203 160 349 338 319 300 324 297 287 129 161 103 116 126 155 273 214 230 249 237 258 280 327 259 267 262 254 250 250 250 313 250 275 272 285 495 487 502 501 501 502 501 503 502 501 496 482 482 482 482 326 335 246 316 358 436 356 345 451 465 393 368 386 380 387 372 347 363 352 259)
Population mean number of elite cases: 25.07
Count of perfect (error zero) individuals by case: (76 233 139 177 190 176 202 211 173 214 203 160 349 338 319 300 324 297 287 129 161 103 116 126 155 273 214 230 249 237 258 280 327 259 267 262 254 250 250 250 313 250 275 272 285 495 487 502 501 501 502 501 503 502 501 496 482 482 482 482 326 335 246 316 358 436 356 345 451 465 393 368 386 380 387 372 347 363 352 259)
Population mean number of perfect (error zero) cases: 25.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4010.517
Median total errors in population: 1074
Error averages by case: (67.407 72.277 123.392 90.22 57.421 65.902 65.59 58.335 42.355 34.101 39.48 57.93 38.209 45.155 38.005 38.278 35.909 34.421 41.601 38.475 42.128 73.407 73.844 57.695 41.363 39.894 36.195 34.761 33.888 42.331 35.735 35.119 36.931 34.562 34.089 34.024 35.42 35.488 34.902 35.616 65.741 55.629 53.374 36.139 37.773 42.159 33.766 34.309 34.649 35.101 35.707 36.171 36.448 37.108 37.356 38.051 38.314 38.753 42.283 42.898 37.787 106.535 83.844 54.74 134.307 73.503 86.648 86.535 40.51 44.337 39.045 91.241 65.929 52.944 57.969 59.544 48.35 38.304 39.667 45.194)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.776
Average program size in population (points): 33.302
Average percent parens in population: 0.135
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.29
Error (vector) diversity:			 0.343
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 75370375
--- Timings ---
Current time: 1481131034946 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 244 150 175 181 178 222 212 176 211 209 163 309 295 276 257 274 252 240 125 163 120 116 132 170 245 222 253 248 240 264 274 296 244 258 253 242 240 241 240 294 243 282 307 318 474 474 488 488 487 490 489 491 491 489 490 474 474 474 474 339 324 222 317 367 451 375 378 440 454 393 363 381 379 368 394 323 357 343 272)
Population mean number of elite cases: 24.60
Count of perfect (error zero) individuals by case: (58 244 150 175 181 178 222 212 176 211 209 163 309 295 276 257 274 252 240 125 163 120 116 132 170 245 222 253 248 240 264 274 296 244 258 253 242 240 241 240 294 243 282 307 318 474 474 488 488 487 490 489 491 491 489 490 474 474 474 474 339 324 222 317 367 451 375 378 440 454 393 363 381 379 368 394 323 357 343 272)
Population mean number of perfect (error zero) cases: 24.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4953.147
Median total errors in population: 1075
Error averages by case: (69.458 78.218 136.656 88.284 72.757 68.187 67.625 71.522 60.152 55.905 48.043 60.793 51.703 52.661 46.259 53.037 47.21 47.836 53.678 47.821 68.079 75.425 68.923 68.876 61.134 50.407 47.578 45.5 46.167 52.384 48.695 49.65 50.463 49.8 49.331 49.047 49.825 50.496 50.037 50.751 75.996 77.513 57.259 49.329 53.286 53.584 48.898 49.335 49.788 50.24 50.682 51.309 51.585 52.036 52.49 53.173 53.437 53.874 57.964 58.609 45.702 116.523 85.907 73.727 140.312 76.545 85.892 93.618 62.707 64.523 55.066 95.487 61.924 66.973 74.2 72.345 55.478 44.956 52.628 67.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.084
Average program size in population (points): 34.658
Average percent parens in population: 0.133
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.313
Error (vector) diversity:			 0.37
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 84383029
--- Timings ---
Current time: 1481131059721 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (65 232 177 193 194 218 237 205 190 239 235 181 298 317 296 274 273 261 250 133 167 114 114 117 178 277 224 264 258 279 301 308 301 273 273 271 268 268 267 268 285 221 248 270 283 451 487 495 493 492 495 495 492 493 491 491 483 484 483 483 370 356 240 320 345 468 372 363 444 448 413 389 379 407 380 397 335 361 318 274)
Population mean number of elite cases: 25.25
Count of perfect (error zero) individuals by case: (65 232 177 193 194 218 237 205 190 239 235 181 298 317 296 274 273 261 250 133 167 114 114 117 178 277 224 264 258 279 301 308 301 273 273 271 268 268 267 268 285 221 248 270 283 451 487 495 493 492 495 495 492 493 491 491 483 484 483 483 370 356 240 320 345 468 372 363 444 448 413 389 379 407 380 397 335 361 318 274)
Population mean number of perfect (error zero) cases: 25.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3819.331
Median total errors in population: 1075
Error averages by case: (50.413 56.316 121.431 66.319 62.37 53.852 51.343 48.86 67.292 39.891 33.316 47.586 36.427 38.213 32.799 38.787 32.253 32.255 39.363 33.965 57.077 67.427 58.984 49.712 45.386 37.227 33.417 31.201 31.068 38.533 32.67 57.383 38.139 32.982 34.103 34.104 33.563 33.931 34.769 34.878 60.876 47.566 38.594 39.266 37.657 42.176 32.843 33.148 33.469 33.931 34.253 34.758 34.924 35.253 35.587 36.151 36.52 36.86 38.328 38.733 34.655 100.479 75.864 59.679 128.342 57.469 80.633 79.557 40.499 47.551 42.762 83.084 55.017 66.82 51.082 75.383 45.388 43.834 44.765 45.97)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.881
Average program size in population (points): 35.479
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.314
Error (vector) diversity:			 0.387
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 93549397
--- Timings ---
Current time: 1481131084367 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 203 169 187 200 225 231 201 215 249 252 196 312 324 299 278 278 266 252 116 170 119 136 124 173 265 204 231 257 250 292 314 286 273 253 271 251 266 247 267 246 214 258 278 288 448 492 502 499 499 501 501 483 481 479 480 469 470 468 468 407 388 244 297 327 435 394 381 445 438 389 389 365 366 353 365 306 321 301 255)
Population mean number of elite cases: 24.86
Count of perfect (error zero) individuals by case: (73 203 169 187 200 225 231 201 215 249 252 196 312 324 299 278 278 266 252 116 170 119 136 124 173 265 204 231 257 250 292 314 286 273 253 271 251 266 247 267 246 214 258 278 288 448 492 502 499 499 501 501 483 481 479 480 469 470 468 468 407 388 244 297 327 435 394 381 445 438 389 389 365 366 353 365 306 321 301 255)
Population mean number of perfect (error zero) cases: 24.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4400.391
Median total errors in population: 1078
Error averages by case: (78.332 63.351 119.544 84.333 68.52 53.019 58.754 57.307 59.407 41.353 41.125 53.971 39.664 44.756 47.341 47.138 46.058 41.459 45.448 46.69 60.1 78.441 61.055 56.069 47.762 46.544 37.904 41.078 42.489 44.978 41.54 52.389 48.282 39.838 41.171 39.912 41.156 41.234 42.27 41.451 76.043 55.904 42.919 43.718 47.081 49.454 39.657 40.461 41.217 41.698 43.149 43.099 44.388 44.012 44.622 45.432 46.098 46.972 49.288 50.008 47.481 106.368 80.885 67.698 123.396 71.564 89.669 99.629 44.651 49.681 66.061 69.384 61.422 83.166 59.733 66.802 45.634 51.214 50.177 47.323)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.652
Average program size in population (points): 35.414
Average percent parens in population: 0.135
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.329
Error (vector) diversity:			 0.396
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 102689936
--- Timings ---
Current time: 1481131109232 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 218 156 175 177 216 211 199 212 239 239 203 300 308 273 262 266 244 236 142 174 129 151 135 169 299 228 257 261 260 301 309 298 275 270 279 270 268 260 273 283 250 256 269 281 433 464 479 472 473 476 479 468 467 465 465 454 456 455 455 397 369 240 327 353 439 393 360 440 450 402 395 385 360 359 361 305 330 296 255)
Population mean number of elite cases: 24.74
Count of perfect (error zero) individuals by case: (82 218 156 175 177 216 211 199 212 239 239 203 300 308 273 262 266 244 236 142 174 129 151 135 169 299 228 257 261 260 301 309 298 275 270 279 270 268 260 273 283 250 256 269 281 433 464 479 472 473 476 479 468 467 465 465 454 456 455 455 397 369 240 327 353 439 393 360 440 450 402 395 385 360 359 361 305 330 296 255)
Population mean number of perfect (error zero) cases: 24.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4146.726
Median total errors in population: 1078
Error averages by case: (53.34 53.37 139.337 89.251 62.496 47.882 44.512 49.271 53.551 41.991 40.024 42.757 34.783 39.546 45.779 47.976 45.747 39.281 42.595 42.374 53.106 91.419 76.78 44.995 49.511 37.22 34.389 39.227 39.076 40.06 40.233 51.244 40.177 38.847 39.95 38.803 41.29 39.986 40.856 40.03 77.796 51.523 38.076 49.236 44.664 41.807 40.703 40.92 40.745 41.165 41.719 41.621 42.847 42.414 44.196 43.995 45.118 44.928 48.021 48.726 31.544 77.474 74.845 51.61 125.286 69.74 90.598 98.703 51.648 49.494 49.026 64.284 50.279 71.57 45.474 72.989 47.561 51.927 48.349 41.043)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.296
Average program size in population (points): 36.115
Average percent parens in population: 0.133
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.367
Error (vector) diversity:			 0.436
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 111965692
--- Timings ---
Current time: 1481131133778 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 202 137 159 153 210 207 200 199 261 253 232 329 315 298 288 280 259 241 142 181 128 124 129 170 270 207 261 276 239 284 325 283 270 239 264 237 251 228 257 269 226 233 275 314 497 521 548 540 543 540 546 521 518 518 515 504 509 508 507 444 435 238 329 372 453 421 397 500 484 451 449 450 408 390 426 353 354 315 284)
Population mean number of elite cases: 26.15
Count of perfect (error zero) individuals by case: (55 202 137 159 153 210 207 200 199 261 253 232 329 315 298 288 280 259 241 142 181 128 124 129 170 270 207 261 276 239 284 325 283 270 239 264 237 251 228 257 269 226 233 275 314 497 521 548 540 543 540 546 521 518 518 515 504 509 508 507 444 435 238 329 372 453 421 397 500 484 451 449 450 408 390 426 353 354 315 284)
Population mean number of perfect (error zero) cases: 26.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (integer_rot integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (integer_rot integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3158.355
Median total errors in population: 1072
Error averages by case: (39.359 45.445 111.558 65.328 59.74 53.934 40.535 34.138 32.273 32.091 30.247 31.596 28.563 34.904 30.015 32.28 28.801 25.48 25.364 26.483 31.165 71.592 65.879 36.19 33.656 24.461 27.771 24.326 25.357 25.144 30.392 29.498 28.651 26.643 26.647 27.468 31.062 29.115 27.742 27.75 62.168 46.513 35.056 28.582 31.809 27.365 26.125 26.355 26.51 31.761 28.469 27.993 29.393 29.952 30.924 32.4 32.073 32.61 35.688 36.675 31.419 58.362 64.956 33.744 89.404 58.733 80.685 95.742 40.675 36.588 47.189 69.1 39.99 58.672 42.486 47.646 42.57 30.009 44.224 29.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.408
Average program size in population (points): 36.08
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.324
Error (vector) diversity:			 0.388
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 121221068
--- Timings ---
Current time: 1481131158860 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 205 151 182 168 236 226 220 205 265 248 255 309 292 287 261 247 235 221 157 170 144 124 138 152 272 219 247 269 241 268 300 270 262 236 255 235 246 228 252 265 228 245 272 310 470 513 535 531 530 534 537 529 516 518 519 507 514 513 510 435 419 243 331 358 428 386 386 457 469 446 421 434 385 363 388 346 336 297 265)
Population mean number of elite cases: 25.65
Count of perfect (error zero) individuals by case: (64 205 151 182 168 236 226 220 205 265 248 255 309 292 287 261 247 235 221 157 170 144 124 138 152 272 219 247 269 241 268 300 270 262 236 255 235 246 228 252 265 228 245 272 310 470 513 535 531 530 534 537 529 516 518 519 507 514 513 510 435 419 243 331 358 428 386 386 457 469 446 421 434 385 363 388 346 336 297 265)
Population mean number of perfect (error zero) cases: 25.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4587.804
Median total errors in population: 1078
Error averages by case: (73.295 57.406 134.446 79.344 68.878 73.936 53.554 49.238 53.302 49.528 47.518 44.025 47.041 53.419 47.991 56.347 49.15 52.633 46.757 46.425 59.103 85.499 86.785 51.851 48.457 42.924 44.256 48.429 45.521 46.155 47.822 51.638 45.194 43.114 43.382 43.26 49.739 44.361 44.119 44.067 85.231 55.231 46.56 56.957 52.815 48.163 43.034 43.223 44.213 51.313 45.706 44.898 46.271 46.092 47.703 48.323 47.043 48.4 48.901 51.224 54.387 90.306 88.839 42.67 107.378 74.696 109.506 98.621 62.571 56.559 58.051 90.113 50.039 66.464 56.615 73.492 51.259 50.643 58.719 45.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.587
Average program size in population (points): 36.529
Average percent parens in population: 0.135
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.324
Error (vector) diversity:			 0.41
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 130340132
--- Timings ---
Current time: 1481131183901 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 165 167 176 173 215 228 210 221 294 254 262 318 313 299 277 264 259 241 173 157 135 133 130 166 257 207 246 262 216 258 304 270 277 250 278 247 263 244 268 255 218 247 261 306 458 515 527 534 533 533 538 535 516 514 527 505 509 509 509 459 443 245 346 335 402 394 403 454 458 444 417 441 420 397 413 384 358 313 287)
Population mean number of elite cases: 26.01
Count of perfect (error zero) individuals by case: (71 165 167 176 173 215 228 210 221 294 254 262 318 313 299 277 264 259 241 173 157 135 133 130 166 257 207 246 262 216 258 304 270 277 250 278 247 263 244 268 255 218 247 261 306 458 515 527 534 533 533 538 535 516 514 527 505 509 509 509 459 443 245 346 335 402 394 403 454 458 444 417 441 420 397 413 384 358 313 287)
Population mean number of perfect (error zero) cases: 26.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3542.053
Median total errors in population: 1074
Error averages by case: (68.311 43.583 114.44 60.339 56.087 57.92 42.501 38.938 44.637 33.517 39.566 32.111 35.366 41.996 33.034 42.736 35.266 36.463 35.414 34.77 46.18 82.472 77.936 48.941 31.689 33.96 37.554 33.88 36.752 35.881 36.404 41.434 31.25 28.344 29.309 28.288 31.656 29.138 29.012 28.959 69.381 41.585 37.409 42.227 38.998 31.328 28.085 28.182 30.875 32.939 29.6 30.776 31.313 30.932 32.766 32.595 32.853 40.445 33.965 42.376 51.337 89.272 81.946 30.7 81.595 69.881 99.48 80.486 39.683 39.873 47.055 66.205 41.814 61.256 31.422 57.352 37.213 38.673 38.031 34.115)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.632
Average program size in population (points): 36.253
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.333
Error (vector) diversity:			 0.407
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 139476275
--- Timings ---
Current time: 1481131208652 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte boolean_yank boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 204 165 193 191 264 238 229 239 265 248 257 317 304 286 288 278 286 263 150 164 128 144 137 156 266 238 277 263 233 266 324 263 281 233 284 230 268 228 274 236 206 252 238 283 470 506 520 535 533 529 541 527 496 495 514 490 492 493 492 462 444 244 305 333 422 399 418 483 486 431 414 424 396 390 395 370 355 313 271)
Population mean number of elite cases: 26.02
Count of perfect (error zero) individuals by case: (99 204 165 193 191 264 238 229 239 265 248 257 317 304 286 288 278 286 263 150 164 128 144 137 156 266 238 277 263 233 266 324 263 281 233 284 230 268 228 274 236 206 252 238 283 470 506 520 535 533 529 541 527 496 495 514 490 492 493 492 462 444 244 305 333 422 399 418 483 486 431 414 424 396 390 395 370 355 313 271)
Population mean number of perfect (error zero) cases: 26.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3754.933
Median total errors in population: 1078
Error averages by case: (70.227 45.425 105.399 70.184 64.593 57.877 54.411 43.949 46.444 34.049 47.744 34.982 34.413 45.583 30.985 45.959 42.595 35.207 35.31 32.966 59.183 73.735 67.994 45.905 32.656 33.025 32.965 31.881 34.569 32.604 35.336 41.753 36.674 32.053 32.907 31.112 34.463 32.827 31.922 32.019 70.236 46.527 35.381 42.182 39.101 36.769 32.058 31.511 34.244 37.184 32.674 35.111 36.176 37.171 36.976 40.798 37.103 46.565 37.647 48.439 69.226 95.176 93.84 45.708 84.48 56.838 88.566 84.415 40.437 38.219 53.148 63.409 41.968 66.261 43.46 61.713 39.152 38.822 49.753 42.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.05
Average program size in population (points): 36.914
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.346
Error (vector) diversity:			 0.423
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 148676538
--- Timings ---
Current time: 1481131233121 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 212 135 160 180 267 236 214 226 271 246 262 323 306 290 280 282 274 257 150 192 153 140 159 168 242 234 256 258 214 247 294 260 277 243 283 234 271 232 272 249 226 245 257 314 468 501 506 517 512 513 516 505 483 481 492 473 472 476 472 454 471 219 313 329 421 367 386 466 468 410 396 402 397 369 377 353 349 300 247)
Population mean number of elite cases: 25.47
Count of perfect (error zero) individuals by case: (98 212 135 160 180 267 236 214 226 271 246 262 323 306 290 280 282 274 257 150 192 153 140 159 168 242 234 256 258 214 247 294 260 277 243 283 234 271 232 272 249 226 245 257 314 468 501 506 517 512 513 516 505 483 481 492 473 472 476 472 454 471 219 313 329 421 367 386 466 468 410 396 402 397 369 377 353 349 300 247)
Population mean number of perfect (error zero) cases: 25.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4163.373
Median total errors in population: 1103
Error averages by case: (67.291 52.405 100.459 74.382 60.922 60.033 52.777 48.885 61.073 39.438 46.618 47.679 40.65 56.033 34.311 40.01 39.846 40.795 38.99 39.804 66.117 64.58 63.95 53.89 38.893 38.313 36.718 34.302 36.383 38.622 41.982 50.75 42.453 38.613 39.181 39.846 41.409 38.022 38.848 40.366 83.395 52.479 41.545 52.503 40.837 40.838 37.022 37.481 42.683 41.142 38.76 39.394 45.086 41.639 45.612 45.377 46.188 60.638 45.573 63.397 72.302 91.197 101.916 49.501 93.632 47.079 104.767 86.708 46.509 48.649 48.073 66.222 50.202 65.491 57.451 64.417 47.32 56.654 56.706 41.349)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.576
Average program size in population (points): 37.328
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.377
Error (vector) diversity:			 0.457
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 157934467
--- Timings ---
Current time: 1481131258179 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 192 125 152 177 241 222 179 219 239 248 261 326 303 290 255 260 237 228 174 198 163 141 126 177 272 249 276 300 231 267 323 263 279 238 288 230 280 226 283 261 249 242 237 295 459 485 500 516 511 504 507 510 476 466 470 461 461 466 460 450 433 202 304 282 400 358 413 455 456 403 434 420 426 384 377 359 327 297 247)
Population mean number of elite cases: 25.19
Count of perfect (error zero) individuals by case: (86 192 125 152 177 241 222 179 219 239 248 261 326 303 290 255 260 237 228 174 198 163 141 126 177 272 249 276 300 231 267 323 263 279 238 288 230 280 226 283 261 249 242 237 295 459 485 500 516 511 504 507 510 476 466 470 461 461 466 460 450 433 202 304 282 400 358 413 455 456 403 434 420 426 384 377 359 327 297 247)
Population mean number of perfect (error zero) cases: 25.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5277.756
Median total errors in population: 1163
Error averages by case: (91.234 66.563 105.539 109.317 78.28 71.006 61.773 76.324 68.404 54.2 62.794 54.781 51.03 56.827 52.368 55.537 57.099 54.161 53.226 52.337 88.056 77.724 89.2 66.997 55.984 48.283 47.832 46.628 47.728 51.648 56.614 56.714 49.52 47.969 49.79 47.927 57.115 49.239 49.506 54.469 90.303 56.842 53.771 55.931 56.787 52.387 47.298 48.248 50.69 54.682 50.058 49.882 53.556 51.23 54.485 58.077 60.915 62.447 61.542 65.002 92.25 106.236 112.892 74.743 118.676 72.852 151.695 103.597 58.431 61.908 63.378 83.255 54.149 84.266 80.348 79.038 59.138 78.469 67.796 68.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.657
Average program size in population (points): 37.417
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.379
Error (vector) diversity:			 0.467
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 167192148
--- Timings ---
Current time: 1481131283464 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 222 147 169 173 240 218 183 233 266 236 263 337 329 303 280 271 235 249 168 202 160 155 171 179 249 254 255 283 236 259 311 279 304 256 305 249 296 256 303 253 238 257 278 323 462 510 505 534 509 523 535 533 498 493 491 492 479 493 478 487 473 240 293 284 380 364 423 419 429 432 417 410 401 379 365 348 313 256 230)
Population mean number of elite cases: 25.80
Count of perfect (error zero) individuals by case: (88 222 147 169 173 240 218 183 233 266 236 263 337 329 303 280 271 235 249 168 202 160 155 171 179 249 254 255 283 236 259 311 279 304 256 305 249 296 256 303 253 238 257 278 323 462 510 505 534 509 523 535 533 498 493 491 492 479 493 478 487 473 240 293 284 380 364 423 419 429 432 417 410 401 379 365 348 313 256 230)
Population mean number of perfect (error zero) cases: 25.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 3910.937
Median total errors in population: 1085
Error averages by case: (84.196 46.597 93.449 65.395 60.99 57.057 49.892 49.905 60.887 33.034 50.692 40.463 38.125 48.748 37.455 44.486 42.457 37.032 38.2 35.013 66.054 59.596 63.015 47.831 41.923 45.711 35.605 40.119 35.217 36.611 34.449 42.12 34.468 31.01 32.536 32.888 37.432 32.7 32.578 35.854 69.336 42.633 56.477 41.646 38.242 36.013 32.235 32.214 35.386 34.238 34.478 33.806 38.3 36.184 39.188 43.863 43.344 47.934 44.036 49.961 71.141 90.137 86.767 43.87 82.649 54.055 115.763 82.474 39.556 43.862 54.106 62.337 38.976 73.653 47.921 62.018 44.075 72.611 45.095 38.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.036
Average program size in population (points): 37.727
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.38
Error (vector) diversity:			 0.462
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 176536034
--- Timings ---
Current time: 1481131308380 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 231 146 167 177 230 209 170 233 246 245 268 291 274 274 244 259 197 196 186 184 146 163 148 172 233 261 271 318 286 259 310 264 271 226 260 217 256 220 264 265 263 241 272 292 461 497 495 514 502 513 524 524 497 487 489 485 478 488 478 501 479 236 284 265 368 348 404 409 425 436 400 408 431 401 334 369 328 268 272)
Population mean number of elite cases: 25.19
Count of perfect (error zero) individuals by case: (88 231 146 167 177 230 209 170 233 246 245 268 291 274 274 244 259 197 196 186 184 146 163 148 172 233 261 271 318 286 259 310 264 271 226 260 217 256 220 264 265 263 241 272 292 461 497 495 514 502 513 524 524 497 487 489 485 478 488 478 501 479 236 284 265 368 348 404 409 425 436 400 408 431 401 334 369 328 268 272)
Population mean number of perfect (error zero) cases: 25.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4797.872
Median total errors in population: 1113
Error averages by case: (90.193 67.464 99.427 85.394 69.009 62.074 58.736 65.043 61.379 47.789 69.953 54.499 50.313 55.121 43.289 50.438 47.362 41.518 45.049 47.574 71.113 81.552 68.171 52.837 59.678 62.498 44.439 49.353 40.086 46.379 46.16 46.324 40.709 43.048 44.712 45.194 50.98 42.658 46.205 46.071 77.274 66.655 57.28 44.932 46.711 50.856 41.209 43.093 45.512 44.456 44.876 46.742 47.371 49.05 48.91 53.677 57.894 59.763 58.2 60.181 75.139 89.275 109.029 65.791 98.688 77.987 139.731 97.559 50.701 59.558 57.89 72.705 50.158 73.226 60.909 87.837 52.01 76.559 68.529 50.158)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.575
Average program size in population (points): 38.361
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.4
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 185830743
--- Timings ---
Current time: 1481131333290 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_dup_items integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (exec_dup_items integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_dup_items integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (exec_dup_items integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 233 157 173 206 257 245 213 264 300 248 306 334 295 320 277 296 235 226 175 183 182 159 146 149 242 216 254 290 249 250 286 260 269 244 275 243 260 231 263 235 226 241 267 308 476 510 515 534 514 544 538 550 532 521 531 521 518 522 518 446 430 233 279 263 351 347 397 426 438 430 403 391 380 374 353 367 315 257 272)
Population mean number of elite cases: 25.77
Count of perfect (error zero) individuals by case: (88 233 157 173 206 257 245 213 264 300 248 306 334 295 320 277 296 235 226 175 183 182 159 146 149 242 216 254 290 249 250 286 260 269 244 275 243 260 231 263 235 226 241 267 308 476 510 515 534 514 544 538 550 532 521 531 521 518 522 518 446 430 233 279 263 351 347 397 426 438 430 403 391 380 374 353 367 315 257 272)
Population mean number of perfect (error zero) cases: 25.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4786.472
Median total errors in population: 2211/2
Error averages by case: (101.205 54.349 109.35 85.359 77.148 58.882 56.763 63.81 60.763 44.971 48.937 46.801 45.192 59.303 45.88 47.997 41.274 43.295 46.95 46.414 72.108 82.583 69.283 54.9 59.006 51.211 41.115 47.569 40.934 44.63 50.257 53.275 47.109 42.99 43.313 42.672 44.51 43.72 45.371 43.296 92.211 58.868 54.512 50.133 51.188 49.343 42.207 42.627 45.998 43.067 45.214 44.945 48.663 47.71 49.766 51.871 55.495 60.062 55.506 61.413 84.213 95.264 95.785 67.716 153.907 102.111 117.858 109.219 51.505 62.52 55.955 68.28 48.579 80.302 53.695 71.036 44.866 68.847 57.871 41.649)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.127
Average program size in population (points): 37.81
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.382
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 195129136
--- Timings ---
Current time: 1481131358185 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 222 173 162 220 252 246 171 255 299 251 279 335 310 327 288 283 263 247 171 201 159 174 144 174 257 245 254 286 248 259 286 247 264 231 272 227 260 231 265 244 231 267 266 286 451 469 489 487 482 502 500 492 469 465 467 463 460 464 459 470 448 248 285 266 341 364 407 392 403 405 388 388 365 360 324 357 312 264 262)
Population mean number of elite cases: 25.00
Count of perfect (error zero) individuals by case: (101 222 173 162 220 252 246 171 255 299 251 279 335 310 327 288 283 263 247 171 201 159 174 144 174 257 245 254 286 248 259 286 247 264 231 272 227 260 231 265 244 231 267 266 286 451 469 489 487 482 502 500 492 469 465 467 463 460 464 459 470 448 248 285 266 341 364 407 392 403 405 388 388 365 360 324 357 312 264 262)
Population mean number of perfect (error zero) cases: 25.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4823.143
Median total errors in population: 1121
Error averages by case: (91.172 56.319 95.475 91.47 67.65 70.882 60.541 66.17 64.126 51.584 49.074 48.886 48.816 54.575 48.737 48.66 41.295 43.797 48.828 49.683 62.147 85.616 73.103 53.53 55.163 46.06 48.196 53.483 38.995 46.711 46.635 55.167 50.583 47.492 51.187 45.47 54.262 46.496 52.373 48.443 74.288 60.937 60.606 55.803 53.438 49.627 45.119 49.164 50.777 47.454 47.976 51.104 55.141 55.064 57.01 58.435 60.897 66.542 60.621 68.814 81.13 92.181 96.754 61.79 100.69 76.056 122.741 102.681 53.105 59.854 64.863 66.638 45.498 78.361 54.061 65.388 49.204 61.212 56.065 47.202)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.275
Average program size in population (points): 38.031
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.416
Error (vector) diversity:			 0.494
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 204346756
--- Timings ---
Current time: 1481131383235 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 212 152 143 183 247 244 158 257 306 243 277 345 325 329 287 302 258 248 195 198 178 158 159 169 245 242 271 291 268 250 270 254 268 236 267 221 250 242 262 251 236 238 264 288 467 493 513 514 515 537 530 519 516 511 517 506 505 506 504 524 506 294 331 297 376 400 462 459 458 470 405 435 401 388 354 409 362 276 277)
Population mean number of elite cases: 26.31
Count of perfect (error zero) individuals by case: (85 212 152 143 183 247 244 158 257 306 243 277 345 325 329 287 302 258 248 195 198 178 158 159 169 245 242 271 291 268 250 270 254 268 236 267 221 250 242 262 251 236 238 264 288 467 493 513 514 515 537 530 519 516 511 517 506 505 506 504 524 506 294 331 297 376 400 462 459 458 470 405 435 401 388 354 409 362 276 277)
Population mean number of perfect (error zero) cases: 26.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4892.257
Median total errors in population: 1094
Error averages by case: (94.201 52.391 93.392 96.351 71.588 68.661 70.777 73.901 57.423 46.313 60.492 51.826 42.701 43.42 46.457 45.649 48.616 55.459 61.28 58.154 57.168 77.455 66.029 56.994 56.453 55.423 44.809 56.83 44.826 53.945 48.659 53.829 60.198 50.027 58.113 50.807 61.315 50.115 53.13 50.59 77.16 59.524 55.198 66.249 60.267 56.973 49.751 56.719 55.284 48.93 51.334 53.76 57.426 54.895 59.917 59.847 62.041 71.558 58.843 74.032 64.07 69.119 77.668 52.653 101.605 73.857 133.576 85.375 49.735 60.663 59.501 62.165 54.81 84.019 66.206 67.886 51.901 49.544 51.634 40.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.345
Average program size in population (points): 39.211
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.383
Error (vector) diversity:			 0.468
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 213723566
--- Timings ---
Current time: 1481131408436 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 232 187 164 193 258 261 160 243 272 226 285 333 314 320 298 304 258 252 210 197 175 164 144 182 224 215 249 267 237 226 276 255 268 240 255 225 248 230 250 270 224 232 270 310 446 473 484 496 487 518 501 502 500 492 497 486 481 482 479 477 447 262 308 278 357 386 410 434 430 422 397 433 376 374 320 361 348 276 268)
Population mean number of elite cases: 25.40
Count of perfect (error zero) individuals by case: (106 232 187 164 193 258 261 160 243 272 226 285 333 314 320 298 304 258 252 210 197 175 164 144 182 224 215 249 267 237 226 276 255 268 240 255 225 248 230 250 270 224 232 270 310 446 473 484 496 487 518 501 502 500 492 497 486 481 482 479 477 447 262 308 278 357 386 410 434 430 422 397 433 376 374 320 361 348 276 268)
Population mean number of perfect (error zero) cases: 25.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5012.634
Median total errors in population: 2291/2
Error averages by case: (79.186 57.445 92.404 85.537 65.93 64.158 62.208 66.395 77.243 46.443 72.54 62.593 43.748 53.817 46.956 48.259 47.113 53.59 51.425 53.661 64.134 79.47 65.513 70.604 53.042 62.301 47.993 55.306 48.4 53.166 54.182 54.362 51.446 51.792 52.893 49.532 56.3 51.152 52.625 51.403 75.195 61.332 56.639 61.772 52.704 55.096 51.247 54.25 56.219 51.517 53.11 58.892 59.498 59.873 61.082 64.166 66.073 74.857 65.661 78.016 62.155 72.225 77.739 67.648 102.657 76.075 129.742 92.816 52.08 75.871 62.128 71.698 53.998 79.749 62.051 61.485 63.528 53.22 71.391 50.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.678
Average program size in population (points): 39.556
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.402
Error (vector) diversity:			 0.482
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 222968544
--- Timings ---
Current time: 1481131433682 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 241 176 160 213 251 262 212 255 297 259 274 316 303 332 292 309 258 231 211 197 186 144 149 195 230 233 254 258 251 253 313 267 291 257 297 248 285 254 289 241 223 261 256 306 455 490 504 524 507 539 536 525 510 502 508 499 493 493 489 502 482 263 307 268 359 402 428 432 428 408 412 425 389 365 329 389 379 259 248)
Population mean number of elite cases: 26.16
Count of perfect (error zero) individuals by case: (117 241 176 160 213 251 262 212 255 297 259 274 316 303 332 292 309 258 231 211 197 186 144 149 195 230 233 254 258 251 253 313 267 291 257 297 248 285 254 289 241 223 261 256 306 455 490 504 524 507 539 536 525 510 502 508 499 493 493 489 502 482 263 307 268 359 402 428 432 428 408 412 425 389 365 329 389 379 259 248)
Population mean number of perfect (error zero) cases: 26.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5757.0
Median total errors in population: 1211
Error averages by case: (90.124 74.321 105.471 101.287 80.614 76.164 76.831 86.789 86.501 58.715 78.677 74.627 55.381 56.283 53.936 57.979 54.329 57.964 63.023 64.608 72.083 108.306 88.171 74.013 61.545 71.356 51.341 63.467 53.865 60.887 61.384 63.977 60.388 61.712 59.661 57.576 60.938 55.234 56.289 56.326 76.233 78.657 74.014 72.804 56.201 61.668 57.472 59.984 60.524 56.09 63.811 57.116 59.386 61.132 60.752 67.588 66.838 83.537 67.656 85.605 77.022 83.068 77.688 79.63 102.671 91.892 142.581 110.669 65.91 87.655 81.657 69.314 73.732 98.808 72.665 75.631 75.792 70.349 82.722 58.333)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.089
Average program size in population (points): 40.032
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.408
Error (vector) diversity:			 0.476
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 232420956
--- Timings ---
Current time: 1481131458972 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 232 168 173 191 258 240 196 232 271 238 273 292 284 307 284 301 232 223 199 191 181 164 137 189 209 246 285 281 237 260 319 301 307 285 298 289 308 282 297 266 253 252 261 292 418 463 463 486 473 507 497 494 480 475 485 473 473 467 466 454 432 233 295 282 366 399 431 418 418 422 414 442 397 356 318 341 334 274 265)
Population mean number of elite cases: 25.52
Count of perfect (error zero) individuals by case: (129 232 168 173 191 258 240 196 232 271 238 273 292 284 307 284 301 232 223 199 191 181 164 137 189 209 246 285 281 237 260 319 301 307 285 298 289 308 282 297 266 253 252 261 292 418 463 463 486 473 507 497 494 480 475 485 473 473 467 466 454 432 233 295 282 366 399 431 418 418 422 414 442 397 356 318 341 334 274 265)
Population mean number of perfect (error zero) cases: 25.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5502.214
Median total errors in population: 1220
Error averages by case: (99.177 75.633 105.417 104.27 88.702 70.302 76.288 74.342 84.892 53.849 66.471 58.252 43.487 62.833 47.795 55.867 47.577 55.323 57.453 62.231 68.142 89.385 98.079 82.046 64.733 65.048 49.578 61.687 51.248 56.218 55.267 63.166 53.507 60.178 54.909 50.191 54.717 50.893 56.421 53.801 81.323 65.76 66.493 67.24 53.974 53.114 52.25 54.531 57.502 53.207 63.745 55.533 59.854 60.021 61.597 64.957 63.661 76.878 63.018 77.398 86.182 95.223 89.739 83.771 92.742 75.858 120.729 91.686 72.962 83.557 69.849 86.365 66.968 91.331 69.861 74.335 70.493 64.581 76.864 57.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0N 0N 0N 0 0N 0N 0 0N 0N 0N 0N 0N 0N 0N 0N 0N 0)
Average genome size in population (length): 35.949
Average program size in population (points): 40.871
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.415
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 241794935
--- Timings ---
Current time: 1481131483814 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 238 175 179 195 264 267 213 250 312 248 287 337 324 336 296 297 228 229 198 191 191 161 161 176 226 225 248 275 223 233 316 300 299 294 297 279 301 284 305 260 224 245 250 292 451 483 488 504 486 529 506 502 493 488 500 485 482 483 479 481 459 270 314 278 365 404 444 435 429 423 402 426 378 353 318 376 342 253 267)
Population mean number of elite cases: 26.03
Count of perfect (error zero) individuals by case: (124 238 175 179 195 264 267 213 250 312 248 287 337 324 336 296 297 228 229 198 191 191 161 161 176 226 225 248 275 223 233 316 300 299 294 297 279 301 284 305 260 224 245 250 292 451 483 488 504 486 529 506 502 493 488 500 485 482 483 479 481 459 270 314 278 365 404 444 435 429 423 402 426 378 353 318 376 342 253 267)
Population mean number of perfect (error zero) cases: 26.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5670.903
Median total errors in population: 1163
Error averages by case: (76.192 60.619 89.49 98.235 87.957 80.89 90.734 83.091 87.461 54.3 69.822 64.741 49.126 64.922 59.333 53.502 57.243 60.765 59.895 66.508 58.152 95.364 93.096 86.946 71.542 65.388 53.065 69.938 56.936 62.824 58.935 65.266 54.669 60.071 60.77 55.855 60.71 55.386 59.409 53.201 81.172 71.711 61.02 74.459 62.776 58.141 56.727 61.595 59.854 57.484 62.353 57.565 60.172 59.844 59.907 63.296 62.902 80.459 63.397 81.555 66.16 75.185 69.688 72.698 86.667 78.839 136.608 91.541 66.82 97.512 79.715 89.199 86.752 96.202 81.298 88.537 76.862 79.314 79.382 63.186)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.514
Average program size in population (points): 40.358
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.404
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 251074645
--- Timings ---
Current time: 1481131509075 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 235 203 182 214 293 285 207 260 310 243 296 344 339 343 325 296 239 242 244 204 194 171 140 177 200 213 232 266 225 235 308 302 302 300 281 283 294 276 294 257 230 249 270 264 434 481 492 494 481 511 496 484 486 469 472 465 478 476 475 483 458 232 300 277 365 380 417 420 419 403 409 426 370 382 318 396 364 261 290)
Population mean number of elite cases: 25.95
Count of perfect (error zero) individuals by case: (120 235 203 182 214 293 285 207 260 310 243 296 344 339 343 325 296 239 242 244 204 194 171 140 177 200 213 232 266 225 235 308 302 302 300 281 283 294 276 294 257 230 249 270 264 434 481 492 494 481 511 496 484 486 469 472 465 478 476 475 483 458 232 300 277 365 380 417 420 419 403 409 426 370 382 318 396 364 261 290)
Population mean number of perfect (error zero) cases: 25.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 5 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 5 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 4762.515
Median total errors in population: 1221
Error averages by case: (82.203 48.871 81.601 82.339 72.983 71.172 73.846 70.28 88.42 41.634 69.438 53.815 40.289 44.161 42.431 43.514 45.312 51.915 45.925 45.833 60.153 100.331 74.921 62.176 51.51 50.804 39.789 52.017 48.284 50.371 49.079 53.811 42.682 46.181 52.995 43.893 44.984 43.408 49.303 42.511 87.255 56.886 48.924 58.289 48.864 48.861 43.253 45.487 43.409 45.061 51.647 42.784 46.01 47.312 48.277 55.605 49.216 69.281 51.555 71.761 69.205 73.253 67.826 50.77 73.702 67.794 122.632 75.741 66.805 90.534 79.637 71.086 61.987 90.276 61.532 72.157 59.977 61.334 85.889 45.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.337
Average program size in population (points): 41.165
Average percent parens in population: 0.118
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.428
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 260510915
--- Timings ---
Current time: 1481131534004 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt integer_yank boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 244 187 172 196 273 251 186 251 307 259 294 335 351 346 313 314 252 250 172 209 166 142 151 178 218 230 228 261 209 220 303 279 289 289 286 277 287 281 297 252 212 259 279 280 458 504 516 507 505 523 529 494 500 481 487 481 487 488 484 471 441 236 298 263 369 393 454 432 424 417 436 443 376 376 321 384 350 226 274)
Population mean number of elite cases: 25.99
Count of perfect (error zero) individuals by case: (131 244 187 172 196 273 251 186 251 307 259 294 335 351 346 313 314 252 250 172 209 166 142 151 178 218 230 228 261 209 220 303 279 289 289 286 277 287 281 297 252 212 259 279 280 458 504 516 507 505 523 529 494 500 481 487 481 487 488 484 471 441 236 298 263 369 393 454 432 424 417 436 443 376 376 321 384 350 226 274)
Population mean number of perfect (error zero) cases: 25.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (exec_pop (boolean_pop) integer_dup boolean_stackdepth integer_min integer_shove integer_shove 3 exec_do*range (integer_empty integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (exec_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove integer_shove 3 exec_do*range (integer_empty integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 29
Size: 33
Percent parens: 0.121
--- Population Statistics ---
Average total errors in population: 5987.481
Median total errors in population: 1193
Error averages by case: (86.174 65.573 98.341 95.325 77.005 81.977 98.903 83.385 89.437 57.19 82.155 72.346 55.476 58.552 56.955 59.518 55.585 67.101 61.214 64.251 74.071 111.361 92.108 69.042 68.183 71.954 52.351 64.621 61.801 60.956 65.781 72.038 63.103 67.736 69.15 65.161 67.575 61.626 69.666 62.777 103.218 71.77 59.983 67.211 77.422 74.06 64.137 60.866 61.207 66.991 71.298 62.728 64.646 67.706 68.094 77.23 70.024 92.355 71.087 96.156 84.12 77.209 76.758 67.642 80.697 89.717 140.552 91.66 77.677 82.49 76.544 89.762 86.795 95.352 78.266 75.794 79.725 84.108 89.797 57.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.242
Average program size in population (points): 41.04
Average percent parens in population: 0.118
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.424
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 269907226
--- Timings ---
Current time: 1481131559086 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 248 181 164 205 292 235 191 255 282 298 321 306 323 326 317 317 263 226 236 178 188 163 142 175 210 238 239 257 196 220 295 272 290 276 273 274 278 261 287 213 206 233 249 282 458 508 502 504 512 523 522 503 480 470 478 470 473 474 470 490 461 227 308 290 403 434 484 442 463 445 431 452 412 411 347 440 401 260 293)
Population mean number of elite cases: 26.26
Count of perfect (error zero) individuals by case: (137 248 181 164 205 292 235 191 255 282 298 321 306 323 326 317 317 263 226 236 178 188 163 142 175 210 238 239 257 196 220 295 272 290 276 273 274 278 261 287 213 206 233 249 282 458 508 502 504 512 523 522 503 480 470 478 470 473 474 470 490 461 227 308 290 403 434 484 442 463 445 431 452 412 411 347 440 401 260 293)
Population mean number of perfect (error zero) cases: 26.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5564.382
Median total errors in population: 2070
Error averages by case: (75.138 61.361 93.34 106.371 82.931 74.832 92.702 82.983 103.134 59.234 72.047 64.853 49.702 54.735 51.212 52.931 46.256 66.956 52.886 55.7 72.142 103.334 79.121 70.882 72.161 73.783 45.665 52.251 58.874 60.519 59.909 63.525 52.584 55.678 52.878 50.521 50.616 50.011 53.733 50.071 106.38 64.536 57.515 62.355 73.324 66.44 53.087 55.463 54.578 56.407 60.021 56.184 56.782 58.302 60.807 68.103 62.699 87.585 62.387 91.911 70.083 71.15 77.768 57.648 77.613 79.59 136.481 83.557 83.688 77.266 73.524 91.748 79.734 92.128 81.2 86.955 65.737 77.354 99.564 59.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.631
Average program size in population (points): 41.419
Average percent parens in population: 0.118
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.412
Error (vector) diversity:			 0.478
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 279321824
--- Timings ---
Current time: 1481131584235 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 223 166 159 224 259 253 215 273 313 305 316 316 324 346 342 323 285 253 211 192 185 147 144 172 221 216 222 242 210 258 301 278 291 293 295 294 289 283 304 225 191 241 233 245 413 469 458 484 469 496 479 486 468 462 474 463 462 466 459 452 410 248 333 269 405 426 470 423 437 415 425 453 395 387 347 378 377 251 286)
Population mean number of elite cases: 25.81
Count of perfect (error zero) individuals by case: (137 223 166 159 224 259 253 215 273 313 305 316 316 324 346 342 323 285 253 211 192 185 147 144 172 221 216 222 242 210 258 301 278 291 293 295 294 289 283 304 225 191 241 233 245 413 469 458 484 469 496 479 486 468 462 474 463 462 466 459 452 410 248 333 269 405 426 470 423 437 415 425 453 395 387 347 378 377 251 286)
Population mean number of perfect (error zero) cases: 25.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6402.727
Median total errors in population: 1218
Error averages by case: (86.185 77.359 104.432 111.184 84.73 89.741 100.714 77.278 95.457 64.916 80.716 76.41 67.823 74.061 56.966 65.768 61.945 80.459 66.415 76.439 80.154 92.34 89.969 84.984 82.326 84.457 61.82 69.409 66.704 74.544 76.613 69.939 60.754 67.198 63.224 62.826 64.465 63.74 65.194 62.053 118.196 79.86 68.448 67.617 74.889 84.065 67.507 82.011 69.403 81.838 71.059 83.317 71.04 72.587 71.042 71.074 72.902 80.626 69.155 84.095 81.117 87.193 89.688 69.64 80.685 95.537 139.375 100.509 93.576 92.325 96.488 101.813 84.727 92.25 90.636 90.931 84.887 82.238 104.431 62.239)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.398
Average program size in population (points): 41.486
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.424
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 288635590
--- Timings ---
Current time: 1481131609586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 246 167 151 194 290 265 214 265 309 273 295 312 323 333 322 309 262 234 196 191 174 135 140 181 186 243 255 266 219 248 299 270 283 283 294 270 286 272 294 250 222 247 247 261 455 502 495 512 492 517 520 507 486 481 489 480 482 481 474 456 422 241 312 283 405 433 467 457 458 408 440 457 387 385 347 366 365 254 276)
Population mean number of elite cases: 26.10
Count of perfect (error zero) individuals by case: (134 246 167 151 194 290 265 214 265 309 273 295 312 323 333 322 309 262 234 196 191 174 135 140 181 186 243 255 266 219 248 299 270 283 283 294 270 286 272 294 250 222 247 247 261 455 502 495 512 492 517 520 507 486 481 489 480 482 481 474 456 422 241 312 283 405 433 467 457 458 408 440 457 387 385 347 366 365 254 276)
Population mean number of perfect (error zero) cases: 26.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5478.774
Median total errors in population: 2589/2
Error averages by case: (81.225 57.465 106.519 104.319 76.977 74.047 88.997 63.559 88.754 51.35 81.282 69.16 53.037 72.286 48.828 52.547 48.984 55.914 50.982 61.003 64.135 108.384 70.14 65.714 66.584 73.679 55.332 64.913 56.39 58.532 64.241 60.342 53.784 61.876 53.773 53.714 53.323 53.95 55.437 52.336 109.372 66.931 61.896 62.0 55.293 68.876 54.594 66.855 56.095 66.712 63.645 68.503 59.372 59.682 60.348 62.076 61.418 73.804 60.53 75.653 74.217 81.239 72.802 49.818 65.705 79.721 122.609 91.714 74.829 65.601 72.77 81.377 66.239 88.174 67.795 72.396 74.135 83.959 88.32 57.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.082
Average program size in population (points): 41.016
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.427
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 297952406
--- Timings ---
Current time: 1481131634527 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 265 207 202 205 266 255 214 253 281 267 272 302 302 332 309 294 255 225 209 193 185 140 148 181 190 227 235 262 215 232 291 286 288 277 279 287 288 267 281 242 227 238 226 265 417 462 454 474 452 493 485 490 470 473 474 474 470 470 462 447 412 247 297 280 388 373 420 422 435 390 415 441 405 368 331 368 368 271 266)
Population mean number of elite cases: 25.39
Count of perfect (error zero) individuals by case: (159 265 207 202 205 266 255 214 253 281 267 272 302 302 332 309 294 255 225 209 193 185 140 148 181 190 227 235 262 215 232 291 286 288 277 279 287 288 267 281 242 227 238 226 265 417 462 454 474 452 493 485 490 470 473 474 474 470 470 462 447 412 247 297 280 388 373 420 422 435 390 415 441 405 368 331 368 368 271 266)
Population mean number of perfect (error zero) cases: 25.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6721.271
Median total errors in population: 2383/2
Error averages by case: (93.11 83.332 108.371 110.21 82.901 84.915 102.933 77.078 100.215 75.302 98.74 89.836 71.171 82.7 67.464 71.057 65.901 78.874 69.638 79.343 91.097 119.323 94.139 84.971 80.273 79.494 58.982 89.831 75.745 82.255 83.692 76.211 68.14 74.065 70.828 69.002 71.629 69.329 74.157 70.845 108.283 91.496 78.551 81.165 78.635 85.849 69.679 76.139 70.086 77.455 76.839 76.857 73.44 74.47 73.047 76.922 74.354 87.076 76.151 89.776 88.137 93.199 86.758 80.629 94.617 103.419 150.598 97.685 91.65 88.414 85.725 95.071 87.798 85.845 70.559 89.912 97.829 95.192 93.404 71.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.787
Average program size in population (points): 40.809
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.436
Error (vector) diversity:			 0.505
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 307105152
--- Timings ---
Current time: 1481131659233 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 250 194 153 199 264 251 189 261 296 280 294 325 328 329 334 296 255 234 211 198 184 163 139 179 201 230 224 270 217 257 301 256 279 278 271 261 270 252 288 262 233 250 261 259 440 488 482 492 478 523 506 509 491 482 489 485 486 489 482 447 402 216 302 289 382 378 462 428 439 424 426 449 398 369 310 349 352 256 261)
Population mean number of elite cases: 25.73
Count of perfect (error zero) individuals by case: (138 250 194 153 199 264 251 189 261 296 280 294 325 328 329 334 296 255 234 211 198 184 163 139 179 201 230 224 270 217 257 301 256 279 278 271 261 270 252 288 262 233 250 261 259 440 488 482 492 478 523 506 509 491 482 489 485 486 489 482 447 402 216 302 289 382 378 462 428 439 424 426 449 398 369 310 349 352 256 261)
Population mean number of perfect (error zero) cases: 25.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6241.259
Median total errors in population: 2257/2
Error averages by case: (84.176 77.599 101.56 106.389 80.736 84.957 83.729 72.088 96.584 63.324 97.994 91.172 68.135 70.438 57.459 65.385 61.719 69.905 65.586 68.955 76.071 115.408 92.923 78.548 85.575 83.664 57.339 74.536 67.046 68.92 89.639 67.318 60.453 68.079 61.223 61.489 64.569 60.862 64.808 61.32 105.419 88.56 76.26 64.997 69.364 76.708 62.087 68.765 65.578 70.484 71.161 71.341 69.742 67.234 71.769 68.85 70.141 83.656 67.821 85.662 74.175 80.281 83.803 76.992 71.758 88.07 143.851 89.533 88.82 93.572 80.65 87.434 85.072 97.289 71.73 85.311 88.08 91.877 94.911 64.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.383
Average program size in population (points): 41.442
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.418
Error (vector) diversity:			 0.509
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 316384484
--- Timings ---
Current time: 1481131684376 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 267 229 173 199 270 264 210 279 319 307 316 342 344 352 357 315 271 234 212 209 185 174 185 186 230 262 226 286 247 273 316 307 303 301 293 293 302 285 310 242 231 232 279 274 455 485 486 483 471 512 494 495 473 470 477 472 474 474 470 464 421 259 321 297 398 369 425 420 424 439 416 411 366 370 324 356 355 259 243)
Population mean number of elite cases: 26.36
Count of perfect (error zero) individuals by case: (142 267 229 173 199 270 264 210 279 319 307 316 342 344 352 357 315 271 234 212 209 185 174 185 186 230 262 226 286 247 273 316 307 303 301 293 293 302 285 310 242 231 232 279 274 455 485 486 483 471 512 494 495 473 470 477 472 474 474 470 464 421 259 321 297 398 369 425 420 424 439 416 411 366 370 324 356 355 259 243)
Population mean number of perfect (error zero) cases: 26.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5491.322
Median total errors in population: 2287/2
Error averages by case: (63.182 70.455 94.347 103.259 80.912 70.597 68.884 75.11 90.436 54.355 85.04 76.681 46.449 64.568 48.724 67.419 52.938 56.98 60.756 62.809 72.04 94.324 73.011 84.126 62.602 70.7 50.81 58.178 56.902 59.737 66.341 58.567 52.991 57.558 52.901 56.26 59.471 54.634 57.642 53.349 110.195 77.169 65.708 57.176 66.509 62.119 54.885 57.041 56.488 58.634 62.423 58.784 61.468 63.146 63.027 63.346 63.307 72.841 62.735 75.174 61.2 63.262 68.682 70.612 68.647 69.499 121.904 73.519 100.746 78.38 67.571 81.78 95.883 81.306 61.283 73.926 79.901 73.255 82.637 59.109)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.89
Average program size in population (points): 42.01
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.411
Error (vector) diversity:			 0.494
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 325790844
--- Timings ---
Current time: 1481131709461 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 265 205 141 200 266 274 224 253 308 286 300 319 323 331 339 314 238 218 227 180 161 164 157 192 211 261 232 265 205 229 290 260 279 266 279 250 266 245 283 227 202 229 237 271 464 491 493 486 490 515 494 507 467 463 476 465 469 470 467 482 438 283 318 297 433 431 450 416 437 410 409 409 371 363 330 367 344 285 259)
Population mean number of elite cases: 25.76
Count of perfect (error zero) individuals by case: (137 265 205 141 200 266 274 224 253 308 286 300 319 323 331 339 314 238 218 227 180 161 164 157 192 211 261 232 265 205 229 290 260 279 266 279 250 266 245 283 227 202 229 237 271 464 491 493 486 490 515 494 507 467 463 476 465 469 470 467 482 438 283 318 297 433 431 450 416 437 410 409 409 371 363 330 367 344 285 259)
Population mean number of perfect (error zero) cases: 25.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6440.257
Median total errors in population: 1130
Error averages by case: (74.157 82.373 114.4 117.34 84.687 101.736 87.8 83.247 92.179 73.387 88.738 88.746 71.011 71.264 65.527 68.538 63.541 83.897 69.534 79.607 82.088 117.366 84.985 107.113 85.378 77.761 66.391 74.893 78.736 76.456 70.644 66.927 64.765 65.093 63.708 63.259 71.842 64.865 66.857 64.759 108.253 85.465 77.919 71.111 71.009 65.723 63.209 65.696 64.966 65.565 67.58 68.257 68.657 72.224 70.363 71.972 72.421 87.143 72.996 88.788 73.14 76.199 88.573 76.669 82.669 82.488 127.457 92.369 103.775 105.303 87.618 101.821 96.086 93.183 81.421 86.726 89.974 84.712 81.384 73.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.256
Average program size in population (points): 41.503
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.445
Error (vector) diversity:			 0.527
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 335019614
--- Timings ---
Current time: 1481131734603 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 264 196 143 172 247 246 211 257 282 306 316 335 333 341 337 335 259 228 199 188 189 160 166 218 217 256 256 304 250 262 309 268 286 275 287 275 271 268 291 236 232 239 227 278 466 493 488 499 477 516 505 506 474 474 485 476 481 480 477 475 433 244 333 289 425 420 427 444 442 451 439 448 425 384 364 358 341 289 293)
Population mean number of elite cases: 26.37
Count of perfect (error zero) individuals by case: (136 264 196 143 172 247 246 211 257 282 306 316 335 333 341 337 335 259 228 199 188 189 160 166 218 217 256 256 304 250 262 309 268 286 275 287 275 271 268 291 236 232 239 227 278 466 493 488 499 477 516 505 506 474 474 485 476 481 480 477 475 433 244 333 289 425 420 427 444 442 451 439 448 425 384 364 358 341 289 293)
Population mean number of perfect (error zero) cases: 26.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_stackdepth boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_stackdepth boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5621.54
Median total errors in population: 2271/2
Error averages by case: (67.227 76.385 94.466 94.376 76.747 87.604 76.632 60.902 76.072 61.428 75.333 77.924 53.719 66.712 54.286 54.505 56.181 56.457 65.051 67.158 68.15 98.29 64.735 82.954 66.337 63.531 53.457 61.613 55.438 62.357 71.972 60.237 56.831 59.145 60.419 58.399 71.355 61.519 64.107 62.038 103.216 76.381 58.155 66.403 66.402 64.878 58.644 64.955 60.837 69.03 65.673 67.378 63.986 69.347 65.139 67.589 66.738 80.669 66.479 80.939 60.252 68.258 73.77 63.665 87.621 66.644 117.5 85.382 89.666 97.324 66.488 77.613 86.769 70.913 65.446 66.57 89.971 74.628 72.345 55.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.816
Average program size in population (points): 42.041
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.431
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 344317857
--- Timings ---
Current time: 1481131759746 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 274 218 137 201 262 257 222 290 298 296 306 322 319 351 334 320 272 231 203 193 177 146 147 202 230 251 237 279 219 247 296 269 283 272 279 279 266 263 282 199 213 242 246 280 471 501 493 508 486 524 509 506 479 473 475 476 480 478 473 449 401 242 353 278 453 421 449 460 450 429 434 445 401 392 333 347 318 291 257)
Population mean number of elite cases: 26.19
Count of perfect (error zero) individuals by case: (144 274 218 137 201 262 257 222 290 298 296 306 322 319 351 334 320 272 231 203 193 177 146 147 202 230 251 237 279 219 247 296 269 283 272 279 279 266 263 282 199 213 242 246 280 471 501 493 508 486 524 509 506 479 473 475 476 480 478 473 449 401 242 353 278 453 421 449 460 450 429 434 445 401 392 333 347 318 291 257)
Population mean number of perfect (error zero) cases: 26.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5698.936
Median total errors in population: 2361/2
Error averages by case: (77.237 64.379 96.329 115.387 85.635 92.724 87.007 70.271 77.317 60.486 82.376 79.609 60.208 69.456 56.268 55.224 56.33 61.14 63.933 80.901 64.148 120.307 80.719 89.53 59.563 66.495 56.955 66.293 59.838 61.606 63.655 55.246 55.637 56.353 54.485 54.564 62.665 59.328 61.88 55.297 100.274 72.531 67.327 61.53 63.792 66.614 55.348 59.881 55.391 64.83 61.856 64.263 61.781 61.599 61.316 67.89 65.627 81.102 65.963 80.474 71.226 77.27 73.73 61.558 75.742 68.535 121.578 78.401 94.714 88.497 77.557 82.693 85.83 73.222 69.536 72.655 86.177 79.512 71.35 52.983)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.345
Average program size in population (points): 42.627
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.437
Error (vector) diversity:			 0.522
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 353616148
--- Timings ---
Current time: 1481131785181 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 300 203 146 178 248 238 218 277 300 272 278 323 319 311 332 316 250 226 216 199 194 167 150 199 206 252 256 304 227 254 305 272 304 287 310 299 290 292 308 203 227 240 243 287 443 457 457 467 451 496 475 480 463 464 463 464 469 465 465 490 443 279 359 293 435 420 461 455 447 438 450 452 391 378 330 332 314 281 272)
Population mean number of elite cases: 26.06
Count of perfect (error zero) individuals by case: (138 300 203 146 178 248 238 218 277 300 272 278 323 319 311 332 316 250 226 216 199 194 167 150 199 206 252 256 304 227 254 305 272 304 287 310 299 290 292 308 203 227 240 243 287 443 457 457 467 451 496 475 480 463 464 463 464 469 465 465 490 443 279 359 293 435 420 461 455 447 438 450 452 391 378 330 332 314 281 272)
Population mean number of perfect (error zero) cases: 26.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5810.818
Median total errors in population: 1153
Error averages by case: (82.173 62.404 112.411 121.329 78.738 86.78 91.031 73.402 88.09 56.407 89.003 78.195 60.957 66.172 57.66 56.844 55.336 64.039 59.05 67.693 71.136 118.421 93.81 86.418 61.394 72.797 51.971 67.868 61.357 62.871 68.646 59.453 59.604 64.496 56.615 61.154 66.957 60.259 61.116 59.917 85.368 75.562 61.701 68.68 71.726 64.409 59.864 59.41 62.528 63.082 66.928 62.129 63.895 62.027 66.127 66.059 69.902 81.601 66.714 81.198 73.14 71.212 63.674 69.52 84.689 82.552 114.572 86.515 89.708 82.608 72.764 74.756 91.027 78.4 63.566 74.847 88.187 78.554 73.278 64.365)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.241
Average program size in population (points): 41.464
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.427
Error (vector) diversity:			 0.509
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 362882144
--- Timings ---
Current time: 1481131810630 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 305 209 148 199 239 236 221 299 313 312 308 345 355 345 327 327 256 236 209 204 195 161 130 190 205 234 248 273 226 245 271 245 270 252 262 274 264 261 261 231 236 241 255 302 453 484 476 481 467 501 495 498 474 481 483 482 482 476 473 485 446 272 319 310 419 414 441 434 461 421 438 462 430 382 337 324 317 275 265)
Population mean number of elite cases: 26.15
Count of perfect (error zero) individuals by case: (162 305 209 148 199 239 236 221 299 313 312 308 345 355 345 327 327 256 236 209 204 195 161 130 190 205 234 248 273 226 245 271 245 270 252 262 274 264 261 261 231 236 241 255 302 453 484 476 481 467 501 495 498 474 481 483 482 482 476 473 485 446 272 319 310 419 414 441 434 461 421 438 462 430 382 337 324 317 275 265)
Population mean number of perfect (error zero) cases: 26.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5767.072
Median total errors in population: 1132
Error averages by case: (79.095 67.293 85.355 113.413 80.76 93.745 95.059 75.145 89.075 55.914 81.407 67.024 59.912 62.863 62.41 62.013 67.019 66.01 65.878 70.038 72.027 100.428 87.936 93.627 70.767 68.831 50.151 65.052 62.296 61.333 76.704 66.759 59.94 61.906 53.683 56.276 57.276 54.089 56.014 60.378 90.225 74.813 61.73 68.359 75.439 64.12 59.427 60.499 58.126 65.518 68.536 59.407 58.75 59.552 62.629 60.805 64.93 73.025 63.687 73.579 74.068 79.122 61.629 70.642 73.524 71.613 118.643 90.506 92.889 86.728 83.853 84.943 92.864 75.149 77.553 83.927 79.213 75.721 73.688 62.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.543
Average program size in population (points): 41.755
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.436
Error (vector) diversity:			 0.527
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 372206755
--- Timings ---
Current time: 1481131835355 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 313 218 147 207 268 267 251 314 323 291 305 325 321 332 347 325 255 254 217 207 157 153 151 219 215 253 268 292 253 277 325 266 304 294 291 294 290 300 310 245 224 254 237 282 449 487 481 486 469 485 493 490 456 448 453 448 462 456 457 474 436 278 317 325 443 436 453 447 463 427 448 478 433 375 328 328 322 284 256)
Population mean number of elite cases: 26.58
Count of perfect (error zero) individuals by case: (163 313 218 147 207 268 267 251 314 323 291 305 325 321 332 347 325 255 254 217 207 157 153 151 219 215 253 268 292 253 277 325 266 304 294 291 294 290 300 310 245 224 254 237 282 449 487 481 486 469 485 493 490 456 448 453 448 462 456 457 474 436 278 317 325 443 436 453 447 463 427 448 478 433 375 328 328 322 284 256)
Population mean number of perfect (error zero) cases: 26.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5566.219
Median total errors in population: 1132
Error averages by case: (77.105 55.264 91.926 99.446 81.578 88.738 81.64 74.195 80.022 51.357 82.314 72.866 49.649 67.805 60.706 55.575 57.18 63.565 56.305 70.29 67.058 100.4 81.691 82.43 61.087 70.436 50.942 61.081 61.225 64.398 71.679 56.02 53.101 59.782 52.263 55.865 64.475 58.926 57.05 59.944 92.114 66.47 54.995 64.371 65.258 68.292 57.848 68.735 62.051 69.982 69.116 68.525 61.954 60.998 64.97 69.361 75.364 86.404 67.359 81.228 64.13 72.162 59.645 68.173 83.113 63.596 96.405 84.455 86.54 81.397 74.751 76.476 80.754 82.104 72.479 79.564 69.949 68.214 66.195 53.343)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.467
Average program size in population (points): 41.683
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.434
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 381578837
--- Timings ---
Current time: 1481131860685 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 320 199 157 190 270 258 238 315 330 295 315 339 325 331 337 308 241 241 233 227 178 165 154 172 219 256 257 299 239 253 318 265 314 281 305 299 292 289 300 225 247 273 262 329 463 512 500 506 487 516 512 513 471 478 489 483 491 476 480 471 429 253 314 317 395 411 427 438 417 423 415 471 413 384 333 336 309 278 257)
Population mean number of elite cases: 26.70
Count of perfect (error zero) individuals by case: (177 320 199 157 190 270 258 238 315 330 295 315 339 325 331 337 308 241 241 233 227 178 165 154 172 219 256 257 299 239 253 318 265 314 281 305 299 292 289 300 225 247 273 262 329 463 512 500 506 487 516 512 513 471 478 489 483 491 476 480 471 429 253 314 317 395 411 427 438 417 423 415 471 413 384 333 336 309 278 257)
Population mean number of perfect (error zero) cases: 26.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5390.767
Median total errors in population: 1218
Error averages by case: (68.097 60.375 78.402 117.411 83.676 85.812 80.087 70.089 92.994 52.663 64.369 64.63 54.772 64.628 64.893 50.512 52.512 61.783 55.872 63.112 69.004 112.291 87.773 84.426 58.372 57.36 54.673 57.725 58.497 62.15 73.317 54.827 48.519 52.172 51.919 51.484 54.8 55.246 54.412 51.194 78.148 67.604 64.453 67.799 73.637 56.33 50.073 55.768 55.064 54.595 67.199 54.084 59.615 53.447 59.366 63.554 71.129 82.364 64.565 78.084 72.125 65.201 53.713 61.659 69.665 67.51 107.65 63.588 77.677 91.475 66.042 85.639 82.861 78.216 76.266 70.402 81.055 79.387 73.218 53.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.388
Average program size in population (points): 41.617
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.413
Error (vector) diversity:			 0.508
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 390870011
--- Timings ---
Current time: 1481131885886 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 328 221 166 201 281 288 257 301 318 283 293 311 309 325 340 333 273 260 227 206 166 152 165 186 187 263 267 300 259 261 311 260 292 281 281 274 291 284 270 239 236 238 226 278 432 494 489 496 475 512 508 499 477 468 470 470 480 476 476 473 432 265 326 317 407 409 403 392 412 389 389 445 382 397 314 350 318 311 274)
Population mean number of elite cases: 26.27
Count of perfect (error zero) individuals by case: (158 328 221 166 201 281 288 257 301 318 283 293 311 309 325 340 333 273 260 227 206 166 152 165 186 187 263 267 300 259 261 311 260 292 281 281 274 291 284 270 239 236 238 226 278 432 494 489 496 475 512 508 499 477 468 470 470 480 476 476 473 432 265 326 317 407 409 403 392 412 389 389 445 382 397 314 350 318 311 274)
Population mean number of perfect (error zero) cases: 26.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 52
Mean: 0.65
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 6062.391
Median total errors in population: 2437/2
Error averages by case: (74.157 57.396 95.305 120.41 91.671 91.725 88.725 77.087 96.956 68.937 85.283 76.914 59.945 75.696 73.347 60.17 58.362 68.614 69.114 74.531 66.077 94.424 87.766 96.224 76.258 72.62 61.912 66.435 71.121 66.494 73.87 66.095 63.259 63.02 62.191 62.952 65.518 63.505 66.718 65.249 91.152 68.831 62.282 75.753 79.375 73.087 60.895 67.862 65.134 69.061 70.888 66.332 68.935 64.795 70.161 76.583 73.115 83.577 70.971 81.781 75.15 68.234 59.703 62.705 79.59 73.516 112.707 87.577 84.745 100.475 78.109 90.809 90.851 84.166 95.328 99.891 82.168 81.507 78.961 59.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.688
Average program size in population (points): 42.028
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.433
Error (vector) diversity:			 0.505
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 400190764
--- Timings ---
Current time: 1481131910830 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 343 237 171 197 290 283 276 331 339 285 284 343 336 353 338 315 267 278 232 196 147 138 148 182 218 248 266 295 253 273 313 282 304 281 281 277 291 291 274 218 262 249 246 323 442 516 493 520 492 533 530 517 487 485 494 488 493 486 489 513 476 311 297 282 412 433 440 448 467 439 423 501 412 380 314 345 315 277 249)
Population mean number of elite cases: 27.12
Count of perfect (error zero) individuals by case: (165 343 237 171 197 290 283 276 331 339 285 284 343 336 353 338 315 267 278 232 196 147 138 148 182 218 248 266 295 253 273 313 282 304 281 281 277 291 291 274 218 262 249 246 323 442 516 493 520 492 533 530 517 487 485 494 488 493 486 489 513 476 311 297 282 412 433 440 448 467 439 423 501 412 380 314 345 315 277 249)
Population mean number of perfect (error zero) cases: 27.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5566.174
Median total errors in population: 1218
Error averages by case: (70.129 62.977 87.394 108.636 87.874 79.173 81.864 83.996 81.477 65.717 71.584 58.697 57.061 61.315 63.458 51.361 52.414 58.603 57.318 66.466 67.123 88.583 79.129 83.594 65.948 65.057 58.441 59.186 54.506 60.976 70.802 58.605 55.828 57.69 54.482 55.039 56.497 57.843 59.425 59.022 88.433 70.177 60.128 66.5 64.51 60.143 53.638 60.935 58.225 60.576 65.708 61.916 65.109 57.264 70.605 73.51 76.355 86.651 69.568 82.363 64.064 65.137 64.608 71.916 82.643 75.572 98.854 71.819 73.746 92.581 74.249 81.778 80.928 83.426 93.135 81.212 76.822 72.694 73.883 59.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.061
Average program size in population (points): 41.061
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.426
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 409602501
--- Timings ---
Current time: 1481131939913 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 324 234 181 202 287 263 261 310 312 292 299 302 323 338 341 325 273 263 214 200 155 138 161 163 212 243 256 292 261 282 330 288 329 304 313 304 314 313 302 239 253 265 244 293 422 459 445 463 448 481 475 473 453 450 454 451 459 455 458 514 468 307 318 313 405 418 416 453 471 431 410 458 405 384 339 376 334 295 279)
Population mean number of elite cases: 26.61
Count of perfect (error zero) individuals by case: (176 324 234 181 202 287 263 261 310 312 292 299 302 323 338 341 325 273 263 214 200 155 138 161 163 212 243 256 292 261 282 330 288 329 304 313 304 314 313 302 239 253 265 244 293 422 459 445 463 448 481 475 473 453 450 454 451 459 455 458 514 468 307 318 313 405 418 416 453 471 431 410 458 405 384 339 376 334 295 279)
Population mean number of perfect (error zero) cases: 26.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5337.059
Median total errors in population: 1172
Error averages by case: (68.137 64.392 92.304 99.465 94.745 84.224 83.957 70.055 77.134 56.0 71.339 56.93 50.827 66.788 65.975 57.221 57.086 64.193 51.632 59.427 62.112 99.422 66.196 70.229 63.555 69.876 60.071 68.101 64.25 57.234 69.607 53.852 51.327 54.958 53.417 53.723 55.064 52.758 56.233 53.923 88.277 64.765 54.754 61.067 59.814 57.613 51.878 54.589 56.447 56.376 61.869 56.123 59.639 55.913 62.707 64.734 67.198 77.561 63.997 76.895 63.094 64.152 59.564 57.73 82.459 77.556 109.655 68.665 67.552 86.549 60.968 86.841 73.978 82.147 85.843 74.799 64.152 69.479 65.321 56.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.526
Average program size in population (points): 41.729
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.435
Error (vector) diversity:			 0.506
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 418881107
--- Timings ---
Current time: 1481131966253 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 356 235 181 217 300 281 253 327 332 315 312 333 330 342 346 318 284 278 240 222 165 158 154 178 223 253 255 299 249 278 338 271 318 292 308 297 302 311 305 241 225 237 217 275 429 473 446 470 448 483 481 475 453 456 467 456 465 450 454 532 463 311 311 310 446 435 412 424 435 398 418 462 410 392 352 348 342 300 280)
Population mean number of elite cases: 26.82
Count of perfect (error zero) individuals by case: (186 356 235 181 217 300 281 253 327 332 315 312 333 330 342 346 318 284 278 240 222 165 158 154 178 223 253 255 299 249 278 338 271 318 292 308 297 302 311 305 241 225 237 217 275 429 473 446 470 448 483 481 475 453 456 467 456 465 450 454 532 463 311 311 310 446 435 412 424 435 398 418 462 410 392 352 348 342 300 280)
Population mean number of perfect (error zero) cases: 26.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5938.543
Median total errors in population: 2363/2
Error averages by case: (74.126 57.4 87.307 99.401 93.625 100.829 93.836 83.224 80.163 55.571 85.266 64.748 62.598 74.538 66.09 53.333 55.381 61.923 60.471 67.153 57.111 106.383 83.926 79.301 71.435 82.337 58.912 67.499 61.653 65.343 73.802 62.35 60.455 64.98 57.972 61.305 65.475 59.883 64.985 59.519 94.161 81.584 71.208 62.864 74.94 67.544 58.194 64.475 63.81 68.833 78.758 66.102 71.575 63.33 71.878 73.063 81.24 89.078 75.074 87.258 72.036 69.149 69.561 68.743 83.596 71.455 100.473 69.559 80.672 103.585 80.198 103.538 92.673 86.128 92.256 88.55 90.996 75.246 75.129 58.422)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.372
Average program size in population (points): 41.645
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.409
Error (vector) diversity:			 0.478
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 428153448
--- Timings ---
Current time: 1481131992288 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 330 249 172 229 290 274 274 296 326 297 304 323 344 362 337 317 287 268 214 199 167 160 146 162 208 240 247 303 251 279 328 303 306 293 316 304 302 322 288 246 249 252 273 328 446 479 466 499 481 494 509 506 495 495 503 495 503 491 493 507 472 307 338 303 431 418 407 391 406 392 407 430 390 401 341 366 352 324 294)
Population mean number of elite cases: 27.17
Count of perfect (error zero) individuals by case: (175 330 249 172 229 290 274 274 296 326 297 304 323 344 362 337 317 287 268 214 199 167 160 146 162 208 240 247 303 251 279 328 303 306 293 316 304 302 322 288 246 249 252 273 328 446 479 466 499 481 494 509 506 495 495 503 495 503 491 493 507 472 307 338 303 431 418 407 391 406 392 407 430 390 401 341 366 352 324 294)
Population mean number of perfect (error zero) cases: 27.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5778.081
Median total errors in population: 2221/2
Error averages by case: (79.066 64.351 103.226 102.27 78.795 90.991 89.937 76.268 87.117 64.759 86.667 69.621 61.235 73.234 64.826 64.173 56.566 59.998 62.292 73.285 65.059 101.396 80.946 88.353 73.5 69.581 62.513 71.186 62.016 68.417 77.847 58.104 54.605 57.384 55.279 54.754 57.504 53.562 58.6 56.004 99.229 65.741 64.982 79.518 64.526 64.264 54.687 60.445 58.035 62.83 71.141 61.48 64.373 60.548 62.161 66.703 78.301 73.858 72.75 71.628 67.041 63.053 77.827 67.703 85.544 80.563 99.619 74.744 81.048 90.952 66.102 90.664 83.764 95.06 81.817 82.547 79.23 74.844 76.295 67.177)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.789
Average program size in population (points): 42.215
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.398
Error (vector) diversity:			 0.475
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 437424463
--- Timings ---
Current time: 1481132018847 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 294 253 200 249 295 309 263 307 321 291 304 318 344 345 327 317 275 259 220 227 178 165 150 185 215 243 255 302 250 263 295 271 310 284 296 279 297 293 276 248 240 272 254 353 447 480 470 495 470 494 500 500 493 491 492 486 494 491 489 521 465 291 305 274 411 401 389 396 410 375 391 408 391 404 364 363 351 313 263)
Population mean number of elite cases: 26.84
Count of perfect (error zero) individuals by case: (172 294 253 200 249 295 309 263 307 321 291 304 318 344 345 327 317 275 259 220 227 178 165 150 185 215 243 255 302 250 263 295 271 310 284 296 279 297 293 276 248 240 272 254 353 447 480 470 495 470 494 500 500 493 491 492 486 494 491 489 521 465 291 305 274 411 401 389 396 410 375 391 408 391 404 364 363 351 313 263)
Population mean number of perfect (error zero) cases: 26.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte exec_yankdup boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte exec_yankdup boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5490.984
Median total errors in population: 1108
Error averages by case: (74.103 69.533 85.28 100.59 73.824 68.413 74.912 68.393 70.417 59.943 76.14 66.147 56.21 65.618 57.073 61.018 57.182 59.619 63.594 66.285 64.252 105.331 69.473 66.484 69.419 66.1 56.969 64.543 65.811 61.467 75.434 62.732 55.264 62.786 57.925 59.509 60.146 57.788 62.67 57.243 78.353 63.754 58.177 62.938 66.676 65.318 59.228 62.889 59.817 64.958 72.015 65.013 73.177 60.97 69.968 73.298 68.782 79.7 65.474 80.746 64.99 62.19 69.759 60.804 72.792 72.688 96.558 68.782 65.955 73.839 63.251 82.761 76.19 93.329 78.602 71.707 89.712 73.092 68.52 58.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.777
Average program size in population (points): 42.271
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.401
Error (vector) diversity:			 0.48
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 446567022
--- Timings ---
Current time: 1481132047303 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 357 265 204 211 283 299 271 336 332 301 315 336 348 364 357 340 299 308 228 215 170 170 141 183 239 255 274 322 263 304 324 292 320 303 315 296 312 313 303 245 236 237 236 333 438 480 485 495 480 501 508 494 489 491 494 493 499 496 494 532 485 325 341 305 451 439 439 411 469 416 451 477 420 420 370 388 372 308 296)
Population mean number of elite cases: 27.95
Count of perfect (error zero) individuals by case: (147 357 265 204 211 283 299 271 336 332 301 315 336 348 364 357 340 299 308 228 215 170 170 141 183 239 255 274 322 263 304 324 292 320 303 315 296 312 313 303 245 236 237 236 333 438 480 485 495 480 501 508 494 489 491 494 493 499 496 494 532 485 325 341 305 451 439 439 411 469 416 451 477 420 420 370 388 372 308 296)
Population mean number of perfect (error zero) cases: 27.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 4329.196
Median total errors in population: 1098
Error averages by case: (67.097 57.433 76.368 78.335 68.71 69.114 62.613 63.066 66.945 49.847 67.106 50.073 41.751 52.433 50.383 40.184 38.625 47.075 47.03 55.549 48.081 83.347 64.072 63.193 59.36 46.489 47.723 53.845 47.941 46.662 50.007 41.638 36.674 42.234 36.091 37.456 37.835 39.198 40.656 37.458 74.358 52.668 39.909 46.326 51.895 50.482 36.731 40.685 40.909 44.16 47.422 43.798 48.67 43.193 47.436 47.307 52.624 58.378 44.968 55.073 62.024 52.129 53.591 49.714 70.525 56.501 93.413 50.608 64.828 66.648 58.827 75.636 74.666 72.27 63.231 64.577 59.933 54.074 57.995 51.317)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.91
Average program size in population (points): 42.266
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.396
Error (vector) diversity:			 0.486
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 455999229
--- Timings ---
Current time: 1481132073409 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 355 241 193 212 294 265 274 310 300 311 311 301 320 339 351 352 270 268 229 194 175 173 135 167 229 248 279 301 246 275 317 267 314 279 290 276 298 292 273 252 240 231 258 335 476 495 493 505 491 516 531 509 494 489 493 490 501 495 493 509 455 312 324 267 440 430 412 405 431 403 435 458 457 420 379 402 362 336 295)
Population mean number of elite cases: 27.40
Count of perfect (error zero) individuals by case: (155 355 241 193 212 294 265 274 310 300 311 311 301 320 339 351 352 270 268 229 194 175 173 135 167 229 248 279 301 246 275 317 267 314 279 290 276 298 292 273 252 240 231 258 335 476 495 493 505 491 516 531 509 494 489 493 490 501 495 493 509 455 312 324 267 440 430 412 405 431 403 435 458 457 420 379 402 362 336 295)
Population mean number of perfect (error zero) cases: 27.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5347.84
Median total errors in population: 1141
Error averages by case: (71.119 56.375 92.298 99.265 85.747 75.99 81.115 69.535 69.36 61.0 67.468 60.016 59.261 66.432 59.962 53.708 56.812 60.088 59.643 64.983 62.148 91.465 68.226 75.282 60.505 57.503 58.626 59.18 66.968 63.083 63.911 51.774 53.097 58.074 54.708 56.103 56.408 59.045 58.172 57.861 68.514 54.944 57.574 68.857 63.397 65.11 54.158 62.951 59.49 65.802 65.462 66.906 69.173 63.157 65.17 68.61 74.1 83.387 67.614 80.506 69.082 63.178 71.622 57.858 105.599 72.582 114.381 56.71 70.301 68.016 68.033 81.936 76.911 70.386 69.592 58.388 67.337 67.824 54.373 56.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.223
Average program size in population (points): 42.757
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.411
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 465322239
--- Timings ---
Current time: 1481132101952 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 361 286 182 220 288 294 263 313 335 300 324 325 347 348 361 342 286 279 241 207 161 167 135 168 194 222 238 279 256 277 297 277 312 286 285 286 282 289 262 214 257 241 253 294 404 454 467 479 456 490 492 485 489 480 484 478 491 488 486 496 442 323 301 272 425 408 409 401 440 404 434 482 429 403 348 374 357 306 313)
Population mean number of elite cases: 26.89
Count of perfect (error zero) individuals by case: (162 361 286 182 220 288 294 263 313 335 300 324 325 347 348 361 342 286 279 241 207 161 167 135 168 194 222 238 279 256 277 297 277 312 286 285 286 282 289 262 214 257 241 253 294 404 454 467 479 456 490 492 485 489 480 484 478 491 488 486 496 442 323 301 272 425 408 409 401 440 404 434 482 429 403 348 374 357 306 313)
Population mean number of perfect (error zero) cases: 26.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5518.308
Median total errors in population: 1141
Error averages by case: (86.104 59.451 92.18 104.461 84.875 76.913 76.749 75.373 80.439 61.841 71.247 64.012 56.311 57.734 62.153 55.945 57.074 60.892 61.365 63.389 56.171 98.354 75.9 87.239 60.331 59.712 62.61 64.287 66.315 61.267 66.342 62.98 54.649 60.493 57.587 58.024 58.391 58.855 59.567 59.462 80.394 69.99 55.676 67.581 64.806 60.449 54.842 62.173 57.72 64.32 65.454 63.239 72.112 61.637 67.289 67.778 74.63 74.302 67.04 72.036 73.077 69.188 64.616 63.886 83.588 74.653 108.554 64.796 89.914 68.745 65.929 77.617 81.566 72.267 76.425 71.594 89.465 72.778 68.595 60.543)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.293
Average program size in population (points): 42.542
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.437
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 474543580
--- Timings ---
Current time: 1481132130560 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 350 285 192 218 290 280 243 308 340 282 312 304 305 307 344 310 269 261 264 205 172 185 128 175 225 252 275 323 238 272 302 274 323 277 291 287 302 280 280 208 250 221 273 311 400 443 459 468 455 486 471 489 464 471 471 471 474 469 466 510 464 325 312 281 423 423 407 416 420 392 445 476 439 398 363 382 347 319 275)
Population mean number of elite cases: 26.72
Count of perfect (error zero) individuals by case: (155 350 285 192 218 290 280 243 308 340 282 312 304 305 307 344 310 269 261 264 205 172 185 128 175 225 252 275 323 238 272 302 274 323 277 291 287 302 280 280 208 250 221 273 311 400 443 459 468 455 486 471 489 464 471 471 471 474 469 466 510 464 325 312 281 423 423 407 416 420 392 445 476 439 398 363 382 347 319 275)
Population mean number of perfect (error zero) cases: 26.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (boolean_pop boolean_pop integer_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and integer_gte integer_gte integer_fromboolean boolean_pop exec_rot () (integer_dup integer_lte in1 boolean_shove) (boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 5830.037
Median total errors in population: 1156
Error averages by case: (78.165 61.495 103.348 118.511 87.03 75.202 77.066 75.629 85.237 59.492 87.579 73.146 62.188 60.104 69.175 61.596 65.194 60.363 71.018 75.0 58.133 107.337 77.071 77.361 61.382 72.668 65.844 70.203 69.738 61.834 69.055 63.3 59.73 63.566 63.681 63.173 64.311 61.061 66.878 63.858 86.542 65.946 65.815 70.877 69.292 58.191 62.798 63.042 68.301 63.406 72.653 63.597 72.701 67.461 70.906 72.792 76.879 82.844 67.961 78.055 79.105 66.203 55.635 58.805 93.59 79.742 123.579 76.761 82.798 78.774 66.147 83.758 79.793 79.345 84.782 78.868 85.52 71.647 73.493 64.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.243
Average program size in population (points): 42.587
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.431
Error (vector) diversity:			 0.5
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 483760114
--- Timings ---
Current time: 1481132156857 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 379 292 200 226 308 323 284 302 331 327 347 308 296 329 359 322 275 279 272 198 179 175 150 171 193 259 288 337 272 290 322 291 341 315 320 316 342 316 302 252 233 219 275 323 412 463 462 480 471 501 493 508 504 499 504 497 507 501 502 490 414 283 305 276 433 420 396 389 410 398 432 460 411 390 350 369 340 310 317)
Population mean number of elite cases: 27.52
Count of perfect (error zero) individuals by case: (182 379 292 200 226 308 323 284 302 331 327 347 308 296 329 359 322 275 279 272 198 179 175 150 171 193 259 288 337 272 290 322 291 341 315 320 316 342 316 302 252 233 219 275 323 412 463 462 480 471 501 493 508 504 499 504 497 507 501 502 490 414 283 305 276 433 420 396 389 410 398 432 460 411 390 350 369 340 310 317)
Population mean number of perfect (error zero) cases: 27.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_mod boolean_pop boolean_pop integer_dup boolean_pop boolean_dup boolean_dup_times boolean_pop boolean_pop integer_dup boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty in1 boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (integer_mod boolean_pop boolean_pop integer_dup boolean_pop boolean_dup boolean_dup_times boolean_pop boolean_pop integer_dup boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty in1 boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 2 2 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 49
Size: 52
Percent parens: 0.058
--- Population Statistics ---
Average total errors in population: 4228.061
Median total errors in population: 1122
Error averages by case: (64.099 50.364 85.359 86.343 70.627 60.918 54.777 68.515 65.442 48.429 62.332 52.313 49.456 55.379 42.299 40.581 43.856 42.724 46.389 50.284 44.098 67.324 71.007 57.207 39.261 45.94 55.178 51.276 44.669 38.992 46.744 42.136 41.554 47.495 40.434 40.552 41.674 39.655 44.497 44.591 65.381 43.849 40.005 53.301 43.222 48.093 38.816 45.899 41.17 46.705 46.208 47.308 44.316 48.322 46.42 53.109 56.117 55.939 49.879 51.25 53.085 46.257 48.707 51.757 85.635 64.65 85.481 45.693 63.817 66.599 63.832 55.599 59.63 65.363 57.913 63.986 54.375 56.436 51.439 37.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.118
Average program size in population (points): 43.536
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.401
Error (vector) diversity:			 0.491
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 493140145
--- Timings ---
Current time: 1481132185392 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 339 270 180 208 275 296 268 302 334 294 311 338 340 338 333 330 282 275 258 204 160 181 154 190 205 242 243 275 229 246 284 253 304 267 274 267 285 279 271 233 243 260 258 314 448 479 489 500 494 495 503 509 495 496 502 498 501 494 493 494 439 301 291 275 398 435 367 397 426 396 401 445 400 344 352 380 348 297 293)
Population mean number of elite cases: 26.75
Count of perfect (error zero) individuals by case: (181 339 270 180 208 275 296 268 302 334 294 311 338 340 338 333 330 282 275 258 204 160 181 154 190 205 242 243 275 229 246 284 253 304 267 274 267 285 279 271 233 243 260 258 314 448 479 489 500 494 495 503 509 495 496 502 498 501 494 493 494 439 301 291 275 398 435 367 397 426 396 401 445 400 344 352 380 348 297 293)
Population mean number of perfect (error zero) cases: 26.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_mod boolean_pop boolean_pop integer_dup boolean_pop boolean_dup boolean_dup_times boolean_pop boolean_pop integer_dup boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty in1 boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Partial simplification: (integer_mod boolean_pop boolean_pop integer_dup boolean_pop boolean_dup boolean_dup_times boolean_pop boolean_pop integer_dup boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty in1 boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 boolean_invert_first_then_and integer_dup_times integer_shove integer_swap) boolean_stackdepth boolean_empty boolean_dup_times boolean_yankdup boolean_shove integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove boolean_xor integer_eq integer_fromboolean boolean_stackdepth)
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 2 2 2 2 2 2 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 51
Mean: 0.6375
Genome size: 49
Size: 52
Percent parens: 0.058
--- Population Statistics ---
Average total errors in population: 5144.971
Median total errors in population: 1129
Error averages by case: (62.138 63.406 105.284 86.555 72.802 76.996 73.485 80.552 68.458 57.552 61.592 57.801 50.951 65.247 57.028 52.058 58.552 57.142 56.752 63.2 57.13 87.413 74.176 74.383 52.626 54.712 61.231 61.546 62.603 61.565 66.784 59.358 53.527 52.746 51.324 51.368 52.402 55.556 52.341 53.249 81.394 62.795 50.955 59.712 57.271 59.615 51.42 58.897 55.267 59.321 62.758 62.743 60.628 62.826 59.528 63.909 64.34 76.583 63.584 75.169 60.119 57.225 52.688 56.856 96.653 79.67 101.672 66.936 77.995 70.74 71.195 68.925 71.654 68.449 73.837 63.686 67.694 60.806 56.677 49.188)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.295
Average program size in population (points): 42.738
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.436
Error (vector) diversity:			 0.516
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 502365841
--- Timings ---
Current time: 1481132211562 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_empty boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_empty boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_empty boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_empty boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 346 277 168 201 275 292 272 303 351 292 307 320 329 347 356 326 285 287 237 203 165 196 141 183 236 232 276 329 252 286 322 290 325 301 305 292 318 304 294 233 234 253 237 315 418 489 481 506 483 512 510 514 493 496 497 495 500 494 494 494 433 310 312 316 424 455 396 404 441 413 445 475 422 374 348 370 343 312 311)
Population mean number of elite cases: 27.43
Count of perfect (error zero) individuals by case: (159 346 277 168 201 275 292 272 303 351 292 307 320 329 347 356 326 285 287 237 203 165 196 141 183 236 232 276 329 252 286 322 290 325 301 305 292 318 304 294 233 234 253 237 315 418 489 481 506 483 512 510 514 493 496 497 495 500 494 494 494 433 310 312 316 424 455 396 404 441 413 445 475 422 374 348 370 343 312 311)
Population mean number of perfect (error zero) cases: 27.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5180.617
Median total errors in population: 1129
Error averages by case: (68.121 51.411 93.138 103.469 88.771 74.915 64.104 75.225 77.044 56.872 73.561 59.49 52.583 61.401 57.882 57.662 54.255 56.629 56.826 62.591 55.066 84.353 81.078 80.211 65.603 66.463 58.076 62.297 59.68 62.828 59.013 57.327 51.356 59.375 50.368 51.539 54.491 49.147 54.336 53.567 89.162 61.791 56.639 58.321 67.327 56.324 50.863 53.287 52.591 57.777 58.096 54.117 57.909 55.361 56.461 61.879 62.811 63.071 61.741 62.326 59.11 48.327 48.635 54.769 81.548 75.698 103.731 70.772 74.823 74.703 67.06 80.656 79.564 87.38 82.483 71.727 67.679 58.718 72.716 60.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.885
Average program size in population (points): 43.398
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.414
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 511642724
--- Timings ---
Current time: 1481132237647 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 344 297 198 223 278 313 278 292 338 272 323 303 320 323 345 311 289 297 243 220 140 175 158 178 247 264 294 352 273 291 343 307 343 303 313 297 332 310 285 241 243 237 250 315 413 461 483 500 468 506 493 529 503 499 504 501 508 504 502 469 421 333 305 308 424 455 368 389 436 372 390 431 436 391 346 374 328 333 303)
Population mean number of elite cases: 27.44
Count of perfect (error zero) individuals by case: (160 344 297 198 223 278 313 278 292 338 272 323 303 320 323 345 311 289 297 243 220 140 175 158 178 247 264 294 352 273 291 343 307 343 303 313 297 332 310 285 241 243 237 250 315 413 461 483 500 468 506 493 529 503 499 504 501 508 504 502 469 421 333 305 308 424 455 368 389 436 372 390 431 436 391 346 374 328 333 303)
Population mean number of perfect (error zero) cases: 27.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4775.012
Median total errors in population: 2251/2
Error averages by case: (73.1 43.434 81.143 88.351 67.767 76.042 67.974 67.58 66.343 47.707 64.989 51.713 49.259 53.723 51.137 55.721 48.073 48.564 61.036 65.442 47.09 64.382 97.109 79.604 69.432 54.441 53.395 48.754 51.151 68.16 54.223 57.368 49.401 52.512 47.652 48.183 48.355 48.025 52.329 54.256 72.333 51.217 48.641 51.455 63.746 58.284 48.405 54.857 55.775 58.406 57.566 56.396 57.025 54.582 55.669 57.826 64.072 65.191 60.425 64.389 73.145 54.605 46.607 41.762 84.536 56.768 76.857 51.998 68.974 63.666 74.134 79.988 60.813 68.167 64.111 59.992 55.908 57.407 54.719 49.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.616
Average program size in population (points): 43.17
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.418
Error (vector) diversity:			 0.483
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 521001271
--- Timings ---
Current time: 1481132263867 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 334 262 195 230 284 293 251 289 341 292 310 311 348 345 353 326 288 289 241 233 175 186 154 176 251 259 272 334 261 275 343 280 316 291 312 293 316 297 296 213 239 245 226 312 425 461 486 495 476 516 497 511 496 491 498 490 493 491 490 463 401 309 281 294 424 457 415 393 432 365 407 458 418 360 332 370 332 305 313)
Population mean number of elite cases: 27.14
Count of perfect (error zero) individuals by case: (161 334 262 195 230 284 293 251 289 341 292 310 311 348 345 353 326 288 289 241 233 175 186 154 176 251 259 272 334 261 275 343 280 316 291 312 293 316 297 296 213 239 245 226 312 425 461 486 495 476 516 497 511 496 491 498 490 493 491 490 463 401 309 281 294 424 457 415 393 432 365 407 458 418 360 332 370 332 305 313)
Population mean number of perfect (error zero) cases: 27.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 9277.918
Median total errors in population: 2313/2
Error averages by case: (85.162 478.658 103.197 105.378 85.962 77.319 87.831 82.611 67.26 68.935 74.722 66.911 60.873 67.613 66.347 58.02 59.09 61.557 62.924 72.624 55.114 82.502 87.149 102.205 79.522 65.407 66.151 61.646 61.302 75.806 66.723 60.319 53.819 61.027 59.139 57.47 57.77 55.967 62.157 56.579 80.543 60.115 55.602 63.17 76.984 64.761 57.352 60.793 64.682 62.394 62.739 63.169 64.661 61.138 65.301 65.522 67.503 75.629 66.325 75.961 91.188 78.473 3320.648 53.772 90.591 67.799 102.508 68.874 80.884 71.725 86.143 76.969 72.876 67.556 74.032 69.759 71.668 67.278 60.855 69.208)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.657
Average program size in population (points): 43.145
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.41
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 530325694
--- Timings ---
Current time: 1481132292049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 356 273 193 212 310 301 269 317 374 311 315 332 340 344 368 342 268 277 256 226 196 168 136 151 182 256 276 317 277 272 339 292 328 293 313 299 332 300 296 233 242 239 243 309 431 457 475 492 461 498 492 514 482 472 483 471 482 481 481 488 435 326 323 312 441 475 405 402 440 392 413 469 431 390 361 396 358 321 293)
Population mean number of elite cases: 27.48
Count of perfect (error zero) individuals by case: (165 356 273 193 212 310 301 269 317 374 311 315 332 340 344 368 342 268 277 256 226 196 168 136 151 182 256 276 317 277 272 339 292 328 293 313 299 332 300 296 233 242 239 243 309 431 457 475 492 461 498 492 514 482 472 483 471 482 481 481 488 435 326 323 312 441 475 405 402 440 392 413 469 431 390 361 396 358 321 293)
Population mean number of perfect (error zero) cases: 27.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5555.319
Median total errors in population: 1141
Error averages by case: (102.085 56.389 92.218 101.41 87.033 74.239 67.736 91.273 78.928 55.672 79.586 74.065 58.505 65.825 65.7 61.163 65.658 58.677 60.99 63.152 57.072 83.27 90.092 97.991 70.317 62.764 62.159 68.368 56.78 66.723 66.077 55.226 53.04 61.141 55.109 57.805 56.049 56.061 57.393 56.467 82.31 65.878 58.433 66.896 71.054 58.389 56.727 59.24 63.052 61.304 59.375 60.479 64.596 59.583 61.149 61.386 64.441 79.347 62.883 80.887 90.06 86.348 67.602 56.768 83.53 64.577 97.499 61.851 84.655 85.499 98.131 68.74 60.688 76.992 73.085 68.535 73.325 74.389 73.426 62.002)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N)
Average genome size in population (length): 37.0
Average program size in population (points): 42.501
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.411
Error (vector) diversity:			 0.481
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 539595914
--- Timings ---
Current time: 1481132319821 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 353 270 190 225 281 291 276 339 379 324 332 369 355 355 347 336 293 286 239 238 186 168 152 175 218 244 259 304 274 303 327 282 321 297 310 289 324 304 298 208 230 235 245 315 431 470 484 490 467 492 495 505 486 480 491 480 488 487 487 497 430 336 296 295 406 452 423 414 463 381 415 460 411 378 342 350 305 277 264)
Population mean number of elite cases: 27.31
Count of perfect (error zero) individuals by case: (138 353 270 190 225 281 291 276 339 379 324 332 369 355 355 347 336 293 286 239 238 186 168 152 175 218 244 259 304 274 303 327 282 321 297 310 289 324 304 298 208 230 235 245 315 431 470 484 490 467 492 495 505 486 480 491 480 488 487 487 497 430 336 296 295 406 452 423 414 463 381 415 460 411 378 342 350 305 277 264)
Population mean number of perfect (error zero) cases: 27.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5402.179
Median total errors in population: 1095
Error averages by case: (93.104 55.326 88.235 103.308 90.651 73.313 83.016 87.939 72.037 59.431 66.82 61.73 52.3 53.621 61.285 61.534 56.401 61.386 59.219 58.19 65.036 72.264 87.993 96.965 74.082 62.708 55.258 57.364 55.367 61.586 71.802 58.649 55.033 56.244 55.9 55.914 58.163 55.57 56.432 56.905 63.534 63.688 52.796 62.836 65.067 57.611 57.435 56.614 60.295 59.772 63.303 60.216 61.575 58.625 60.781 62.332 61.922 73.206 63.103 71.973 89.039 86.344 71.571 63.787 81.551 74.655 104.674 60.804 88.621 87.341 79.872 72.871 67.634 74.814 70.813 59.16 66.178 62.512 66.275 68.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.644
Average program size in population (points): 43.35
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.43
Error (vector) diversity:			 0.519
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 548871756
--- Timings ---
Current time: 1481132347769 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 342 289 219 224 320 309 255 310 402 346 349 379 348 360 355 337 288 299 249 235 199 158 147 176 190 240 258 309 254 281 352 268 328 309 305 287 322 296 296 224 229 229 230 320 444 480 484 502 466 514 499 532 515 511 516 511 518 519 518 484 441 334 318 338 410 450 424 400 439 378 409 461 428 389 334 353 340 274 290)
Population mean number of elite cases: 27.79
Count of perfect (error zero) individuals by case: (147 342 289 219 224 320 309 255 310 402 346 349 379 348 360 355 337 288 299 249 235 199 158 147 176 190 240 258 309 254 281 352 268 328 309 305 287 322 296 296 224 229 229 230 320 444 480 484 502 466 514 499 532 515 511 516 511 518 519 518 484 441 334 318 338 410 450 424 400 439 378 409 461 428 389 334 353 340 274 290)
Population mean number of perfect (error zero) cases: 27.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5200.923
Median total errors in population: 2221/2
Error averages by case: (88.073 48.451 96.114 91.292 89.94 76.967 66.063 65.413 60.119 61.576 71.623 57.092 56.214 54.806 58.031 56.807 53.151 60.673 61.111 58.896 49.079 79.238 84.938 104.121 67.423 63.114 55.93 59.953 57.515 67.452 69.282 51.978 50.903 53.738 54.101 52.749 54.582 53.019 55.254 56.261 64.576 58.251 51.397 59.37 71.316 58.005 53.454 59.657 61.279 61.823 58.363 64.497 58.419 56.923 58.207 62.072 64.273 70.134 65.792 69.724 87.057 72.195 58.589 52.692 76.429 75.726 94.721 50.95 80.606 87.622 90.981 61.795 63.794 68.072 70.994 64.898 63.514 65.702 55.761 58.251)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0)
Average genome size in population (length): 37.767
Average program size in population (points): 43.464
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.429
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 558234992
--- Timings ---
Current time: 1481132373707 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 330 263 197 194 270 253 246 294 366 314 315 349 332 319 314 315 267 277 276 219 198 163 126 154 189 211 247 277 244 258 335 263 313 286 316 291 320 282 302 206 233 243 210 323 451 467 466 492 462 496 488 521 502 504 511 503 507 507 507 508 450 336 294 340 411 464 425 399 428 407 431 463 422 401 349 387 346 306 288)
Population mean number of elite cases: 27.08
Count of perfect (error zero) individuals by case: (144 330 263 197 194 270 253 246 294 366 314 315 349 332 319 314 315 267 277 276 219 198 163 126 154 189 211 247 277 244 258 335 263 313 286 316 291 320 282 302 206 233 243 210 323 451 467 466 492 462 496 488 521 502 504 511 503 507 507 507 508 450 336 294 340 411 464 425 399 428 407 431 463 422 401 349 387 346 306 288)
Population mean number of perfect (error zero) cases: 27.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6521.938
Median total errors in population: 1087
Error averages by case: (93.118 56.434 96.185 108.405 100.361 82.524 83.518 81.182 84.097 74.659 77.361 69.68 72.701 70.374 70.033 70.773 70.131 66.036 68.618 69.15 55.138 80.345 73.562 96.709 71.891 68.51 73.647 68.747 71.18 71.57 83.075 66.686 66.876 73.959 71.112 69.673 74.799 73.606 78.468 80.626 67.713 71.955 61.145 76.884 71.729 68.198 71.732 75.281 76.292 84.345 87.712 94.871 103.027 105.265 113.711 123.163 132.135 149.936 148.475 166.676 83.075 68.258 69.615 58.891 79.545 80.627 100.586 60.081 82.095 89.885 86.299 69.117 73.236 81.08 81.684 74.216 78.412 73.56 76.454 69.458)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.154
Average program size in population (points): 42.911
Average percent parens in population: 0.133
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.412
Error (vector) diversity:			 0.486
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 567407635
--- Timings ---
Current time: 1481132399723 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 335 270 194 240 282 281 251 290 354 328 330 339 306 315 333 322 290 285 229 199 183 168 144 163 204 238 257 276 248 263 342 248 318 288 307 283 306 280 305 216 241 239 238 311 426 474 464 483 457 489 489 501 491 495 501 494 499 500 499 480 440 341 299 333 411 443 406 376 408 363 393 437 408 408 368 365 335 293 275)
Population mean number of elite cases: 26.85
Count of perfect (error zero) individuals by case: (168 335 270 194 240 282 281 251 290 354 328 330 339 306 315 333 322 290 285 229 199 183 168 144 163 204 238 257 276 248 263 342 248 318 288 307 283 306 280 305 216 241 239 238 311 426 474 464 483 457 489 489 501 491 495 501 494 499 500 499 480 440 341 299 333 411 443 406 376 408 363 393 437 408 408 368 365 335 293 275)
Population mean number of perfect (error zero) cases: 26.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5483.841
Median total errors in population: 1071
Error averages by case: (82.129 51.382 83.211 101.288 89.878 75.909 94.702 73.396 67.88 62.641 65.689 64.738 59.112 69.109 55.972 58.112 58.245 60.516 67.147 68.438 47.197 81.334 71.002 90.122 66.555 66.318 63.913 58.514 63.435 71.812 70.058 62.767 61.897 67.634 58.868 61.263 59.294 59.597 63.918 61.301 68.484 67.94 57.244 66.081 71.514 62.864 60.012 64.723 60.538 65.899 63.312 66.721 64.185 62.018 64.53 64.767 68.383 79.645 68.949 79.464 73.115 64.21 57.62 63.741 81.566 83.524 93.696 54.192 67.663 89.869 80.859 68.747 76.736 73.292 73.857 66.24 71.3 67.171 67.154 65.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.656
Average program size in population (points): 43.416
Average percent parens in population: 0.133
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.434
Error (vector) diversity:			 0.525
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 576619034
--- Timings ---
Current time: 1481132427611 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 338 276 180 235 272 258 235 288 371 313 297 334 306 315 319 306 267 275 238 264 204 180 137 195 214 239 245 294 279 261 330 278 314 306 310 288 300 300 295 207 237 211 246 308 430 469 464 473 457 470 490 501 488 496 501 497 499 500 499 496 463 343 297 314 398 429 430 388 406 370 424 439 394 382 357 382 322 283 286)
Population mean number of elite cases: 26.83
Count of perfect (error zero) individuals by case: (129 338 276 180 235 272 258 235 288 371 313 297 334 306 315 319 306 267 275 238 264 204 180 137 195 214 239 245 294 279 261 330 278 314 306 310 288 300 300 295 207 237 211 246 308 430 469 464 473 457 470 490 501 488 496 501 497 499 500 499 496 463 343 297 314 398 429 430 388 406 370 424 439 394 382 357 382 322 283 286)
Population mean number of perfect (error zero) cases: 26.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6143.952
Median total errors in population: 2109/2
Error averages by case: (88.146 61.421 103.168 99.392 89.932 89.32 88.932 86.449 74.955 69.808 77.039 72.485 70.32 69.16 68.097 65.168 66.113 66.605 83.109 71.276 63.026 91.232 82.173 100.257 75.37 70.79 68.945 64.222 70.591 73.092 80.262 68.5 71.403 73.469 68.408 69.028 69.351 69.349 73.593 72.577 65.44 74.229 71.163 69.97 80.4 68.614 67.328 70.394 70.174 71.65 73.222 72.045 75.63 70.198 72.555 75.182 76.827 86.079 77.754 84.129 87.094 79.159 70.552 68.717 103.419 97.566 105.597 63.812 84.729 87.527 90.267 77.767 80.038 78.597 83.096 73.408 84.433 77.366 75.34 65.952)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.55
Average program size in population (points): 43.295
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.429
Error (vector) diversity:			 0.508
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 585781198
--- Timings ---
Current time: 1481132453710 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 358 297 205 250 283 277 255 302 376 333 336 357 337 346 364 329 289 265 241 227 181 167 135 181 213 269 257 289 245 264 345 284 347 323 329 301 316 319 319 223 258 224 233 320 448 488 468 483 469 490 505 516 507 513 513 512 512 515 511 501 455 377 297 316 426 427 411 371 423 378 417 467 435 420 376 407 330 296 298)
Population mean number of elite cases: 27.82
Count of perfect (error zero) individuals by case: (172 358 297 205 250 283 277 255 302 376 333 336 357 337 346 364 329 289 265 241 227 181 167 135 181 213 269 257 289 245 264 345 284 347 323 329 301 316 319 319 223 258 224 233 320 448 488 468 483 469 490 505 516 507 513 513 512 512 515 511 501 455 377 297 316 426 427 411 371 423 378 417 467 435 420 376 407 330 296 298)
Population mean number of perfect (error zero) cases: 27.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5881.232
Median total errors in population: 1074
Error averages by case: (89.452 61.677 82.52 105.601 91.392 87.183 90.04 85.624 73.269 72.205 82.167 69.538 63.957 64.446 66.167 60.303 69.593 66.092 75.142 70.569 58.461 82.74 83.161 91.6 67.687 65.984 67.782 63.962 66.617 73.793 73.157 72.716 66.374 68.583 64.239 65.494 66.762 63.459 67.02 66.101 66.702 69.546 63.504 71.97 76.145 67.422 63.54 68.41 65.837 70.938 67.054 73.816 66.627 68.318 68.324 72.396 71.717 85.125 73.448 86.212 83.431 76.536 63.851 58.072 98.776 84.794 103.181 68.395 79.916 86.968 83.321 74.091 77.915 76.666 82.226 70.434 74.709 60.701 76.657 60.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.537
Average program size in population (points): 43.124
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.399
Error (vector) diversity:			 0.461
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 595057701
--- Timings ---
Current time: 1481132481710 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 346 284 210 274 244 297 260 311 369 329 328 363 340 376 386 353 306 296 234 233 190 180 160 202 221 272 273 303 272 294 330 268 325 283 306 284 294 297 286 193 247 241 200 305 435 494 470 501 480 499 506 539 507 522 521 522 517 522 515 503 451 347 269 325 407 405 403 390 408 374 417 442 413 428 375 371 328 273 266)
Population mean number of elite cases: 27.67
Count of perfect (error zero) individuals by case: (156 346 284 210 274 244 297 260 311 369 329 328 363 340 376 386 353 306 296 234 233 190 180 160 202 221 272 273 303 272 294 330 268 325 283 306 284 294 297 286 193 247 241 200 305 435 494 470 501 480 499 506 539 507 522 521 522 517 522 515 503 451 347 269 325 407 405 403 390 408 374 417 442 413 428 375 371 328 273 266)
Population mean number of perfect (error zero) cases: 27.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5229.128
Median total errors in population: 1066
Error averages by case: (86.167 63.363 84.22 88.413 96.79 101.994 79.737 71.442 63.934 54.842 64.837 56.407 50.456 62.362 53.003 55.961 54.692 58.39 60.827 56.503 62.15 67.426 79.889 80.176 51.132 53.727 51.589 53.345 58.186 58.206 68.459 57.158 53.594 58.385 57.482 54.12 54.107 53.3 57.716 58.672 63.495 63.849 51.975 62.353 67.091 66.937 51.813 66.397 55.663 68.74 55.55 68.501 59.763 55.194 56.856 57.104 58.359 67.061 58.544 68.882 87.076 80.233 61.599 59.795 89.514 72.855 86.914 68.871 69.659 78.668 89.994 70.782 76.787 69.502 72.638 66.319 68.321 56.386 70.68 55.249)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.922
Average program size in population (points): 42.541
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.413
Error (vector) diversity:			 0.482
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 604394957
--- Timings ---
Current time: 1481132509645 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_swap boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) boolean_xor boolean_shove integer_fromboolean)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 336 268 193 229 283 265 232 287 367 320 324 352 335 346 374 337 277 260 227 236 209 195 152 197 222 277 272 303 256 291 343 299 331 307 330 299 307 314 296 231 250 252 240 322 446 505 462 481 479 490 509 523 496 507 508 507 504 508 501 483 453 351 304 347 418 401 450 391 429 368 418 451 410 398 355 395 343 272 274)
Population mean number of elite cases: 27.63
Count of perfect (error zero) individuals by case: (150 336 268 193 229 283 265 232 287 367 320 324 352 335 346 374 337 277 260 227 236 209 195 152 197 222 277 272 303 256 291 343 299 331 307 330 299 307 314 296 231 250 252 240 322 446 505 462 481 479 490 509 523 496 507 508 507 504 508 501 483 453 351 304 347 418 401 450 391 429 368 418 451 410 398 355 395 343 272 274)
Population mean number of perfect (error zero) cases: 27.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4761.57
Median total errors in population: 1061
Error averages by case: (63.181 45.376 72.262 82.313 83.069 69.988 81.72 71.422 60.191 55.766 62.678 56.035 47.727 52.518 46.54 43.684 43.545 51.067 61.991 53.46 39.563 54.411 61.807 76.016 53.515 237.439 47.869 48.367 53.729 55.05 61.389 53.676 51.496 50.177 48.424 45.858 46.709 45.635 53.616 49.231 47.229 58.208 46.274 50.168 62.995 49.675 45.21 52.813 48.677 53.491 46.316 54.0 53.935 47.443 52.135 56.405 50.939 65.912 52.455 62.135 83.162 60.282 41.657 48.861 88.423 66.529 89.882 53.791 55.739 70.61 70.143 57.79 68.794 60.324 64.876 67.295 60.327 45.513 61.113 51.534)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0N)
Average genome size in population (length): 37.306
Average program size in population (points): 43.017
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.406
Error (vector) diversity:			 0.499
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 613686109
--- Timings ---
Current time: 1481132537581 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 338 276 200 231 272 271 224 306 340 308 310 351 337 353 364 334 275 274 198 192 194 174 151 177 194 261 265 305 271 290 331 282 327 310 331 293 308 316 304 231 250 237 221 301 412 486 434 467 468 482 483 507 498 500 505 501 501 500 499 510 466 365 302 343 433 428 447 373 416 366 403 439 408 425 368 403 356 295 269)
Population mean number of elite cases: 27.29
Count of perfect (error zero) individuals by case: (152 338 276 200 231 272 271 224 306 340 308 310 351 337 353 364 334 275 274 198 192 194 174 151 177 194 261 265 305 271 290 331 282 327 310 331 293 308 316 304 231 250 237 221 301 412 486 434 467 468 482 483 507 498 500 505 501 501 500 499 510 466 365 302 343 433 428 447 373 416 366 403 439 408 425 368 403 356 295 269)
Population mean number of perfect (error zero) cases: 27.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5362.49
Median total errors in population: 1057
Error averages by case: (82.113 55.406 83.149 89.246 92.818 77.991 89.814 84.237 72.131 63.086 69.774 64.011 58.253 62.892 56.544 54.518 54.561 59.496 61.285 58.986 57.227 67.397 79.878 94.915 68.574 62.641 54.326 57.293 59.063 62.673 68.734 58.128 62.939 56.55 55.006 53.143 53.803 53.112 59.522 56.327 63.136 64.125 64.929 64.787 70.926 62.666 55.714 60.601 53.875 60.755 54.418 62.061 56.438 55.228 56.879 61.537 59.64 70.46 61.092 69.965 89.052 76.165 61.535 58.725 96.398 84.387 87.863 63.862 70.757 79.751 93.019 75.004 77.68 73.188 76.364 78.284 70.298 53.567 74.067 61.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.97
Average program size in population (points): 42.572
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.426
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 622827192
--- Timings ---
Current time: 1481132563318 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 382 279 221 241 273 272 274 341 372 355 355 373 362 372 390 367 280 271 252 251 203 167 141 154 201 269 260 311 279 270 338 299 344 309 341 312 329 314 302 222 284 246 229 323 448 480 461 482 478 495 502 510 511 522 526 523 524 523 523 485 431 368 299 341 426 405 452 409 432 350 371 448 423 405 362 394 362 320 262)
Population mean number of elite cases: 28.14
Count of perfect (error zero) individuals by case: (160 382 279 221 241 273 272 274 341 372 355 355 373 362 372 390 367 280 271 252 251 203 167 141 154 201 269 260 311 279 270 338 299 344 309 341 312 329 314 302 222 284 246 229 323 448 480 461 482 478 495 502 510 511 522 526 523 524 523 523 485 431 368 299 341 426 405 452 409 432 350 371 448 423 405 362 394 362 320 262)
Population mean number of perfect (error zero) cases: 28.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5554.943
Median total errors in population: 1062
Error averages by case: (86.126 52.276 80.812 102.881 104.912 75.499 101.007 88.386 73.24 63.827 69.972 61.418 62.069 63.87 58.379 52.45 52.785 56.105 58.429 54.662 60.085 71.423 83.719 91.285 65.333 59.442 59.623 58.23 57.341 61.191 68.716 60.47 58.91 60.088 58.838 58.936 59.296 58.708 63.084 59.013 68.386 73.52 51.125 68.236 72.509 60.127 57.249 59.757 57.549 62.989 58.949 60.216 62.664 59.974 62.082 64.91 65.321 66.957 65.354 67.036 87.04 77.188 66.523 62.797 110.993 73.52 104.749 67.953 73.565 83.925 96.302 69.309 69.929 105.308 74.598 75.569 107.1 56.079 73.721 61.029)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.285
Average program size in population (points): 42.815
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.403
Error (vector) diversity:			 0.487
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 632059023
--- Timings ---
Current time: 1481132590889 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 370 293 221 246 289 275 247 295 355 323 319 357 348 352 372 329 295 280 252 229 204 195 146 195 221 280 264 313 250 298 326 280 332 311 328 278 317 301 286 220 257 222 242 307 441 501 457 486 474 473 506 516 503 518 514 518 518 518 517 515 474 384 316 342 431 444 474 417 457 368 398 467 443 437 395 424 382 306 311)
Population mean number of elite cases: 28.24
Count of perfect (error zero) individuals by case: (175 370 293 221 246 289 275 247 295 355 323 319 357 348 352 372 329 295 280 252 229 204 195 146 195 221 280 264 313 250 298 326 280 332 311 328 278 317 301 286 220 257 222 242 307 441 501 457 486 474 473 506 516 503 518 514 518 518 518 517 515 474 384 316 342 431 444 474 417 457 368 398 467 443 437 395 424 382 306 311)
Population mean number of perfect (error zero) cases: 28.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5161.169
Median total errors in population: 1062
Error averages by case: (77.009 50.269 73.25 88.293 92.915 60.21 92.503 80.275 68.273 56.848 72.067 56.336 47.653 51.076 58.569 51.237 55.848 62.176 64.553 57.677 57.092 68.44 70.719 91.982 60.434 58.132 46.633 57.295 57.661 62.731 69.808 58.23 63.051 62.777 57.007 58.056 58.974 59.006 67.885 59.117 55.333 61.782 53.89 65.501 76.478 56.489 59.203 57.903 58.407 58.508 62.166 62.055 68.525 61.695 63.657 71.011 67.014 79.677 68.443 74.892 70.958 67.096 56.471 47.72 89.579 72.402 95.665 60.966 68.458 72.737 77.18 65.874 59.032 58.922 70.322 64.999 55.117 51.135 62.502 49.338)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.475
Average program size in population (points): 43.071
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.409
Error (vector) diversity:			 0.5
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 641341679
--- Timings ---
Current time: 1481132618435 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 383 265 215 244 274 281 265 317 373 351 338 363 343 343 361 369 310 268 217 205 232 201 127 178 204 285 278 303 282 312 354 290 340 290 343 277 320 299 301 213 219 206 203 289 453 512 458 497 502 498 532 556 529 538 540 540 534 540 538 509 460 380 302 331 441 455 456 391 448 361 398 449 433 422 383 415 352 312 294)
Population mean number of elite cases: 28.35
Count of perfect (error zero) individuals by case: (163 383 265 215 244 274 281 265 317 373 351 338 363 343 343 361 369 310 268 217 205 232 201 127 178 204 285 278 303 282 312 354 290 340 290 343 277 320 299 301 213 219 206 203 289 453 512 458 497 502 498 532 556 529 538 540 540 534 540 538 509 460 380 302 331 441 455 456 391 448 361 398 449 433 422 383 415 352 312 294)
Population mean number of perfect (error zero) cases: 28.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4522.814
Median total errors in population: 507
Error averages by case: (74.051 47.252 62.115 92.154 83.904 73.319 85.577 72.12 51.088 50.879 55.957 48.617 43.897 53.371 46.325 47.241 49.386 50.218 56.682 48.914 48.168 61.502 68.62 85.121 52.332 55.396 44.502 51.141 50.64 52.768 54.235 45.005 44.477 52.716 43.316 42.2 44.554 44.563 48.972 47.159 60.246 63.062 47.406 60.139 61.834 46.606 44.261 49.08 42.467 51.668 45.35 51.959 50.326 46.887 48.016 53.322 50.788 63.716 52.186 60.616 78.94 68.089 49.531 48.813 76.528 59.407 78.612 49.888 58.515 61.872 78.937 58.837 61.078 60.986 66.252 70.241 56.814 56.153 55.765 47.167)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.314
Average program size in population (points): 43.038
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.396
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 650518210
--- Timings ---
Current time: 1481132646154 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 377 272 227 228 266 271 262 308 367 327 295 346 358 349 353 350 294 259 211 227 244 186 118 179 199 252 249 274 294 300 342 310 368 332 373 330 358 348 329 223 229 236 222 320 450 457 421 437 457 466 483 497 507 510 522 512 514 510 512 499 465 372 345 362 441 424 468 435 452 402 421 463 439 422 407 447 377 328 277)
Population mean number of elite cases: 28.25
Count of perfect (error zero) individuals by case: (185 377 272 227 228 266 271 262 308 367 327 295 346 358 349 353 350 294 259 211 227 244 186 118 179 199 252 249 274 294 300 342 310 368 332 373 330 358 348 329 223 229 236 222 320 450 457 421 437 457 466 483 497 507 510 522 512 514 510 512 499 465 372 345 362 441 424 468 435 452 402 421 463 439 422 407 447 377 328 277)
Population mean number of perfect (error zero) cases: 28.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_fromboolean) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4820.692
Median total errors in population: 1697/2
Error averages by case: (75.03 46.197 70.141 103.14 79.837 63.391 81.683 77.065 59.319 61.002 57.93 59.315 49.083 61.494 48.526 50.631 53.165 52.301 63.763 52.021 46.134 79.322 71.562 87.022 59.72 54.528 51.315 56.335 52.534 53.835 62.191 54.612 49.837 53.112 50.745 47.844 48.835 47.753 56.405 51.78 58.395 70.977 51.387 56.031 57.8 46.638 48.731 49.329 49.239 51.504 51.097 51.7 56.031 53.753 52.868 59.368 56.607 68.5 58.54 63.984 78.945 69.047 53.51 49.638 86.416 70.633 98.592 52.771 56.685 70.956 64.778 57.825 63.89 65.935 57.524 78.214 58.576 60.132 63.848 49.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.649
Average program size in population (points): 43.255
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.4
Error (vector) diversity:			 0.482
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 659766970
--- Timings ---
Current time: 1481132673893 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 352 283 223 230 291 307 273 290 397 338 337 347 348 358 383 368 319 294 232 235 252 191 133 170 197 259 273 272 273 297 350 299 329 304 339 294 334 301 302 252 217 231 225 309 437 474 464 472 475 493 500 516 504 512 513 513 508 512 510 502 486 368 320 354 440 406 435 383 416 366 382 436 418 408 357 426 353 303 262)
Population mean number of elite cases: 28.02
Count of perfect (error zero) individuals by case: (187 352 283 223 230 291 307 273 290 397 338 337 347 348 358 383 368 319 294 232 235 252 191 133 170 197 259 273 272 273 297 350 299 329 304 339 294 334 301 302 252 217 231 225 309 437 474 464 472 475 493 500 516 504 512 513 513 508 512 510 502 486 368 320 354 440 406 435 383 416 366 382 436 418 408 357 426 353 303 262)
Population mean number of perfect (error zero) cases: 28.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4731.641
Median total errors in population: 441
Error averages by case: (74.018 45.35 73.116 94.27 70.849 54.382 66.579 72.524 64.588 56.021 56.899 58.258 46.175 55.226 45.782 44.701 52.138 52.447 59.357 48.579 48.083 66.429 74.544 80.05 53.606 48.724 50.691 45.408 52.186 53.146 55.83 52.964 53.594 53.211 49.493 50.843 54.13 49.788 54.714 53.972 53.144 63.218 50.509 61.942 69.356 50.458 50.785 52.388 52.1 54.272 52.806 56.547 56.928 54.137 54.142 59.284 61.3 74.786 63.879 71.991 72.923 59.029 55.544 49.789 103.382 62.408 82.746 56.97 61.723 73.818 71.988 64.892 51.814 64.026 56.421 74.406 54.099 52.598 64.102 42.326)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.665
Average program size in population (points): 43.229
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.412
Error (vector) diversity:			 0.505
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 669045611
--- Timings ---
Current time: 1481132701800 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 366 266 226 236 319 299 266 311 380 353 359 377 370 372 383 360 333 294 219 234 245 201 119 170 182 263 258 279 275 285 343 274 330 295 319 272 325 304 289 221 201 220 226 299 419 495 464 480 473 487 504 526 501 511 510 513 507 512 510 508 512 398 330 345 459 428 483 388 422 381 393 448 417 403 365 424 359 305 277)
Population mean number of elite cases: 28.15
Count of perfect (error zero) individuals by case: (175 366 266 226 236 319 299 266 311 380 353 359 377 370 372 383 360 333 294 219 234 245 201 119 170 182 263 258 279 275 285 343 274 330 295 319 272 325 304 289 221 201 220 226 299 419 495 464 480 473 487 504 526 501 511 510 513 507 512 510 508 512 398 330 345 459 428 483 388 422 381 393 448 417 403 365 424 359 305 277)
Population mean number of perfect (error zero) cases: 28.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5106.716
Median total errors in population: 452
Error averages by case: (70.008 50.228 73.155 94.39 76.96 60.799 74.83 82.262 59.925 62.763 61.958 64.595 53.291 58.951 56.226 51.887 52.868 60.25 65.221 57.415 51.106 76.29 68.569 92.115 63.428 61.323 56.601 59.027 53.081 56.691 70.009 62.424 57.825 60.014 52.763 53.548 54.81 53.669 54.679 54.304 63.316 72.23 56.001 67.295 61.62 56.246 52.464 55.704 53.079 57.004 56.339 58.171 59.319 56.979 60.046 59.865 64.577 71.513 65.512 72.554 76.904 59.94 55.432 54.712 97.377 70.355 84.681 68.631 62.579 71.88 79.75 66.624 63.863 79.673 68.303 78.235 62.783 66.183 63.21 55.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.259
Average program size in population (points): 42.898
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.395
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 678209317
--- Timings ---
Current time: 1481132729416 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 396 268 221 248 289 295 274 313 382 347 343 364 360 369 377 363 326 300 192 263 241 205 129 179 191 250 284 288 292 272 337 283 344 293 333 288 300 314 288 227 216 241 231 317 456 492 466 480 490 492 515 525 527 533 535 534 530 535 533 512 490 397 342 364 451 403 454 399 396 358 391 433 410 383 354 405 336 275 249)
Population mean number of elite cases: 28.26
Count of perfect (error zero) individuals by case: (179 396 268 221 248 289 295 274 313 382 347 343 364 360 369 377 363 326 300 192 263 241 205 129 179 191 250 284 288 292 272 337 283 344 293 333 288 300 314 288 227 216 241 231 317 456 492 466 480 490 492 515 525 527 533 535 534 530 535 533 512 490 397 342 364 451 403 454 399 396 358 391 433 410 383 354 405 336 275 249)
Population mean number of perfect (error zero) cases: 28.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5099.862
Median total errors in population: 464
Error averages by case: (67.071 48.277 77.163 87.299 75.762 63.275 82.892 73.219 62.761 70.24 61.016 53.278 54.144 65.527 53.945 54.741 53.023 61.17 70.136 64.02 50.087 69.381 74.846 89.192 59.616 58.488 54.914 54.921 56.282 62.436 66.011 65.534 49.947 51.229 50.423 63.637 67.867 51.049 55.751 72.967 72.413 66.094 54.909 65.078 66.748 54.36 51.667 55.137 51.799 55.328 80.908 56.004 59.367 54.942 56.982 60.178 59.984 68.512 61.061 65.89 77.957 67.026 52.589 51.677 99.426 63.346 85.03 59.813 69.721 64.981 77.247 64.007 70.889 76.802 57.592 72.143 60.772 61.365 71.89 54.691)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.535
Average program size in population (points): 43.131
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.403
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 687419875
--- Timings ---
Current time: 1481132756997 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 379 247 204 251 278 284 276 284 372 340 314 347 358 348 360 340 324 299 189 253 267 187 123 170 199 263 286 297 287 284 356 291 344 297 341 297 316 320 309 273 218 248 250 309 455 502 469 485 487 497 524 519 528 529 530 531 527 533 531 502 480 350 358 390 451 433 479 392 422 385 409 440 426 397 367 391 361 323 248)
Population mean number of elite cases: 28.40
Count of perfect (error zero) individuals by case: (173 379 247 204 251 278 284 276 284 372 340 314 347 358 348 360 340 324 299 189 253 267 187 123 170 199 263 286 297 287 284 356 291 344 297 341 297 316 320 309 273 218 248 250 309 455 502 469 485 487 497 524 519 528 529 530 531 527 533 531 502 480 350 358 390 451 433 479 392 422 385 409 440 426 397 367 391 361 323 248)
Population mean number of perfect (error zero) cases: 28.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5182.646
Median total errors in population: 422
Error averages by case: (80.016 52.294 82.2 95.259 76.785 63.252 71.143 73.47 69.345 71.427 63.842 58.362 51.645 69.997 53.748 55.617 57.644 59.981 69.11 64.492 56.09 65.395 76.814 92.13 63.87 65.347 55.563 54.58 55.011 62.513 60.729 57.552 54.093 56.461 53.893 54.319 56.592 53.855 56.728 53.717 80.118 78.441 55.321 62.241 69.733 61.52 55.681 63.309 56.221 63.356 58.589 61.93 57.835 54.438 55.603 58.658 57.857 71.69 58.353 69.701 94.927 73.03 59.637 53.703 85.45 71.396 76.761 63.523 72.593 64.672 79.941 62.923 64.919 68.866 61.347 74.354 65.853 60.541 76.967 55.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.565
Average program size in population (points): 43.12
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.391
Error (vector) diversity:			 0.475
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 696604922
--- Timings ---
Current time: 1481132782958 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 353 255 218 258 307 302 283 297 393 350 341 354 350 375 374 357 314 290 201 246 257 181 127 171 192 259 285 309 305 305 344 292 351 321 344 295 321 336 299 245 201 223 228 298 445 474 445 457 454 471 487 496 499 507 502 507 502 510 509 503 482 329 340 370 448 423 473 401 433 388 411 437 442 422 393 424 340 313 292)
Population mean number of elite cases: 28.23
Count of perfect (error zero) individuals by case: (196 353 255 218 258 307 302 283 297 393 350 341 354 350 375 374 357 314 290 201 246 257 181 127 171 192 259 285 309 305 305 344 292 351 321 344 295 321 336 299 245 201 223 228 298 445 474 445 457 454 471 487 496 499 507 502 507 502 510 509 503 482 329 340 370 448 423 473 401 433 388 411 437 442 422 393 424 340 313 292)
Population mean number of perfect (error zero) cases: 28.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4670.468
Median total errors in population: 1107/2
Error averages by case: (69.019 44.329 77.279 81.392 82.786 55.005 61.008 74.206 59.295 56.537 56.54 49.777 47.32 61.836 54.724 59.041 60.379 58.613 58.013 57.35 42.05 70.28 65.805 82.165 49.856 62.437 48.667 52.45 53.298 56.453 58.548 50.582 47.598 50.709 50.27 49.073 52.082 49.619 52.975 49.471 55.256 67.471 51.117 65.175 64.476 53.037 47.134 53.275 49.61 55.485 52.309 53.466 55.051 51.904 53.617 56.606 56.928 67.646 57.694 66.887 82.93 61.029 46.636 44.615 81.531 57.48 78.922 55.711 60.564 54.757 64.056 59.84 51.78 61.715 54.555 57.093 65.986 65.398 62.352 50.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.044
Average program size in population (points): 43.69
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.412
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 705866099
--- Timings ---
Current time: 1481132809240 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 383 269 225 236 302 294 278 288 381 332 337 340 348 341 352 336 294 281 212 239 221 169 125 172 174 250 265 279 302 293 312 275 316 291 318 276 304 303 269 253 233 245 239 304 431 472 449 469 473 482 501 503 524 534 533 534 535 536 537 481 459 356 355 385 435 401 456 392 414 363 375 414 425 404 367 402 368 322 272)
Population mean number of elite cases: 27.80
Count of perfect (error zero) individuals by case: (185 383 269 225 236 302 294 278 288 381 332 337 340 348 341 352 336 294 281 212 239 221 169 125 172 174 250 265 279 302 293 312 275 316 291 318 276 304 303 269 253 233 245 239 304 431 472 449 469 473 482 501 503 524 534 533 534 535 536 537 481 459 356 355 385 435 401 456 392 414 363 375 414 425 404 367 402 368 322 272)
Population mean number of perfect (error zero) cases: 27.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5468.8
Median total errors in population: 351
Error averages by case: (87.069 61.311 82.28 93.496 77.7 67.082 71.953 82.424 69.064 70.547 71.525 68.652 58.007 72.925 58.832 57.797 58.488 57.727 61.615 59.086 60.04 74.364 74.694 96.026 67.672 75.464 63.056 59.678 55.674 62.137 68.957 62.44 60.185 65.543 58.564 60.573 62.862 59.297 64.225 59.959 68.143 81.253 59.421 75.276 69.909 60.632 60.054 62.878 60.611 61.946 63.029 63.046 65.414 63.742 65.366 65.53 65.907 72.534 69.032 74.297 87.015 73.069 61.581 58.557 85.36 72.31 77.662 64.771 72.639 71.994 71.912 67.936 68.802 73.844 70.448 75.267 80.023 71.46 75.121 62.019)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.508
Average program size in population (points): 43.29
Average percent parens in population: 0.134
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.399
Error (vector) diversity:			 0.498
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 714942786
--- Timings ---
Current time: 1481132836870 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 416 256 220 267 314 287 260 278 385 357 345 358 360 353 384 366 330 265 193 270 271 178 152 178 206 233 262 297 315 320 343 315 349 332 343 297 313 350 304 241 200 246 235 289 404 474 443 443 445 464 489 490 500 509 505 511 510 514 512 528 512 381 365 401 461 436 500 436 443 371 383 424 424 407 392 443 387 317 266)
Population mean number of elite cases: 28.48
Count of perfect (error zero) individuals by case: (159 416 256 220 267 314 287 260 278 385 357 345 358 360 353 384 366 330 265 193 270 271 178 152 178 206 233 262 297 315 320 343 315 349 332 343 297 313 350 304 241 200 246 235 289 404 474 443 443 445 464 489 490 500 509 505 511 510 514 512 528 512 381 365 401 461 436 500 436 443 371 383 424 424 407 392 443 387 317 266)
Population mean number of perfect (error zero) cases: 28.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4406.988
Median total errors in population: 677/2
Error averages by case: (47.057 40.136 79.201 82.278 58.728 58.437 63.667 68.356 53.207 54.36 55.853 56.233 42.985 66.74 51.891 56.169 49.501 50.382 57.137 47.352 36.042 59.342 56.734 60.898 50.456 59.043 54.49 53.435 46.88 52.455 53.624 49.318 49.351 48.525 50.394 48.57 53.23 47.72 49.195 47.344 50.289 71.335 48.189 56.66 55.857 53.177 45.159 50.646 49.354 52.197 49.578 50.927 52.925 50.317 51.507 53.453 51.958 57.953 54.87 59.448 66.863 44.961 43.483 44.604 73.38 49.261 69.745 48.813 62.54 58.777 58.074 65.999 50.958 63.806 56.554 63.898 66.958 63.249 68.586 53.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.149
Average program size in population (points): 43.783
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.401
Error (vector) diversity:			 0.495
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 724228319
--- Timings ---
Current time: 1481132864774 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 374 226 226 272 321 290 266 272 408 337 346 333 360 366 389 362 333 291 193 275 254 191 160 177 235 261 275 304 313 330 354 314 340 307 319 285 290 317 282 223 215 227 206 262 420 485 457 459 475 480 492 508 513 523 517 522 518 524 519 489 458 362 358 411 467 407 478 425 434 366 395 433 431 390 388 425 370 315 266)
Population mean number of elite cases: 28.35
Count of perfect (error zero) individuals by case: (190 374 226 226 272 321 290 266 272 408 337 346 333 360 366 389 362 333 291 193 275 254 191 160 177 235 261 275 304 313 330 354 314 340 307 319 285 290 317 282 223 215 227 206 262 420 485 457 459 475 480 492 508 513 523 517 522 518 524 519 489 458 362 358 411 467 407 478 425 434 366 395 433 431 390 388 425 370 315 266)
Population mean number of perfect (error zero) cases: 28.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5160.485
Median total errors in population: 1435/2
Error averages by case: (59.021 52.207 96.23 106.198 70.716 65.352 64.9 79.284 70.207 68.912 70.16 66.627 57.615 72.312 59.24 56.951 58.284 57.743 70.147 56.946 49.019 69.4 73.771 75.041 60.585 65.273 61.296 55.764 58.412 60.876 60.825 54.128 53.726 54.468 55.774 53.575 59.905 54.077 60.517 55.02 67.33 76.97 55.287 63.828 68.006 60.121 53.125 60.93 55.244 60.105 56.395 60.259 64.575 58.846 58.088 62.108 58.469 67.313 60.644 65.11 72.985 65.034 50.524 56.5 89.291 62.174 84.576 59.109 64.495 66.728 72.007 77.865 68.917 72.864 82.418 66.859 65.115 59.534 81.511 58.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.972
Average program size in population (points): 43.643
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.386
Error (vector) diversity:			 0.489
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 733398765
--- Timings ---
Current time: 1481132890801 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 422 277 239 275 298 307 300 291 419 382 369 373 367 371 404 353 320 281 204 282 263 188 164 195 214 269 297 321 322 324 370 302 335 304 323 286 302 324 290 226 220 250 215 277 454 511 500 497 514 513 536 553 547 560 558 560 556 561 560 499 461 357 363 405 492 415 500 429 408 390 393 461 420 414 380 417 378 328 283)
Population mean number of elite cases: 29.48
Count of perfect (error zero) individuals by case: (187 422 277 239 275 298 307 300 291 419 382 369 373 367 371 404 353 320 281 204 282 263 188 164 195 214 269 297 321 322 324 370 302 335 304 323 286 302 324 290 226 220 250 215 277 454 511 500 497 514 513 536 553 547 560 558 560 556 561 560 499 461 357 363 405 492 415 500 429 408 390 393 461 420 414 380 417 378 328 283)
Population mean number of perfect (error zero) cases: 29.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3768.993
Median total errors in population: 280
Error averages by case: (54.014 40.029 69.17 82.167 52.667 52.14 54.94 62.219 49.163 55.042 52.607 45.333 36.685 56.14 37.399 41.595 38.017 42.703 49.005 37.247 39.011 51.264 52.819 62.863 41.515 60.17 35.349 37.789 43.583 42.269 46.161 37.564 37.894 37.063 37.447 39.766 43.042 35.703 39.253 38.743 47.309 70.901 35.788 50.986 47.923 39.703 36.272 38.316 38.41 39.366 38.439 42.205 39.765 37.859 38.784 38.206 40.259 44.061 40.883 46.602 59.939 53.03 37.534 39.533 72.426 44.219 70.734 39.775 52.482 52.829 56.822 63.12 50.661 53.769 56.166 52.874 50.986 36.242 63.946 42.319)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.573
Average program size in population (points): 43.126
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.385
Error (vector) diversity:			 0.483
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 742640005
--- Timings ---
Current time: 1481132918671 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 418 258 233 273 295 297 271 302 400 346 359 348 330 338 349 322 308 275 196 271 257 199 149 186 229 280 301 317 329 313 368 305 343 304 334 300 313 325 308 222 200 224 201 289 427 481 475 470 494 493 512 521 522 528 528 529 527 530 530 494 481 346 357 399 474 400 504 430 422 379 378 416 412 409 374 408 362 304 256)
Population mean number of elite cases: 28.55
Count of perfect (error zero) individuals by case: (189 418 258 233 273 295 297 271 302 400 346 359 348 330 338 349 322 308 275 196 271 257 199 149 186 229 280 301 317 329 313 368 305 343 304 334 300 313 325 308 222 200 224 201 289 427 481 475 470 494 493 512 521 522 528 528 529 527 530 530 494 481 346 357 399 474 400 504 430 422 379 378 416 412 409 374 408 362 304 256)
Population mean number of perfect (error zero) cases: 28.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4823.218
Median total errors in population: 595/2
Error averages by case: (65.99 47.034 98.075 97.178 78.607 66.05 81.756 69.264 74.669 67.02 65.954 57.473 52.716 65.317 47.47 49.532 53.65 57.404 51.686 49.832 47.033 55.313 67.622 81.112 50.24 64.531 52.333 54.243 55.965 49.792 57.404 50.726 48.163 51.731 47.971 51.866 52.902 49.052 50.115 49.732 64.196 77.871 48.023 60.613 59.182 55.968 48.106 51.484 50.981 51.675 48.585 54.105 49.44 50.507 51.814 52.126 53.3 55.689 54.601 58.116 65.903 63.931 54.502 57.518 85.393 60.291 84.667 58.635 61.361 63.986 70.816 75.081 70.963 66.744 87.19 59.174 64.924 52.412 82.345 56.477)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.649
Average program size in population (points): 43.341
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.396
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 751757808
--- Timings ---
Current time: 1481132944479 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 419 264 233 279 329 305 280 290 387 359 358 338 328 339 356 331 305 257 183 274 252 171 137 180 230 282 299 301 334 315 368 317 335 306 335 303 312 329 306 247 228 253 221 303 412 490 462 481 481 495 511 550 536 542 538 544 542 545 544 481 467 327 362 398 470 416 479 415 419 374 379 423 427 409 388 425 377 322 265)
Population mean number of elite cases: 28.77
Count of perfect (error zero) individuals by case: (198 419 264 233 279 329 305 280 290 387 359 358 338 328 339 356 331 305 257 183 274 252 171 137 180 230 282 299 301 334 315 368 317 335 306 335 303 312 329 306 247 228 253 221 303 412 490 462 481 481 495 511 550 536 542 538 544 542 545 544 481 467 327 362 398 470 416 479 415 419 374 379 423 427 409 388 425 377 322 265)
Population mean number of perfect (error zero) cases: 28.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4391.839
Median total errors in population: 602
Error averages by case: (71.014 46.077 86.16 103.402 66.705 53.03 73.994 58.343 59.007 55.523 54.321 44.821 41.846 56.301 44.727 43.401 42.87 52.039 52.403 45.562 45.018 60.257 65.836 73.171 49.816 62.24 46.653 45.319 48.735 49.987 52.718 44.909 40.706 44.318 41.842 45.882 43.021 42.223 45.766 42.588 64.146 78.363 43.234 51.402 51.814 50.324 40.6 48.164 45.232 51.294 43.719 52.853 45.624 44.111 46.745 47.137 47.503 52.345 52.029 55.787 60.952 59.988 47.562 50.557 87.378 58.191 73.847 59.861 55.536 53.869 64.053 68.837 75.863 65.805 71.2 54.409 57.933 50.659 73.521 46.841)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.127
Average program size in population (points): 43.896
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.419
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 760992673
--- Timings ---
Current time: 1481132970724 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 1 1 1 0 0 0 0 0 0 0 1 1 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 412 280 246 288 330 316 301 295 390 358 368 343 343 354 373 341 294 282 188 322 250 166 126 164 206 289 288 334 332 285 367 290 324 295 332 294 302 321 291 276 234 246 237 304 445 499 494 499 507 518 528 551 539 549 541 549 546 549 549 480 462 321 363 397 497 392 498 410 419 382 376 429 412 392 395 452 393 330 263)
Population mean number of elite cases: 29.08
Count of perfect (error zero) individuals by case: (182 412 280 246 288 330 316 301 295 390 358 368 343 343 354 373 341 294 282 188 322 250 166 126 164 206 289 288 334 332 285 367 290 324 295 332 294 302 321 291 276 234 246 237 304 445 499 494 499 507 518 528 551 539 549 541 549 546 549 549 480 462 321 363 397 497 392 498 410 419 382 376 429 412 392 395 452 393 330 263)
Population mean number of perfect (error zero) cases: 29.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4055.245
Median total errors in population: 421
Error averages by case: (62.985 38.159 91.178 98.246 58.623 51.255 75.037 60.314 57.283 54.309 47.387 38.966 36.24 49.345 38.504 37.569 38.838 42.912 46.417 38.199 32.951 59.299 55.808 80.511 45.867 52.785 40.646 36.864 41.386 43.763 43.972 39.361 40.169 42.005 40.342 38.969 42.973 42.817 42.278 41.696 59.052 74.229 40.362 47.582 45.562 45.14 39.862 45.699 42.342 48.24 41.508 50.877 46.165 45.518 47.041 46.827 46.984 54.588 51.015 58.759 55.934 52.006 39.629 45.611 77.417 50.028 61.631 42.603 56.569 45.806 56.964 58.009 61.096 70.028 71.243 53.912 49.116 43.878 73.61 46.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.819
Average program size in population (points): 43.535
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.415
Error (vector) diversity:			 0.525
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 770273003
--- Timings ---
Current time: 1481132998387 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 412 269 218 268 337 329 291 303 376 360 365 345 361 356 365 332 290 248 200 271 245 161 133 171 189 259 270 297 327 311 353 281 347 296 324 310 310 324 311 262 195 220 226 298 381 460 460 465 468 475 469 499 510 518 515 519 519 519 519 452 433 336 365 392 492 400 480 422 418 407 392 417 406 397 392 449 401 334 284)
Population mean number of elite cases: 28.30
Count of perfect (error zero) individuals by case: (216 412 269 218 268 337 329 291 303 376 360 365 345 361 356 365 332 290 248 200 271 245 161 133 171 189 259 270 297 327 311 353 281 347 296 324 310 310 324 311 262 195 220 226 298 381 460 460 465 468 475 469 499 510 518 515 519 519 519 519 452 433 336 365 392 492 400 480 422 418 407 392 417 406 397 392 449 401 334 284)
Population mean number of perfect (error zero) cases: 28.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5585.688
Median total errors in population: 419
Error averages by case: (80.986 56.138 98.088 125.131 78.823 66.965 91.486 86.803 82.707 88.141 78.653 65.313 55.706 66.984 60.58 59.065 58.787 58.905 62.571 61.321 57.03 79.252 71.928 89.033 71.64 79.382 61.249 60.564 64.566 61.075 68.143 66.359 59.216 61.328 59.789 60.679 62.446 58.339 62.683 60.03 74.091 85.05 59.95 60.786 64.102 65.644 58.276 63.598 57.701 63.011 62.156 66.656 60.471 59.875 63.831 60.962 61.808 67.624 66.204 70.642 80.96 76.051 61.542 63.513 79.371 75.13 88.606 65.621 74.357 68.685 73.831 77.839 76.745 83.64 87.024 76.257 64.641 66.246 85.293 70.014)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.036
Average program size in population (points): 43.991
Average percent parens in population: 0.136
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.392
Error (vector) diversity:			 0.511
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 779401017
--- Timings ---
Current time: 1481133024194 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 67
Lexicase best mean error: 0.8375
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 67
Zero cases best mean error: 0.8375
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 415 250 244 272 345 315 281 298 367 372 382 364 368 362 379 354 297 256 210 303 240 171 137 151 180 259 246 274 286 273 327 267 307 260 277 271 288 273 277 278 211 226 233 312 435 481 504 503 517 500 531 545 550 553 551 554 555 554 553 437 421 314 347 386 451 408 460 433 453 424 371 426 412 388 376 419 381 324 281)
Population mean number of elite cases: 28.47
Count of perfect (error zero) individuals by case: (214 415 250 244 272 345 315 281 298 367 372 382 364 368 362 379 354 297 256 210 303 240 171 137 151 180 259 246 274 286 273 327 267 307 260 277 271 288 273 277 278 211 226 233 312 435 481 504 503 517 500 531 545 550 553 551 554 555 554 553 437 421 314 347 386 451 408 460 433 453 424 371 426 412 388 376 419 381 324 281)
Population mean number of perfect (error zero) cases: 28.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4979.107
Median total errors in population: 1023/2
Error averages by case: (68.041 51.226 92.252 105.35 64.808 58.326 83.587 85.586 70.06 77.389 63.077 57.002 48.162 58.925 51.453 52.463 53.696 51.383 55.77 54.423 45.017 68.304 64.084 91.986 60.636 56.702 48.113 50.824 54.098 58.21 62.847 50.891 52.169 53.692 51.843 52.421 53.208 51.2 53.713 52.795 65.191 81.145 52.598 54.375 58.611 51.941 51.031 50.698 52.558 52.013 52.655 55.16 55.717 54.284 56.793 55.347 57.78 61.721 61.14 64.689 70.033 65.1 45.67 53.615 83.412 62.434 75.607 66.888 63.465 65.702 73.723 72.983 75.963 84.177 88.375 82.451 71.059 61.828 72.725 62.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.109
Average program size in population (points): 43.848
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.42
Error (vector) diversity:			 0.534
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 788643636
--- Timings ---
Current time: 1481133052169 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) boolean_stackdepth exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) boolean_stackdepth exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) boolean_stackdepth exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) boolean_stackdepth exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 416 275 245 279 309 309 294 309 389 338 323 334 319 315 325 290 270 253 207 273 242 164 147 153 180 261 296 338 351 319 372 304 346 304 309 320 308 324 312 224 231 209 202 284 369 439 443 437 461 443 454 485 488 492 491 495 495 495 497 440 432 341 331 377 465 424 483 455 444 421 363 447 404 394 379 440 348 336 296)
Population mean number of elite cases: 27.76
Count of perfect (error zero) individuals by case: (189 416 275 245 279 309 309 294 309 389 338 323 334 319 315 325 290 270 253 207 273 242 164 147 153 180 261 296 338 351 319 372 304 346 304 309 320 308 324 312 224 231 209 202 284 369 439 443 437 461 443 454 485 488 492 491 495 495 495 497 440 432 341 331 377 465 424 483 455 444 421 363 447 404 394 379 440 348 336 296)
Population mean number of perfect (error zero) cases: 27.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3.033331279223E9
Median total errors in population: 685/2
Error averages by case: (79.955 244.445 99.104 1.000000107526E9 592.735 72.916 95.77 90.631 95.799 90.613 76.543 71.757 69.011 80.215 70.729 71.865 70.586 69.838 67.71 70.965 6598.85 3.2920375337E7 1.000000078957E9 87.711 81.49 68.694 68.281 68.949 72.817 69.308 69.78 80.231 68.753 67.575 68.933 69.992 71.974 70.045 69.61 71.956 81.298 86.333 71.461 72.21 76.598 70.463 69.715 68.118 69.394 67.403 70.439 69.487 72.283 69.705 71.8 71.293 74.017 74.721 77.968 77.861 76.921 72.971 68.428 10230.157 1730.337 72.276 89.61 1.000000068051E9 78.334 71.633 385927.039 84.801 87.855 86.118 107.458 88.744 76.306 71.714 90.437 69.51)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.339
Average program size in population (points): 43.138
Average percent parens in population: 0.134
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.408
Error (vector) diversity:			 0.526
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 797716689
--- Timings ---
Current time: 1481133077622 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Lexicase best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 52
Lexicase best mean error: 0.65
Lexicase best size: 31
Percent parens: 0.097
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best partial simplification: (boolean_dup_times integer_gte integer_fromboolean boolean_stackdepth integer_min integer_shove 3 exec_do*range (boolean_yankdup integer_dup_times) integer_gt exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_shove 3 integer_shove 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Zero cases best errors: [1 2 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 52
Zero cases best mean error: 0.65
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 454 254 245 278 326 306 287 318 384 385 362 350 374 342 377 360 306 254 201 317 264 158 134 152 198 273 275 295 331 316 369 325 340 285 292 314 316 314 302 274 211 246 237 297 412 480 466 458 482 459 474 512 508 519 518 518 518 518 518 430 421 316 389 406 464 400 471 401 389 410 399 425 425 390 361 412 346 317 276)
Population mean number of elite cases: 28.40
Count of perfect (error zero) individuals by case: (195 454 254 245 278 326 306 287 318 384 385 362 350 374 342 377 360 306 254 201 317 264 158 134 152 198 273 275 295 331 316 369 325 340 285 292 314 316 314 302 274 211 246 237 297 412 480 466 458 482 459 474 512 508 519 518 518 518 518 518 430 421 316 389 406 464 400 471 401 389 410 399 425 425 390 361 412 346 317 276)
Population mean number of perfect (error zero) cases: 28.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 47574.925
Median total errors in population: 380
Error averages by case: (58.001 40.97 80.276 97.302 59.605 62.985 69.813 75.24 63.935 62.206 55.972 52.89 45.964 49.428 55.368 48.693 45.823 50.234 45.86 49.231 41.955 55.257 64.309 80.108 59.873 48.9 47.915 47.204 53.863 48.849 51.952 56.616 47.233 47.365 46.434 46.982 48.749 47.628 48.704 50.877 65.04 80.113 48.076 51.233 47.33 44.04 45.865 46.157 49.588 48.497 51.554 50.139 55.849 52.747 54.29 55.359 59.716 58.31 63.529 63.313 55.017 47.068 43093.287 45.47 68.314 48.326 66.517 55.887 64.608 52.802 79.592 69.84 67.769 73.27 94.044 76.018 57.302 48.503 60.859 49.118)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0)
Average genome size in population (length): 37.852
Average program size in population (points): 43.696
Average percent parens in population: 0.133
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.421
Error (vector) diversity:			 0.537
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 806937231
--- Timings ---
Current time: 1481133103637 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 67
Lexicase best mean error: 0.8375
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth integer_min integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 67
Zero cases best mean error: 0.8375
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 438 246 240 298 312 294 290 299 385 370 369 337 340 332 364 326 298 259 169 312 264 176 131 159 220 306 273 286 355 342 362 359 373 312 321 322 327 332 328 256 181 209 214 265 378 438 427 423 464 434 441 493 485 491 487 491 493 491 491 394 406 327 384 412 474 421 500 427 429 433 416 449 434 416 398 420 372 351 275)
Population mean number of elite cases: 28.22
Count of perfect (error zero) individuals by case: (201 438 246 240 298 312 294 290 299 385 370 369 337 340 332 364 326 298 259 169 312 264 176 131 159 220 306 273 286 355 342 362 359 373 312 321 322 327 332 328 256 181 209 214 265 378 438 427 423 464 434 441 493 485 491 487 491 493 491 491 394 406 327 384 412 474 421 500 427 429 433 416 449 434 416 398 420 372 351 275)
Population mean number of perfect (error zero) cases: 28.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 570490.145
Median total errors in population: 367
Error averages by case: (77.993 54.919 76.174 107.397 69.494 65.938 78.524 79.915 77.852 80.258 64.692 57.738 55.804 58.568 64.923 57.603 54.231 61.361 57.646 63.017 59.005 69.251 72.993 91.934 69.572 56.541 55.482 55.506 65.064 65.983 65.023 61.388 59.116 61.585 59.865 60.33 60.367 61.446 63.122 63.428 65.253 76.267 57.846 61.462 62.633 58.618 59.206 61.13 60.628 63.343 60.664 64.606 66.102 63.939 66.277 66.333 67.324 72.023 70.026 75.202 76.05 69.095 86158.985 61.413 87.378 58.319 479078.092 57.832 80.639 69.773 80.78 77.679 70.549 69.663 100.928 80.836 62.831 64.419 74.548 70.406)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.836
Average program size in population (points): 43.804
Average percent parens in population: 0.136
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.412
Error (vector) diversity:			 0.528
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 816058106
--- Timings ---
Current time: 1481133131642 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 66
Lexicase best mean error: 0.825
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 66
Zero cases best mean error: 0.825
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 431 287 249 280 317 303 277 324 405 368 365 358 366 340 365 342 296 273 182 326 264 149 120 138 186 286 267 314 359 317 356 326 331 282 300 309 308 313 296 231 212 217 222 281 395 486 483 468 488 473 496 528 531 532 534 532 537 531 533 443 431 338 385 437 458 447 491 420 411 432 394 456 434 427 399 433 375 346 292)
Population mean number of elite cases: 28.85
Count of perfect (error zero) individuals by case: (217 431 287 249 280 317 303 277 324 405 368 365 358 366 340 365 342 296 273 182 326 264 149 120 138 186 286 267 314 359 317 356 326 331 282 300 309 308 313 296 231 212 217 222 281 395 486 483 468 488 473 496 528 531 532 534 532 537 531 533 443 431 338 385 437 458 447 491 420 411 432 394 456 434 427 399 433 375 346 292)
Population mean number of perfect (error zero) cases: 28.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5496.846
Median total errors in population: 913/2
Error averages by case: (71.968 54.989 87.081 98.294 68.541 62.931 84.63 85.075 84.872 79.248 64.97 57.342 56.693 61.649 65.813 60.467 58.224 61.365 55.575 57.53 63.029 65.195 67.804 89.77 75.44 59.726 54.834 54.851 62.932 62.458 69.222 67.849 61.321 60.35 62.11 60.253 64.899 60.347 64.317 61.044 82.133 76.026 56.427 59.18 61.05 61.38 59.69 59.587 58.064 59.586 60.466 62.013 66.817 62.092 64.014 65.505 64.777 72.225 68.259 76.141 67.908 66.036 54.486 54.512 84.267 61.276 75.505 60.739 79.498 76.713 153.156 79.475 74.588 88.632 100.875 85.928 62.993 65.264 76.312 68.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.468
Average program size in population (points): 43.348
Average percent parens in population: 0.136
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.397
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 825189249
--- Timings ---
Current time: 1481133159800 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 66
Lexicase best mean error: 0.825
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 66
Zero cases best mean error: 0.825
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 418 272 273 304 310 301 276 315 398 372 366 355 372 345 370 372 326 261 224 331 245 187 146 164 215 269 256 292 336 309 355 323 351 307 309 298 301 298 294 236 238 221 195 282 382 457 469 454 467 469 491 521 521 526 522 530 529 530 528 436 444 336 367 415 490 453 491 442 443 450 427 463 476 442 406 427 370 369 294)
Population mean number of elite cases: 29.03
Count of perfect (error zero) individuals by case: (202 418 272 273 304 310 301 276 315 398 372 366 355 372 345 370 372 326 261 224 331 245 187 146 164 215 269 256 292 336 309 355 323 351 307 309 298 301 298 294 236 238 221 195 282 382 457 469 454 467 469 491 521 521 526 522 530 529 530 528 436 444 336 367 415 490 453 491 442 443 450 427 463 476 442 406 427 370 369 294)
Population mean number of perfect (error zero) cases: 29.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 10753.505
Median total errors in population: 351
Error averages by case: (57.986 33.009 74.229 79.959 49.475 42.056 64.447 77.978 54.195 71.449 53.976 47.96 46.177 52.535 56.098 45.827 42.835 42.237 47.701 43.768 40.061 40.282 52.796 78.831 59.45 47.01 45.284 45.426 44.236 47.285 48.403 45.432 44.403 42.944 44.071 42.927 48.561 42.473 44.618 45.309 51.261 55.703 42.684 51.168 45.869 40.998 42.478 39.058 42.504 43.649 46.652 50.232 51.086 44.528 47.49 47.378 47.56 58.67 47.932 59.225 55.954 49.009 40.533 36.589 87.549 37.234 47.53 44.879 54.613 50.789 6715.54 50.738 59.6 65.494 82.142 66.774 49.392 47.787 65.431 56.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.495
Average program size in population (points): 43.327
Average percent parens in population: 0.135
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.414
Error (vector) diversity:			 0.517
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 834474840
--- Timings ---
Current time: 1481133188140 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 43
Lexicase best total error: 66
Lexicase best mean error: 0.825
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_gt boolean_shove integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 0 2 2 2 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 43
Zero cases best number of zero cases: 43
Zero cases best total error: 66
Zero cases best mean error: 0.825
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 381 283 258 300 327 327 261 304 389 372 363 375 391 374 399 379 357 302 220 306 226 166 112 156 198 283 259 299 332 317 358 326 376 311 307 317 297 320 316 236 211 194 188 279 380 437 454 446 479 455 482 514 522 527 529 532 534 532 532 418 429 349 349 416 457 435 451 420 432 441 408 482 462 442 426 431 380 363 303)
Population mean number of elite cases: 28.91
Count of perfect (error zero) individuals by case: (204 381 283 258 300 327 327 261 304 389 372 363 375 391 374 399 379 357 302 220 306 226 166 112 156 198 283 259 299 332 317 358 326 376 311 307 317 297 320 316 236 211 194 188 279 380 437 454 446 479 455 482 514 522 527 529 532 534 532 532 418 429 349 349 416 457 435 451 420 432 441 408 482 462 442 426 431 380 363 303)
Population mean number of perfect (error zero) cases: 28.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5281.437
Median total errors in population: 302
Error averages by case: (66.968 55.027 82.114 109.648 73.401 69.786 79.395 84.045 83.131 79.457 64.416 60.579 54.935 58.555 61.965 60.552 59.756 57.395 58.36 57.444 63.082 58.479 67.756 93.737 79.334 55.842 54.775 57.722 61.13 63.777 58.78 66.858 57.107 53.721 58.09 54.626 56.667 56.801 57.765 56.067 80.004 64.998 58.796 62.476 62.66 55.696 54.698 54.043 57.093 58.395 58.516 61.015 61.373 58.687 58.609 59.205 59.206 63.64 61.225 65.019 68.942 65.985 58.37 53.579 101.453 65.11 72.475 65.847 79.22 70.505 79.458 71.425 68.591 83.513 107.308 70.202 62.972 67.063 75.194 69.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.45
Average program size in population (points): 43.466
Average percent parens in population: 0.139
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.404
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 843637066
--- Timings ---
Current time: 1481133216263 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 373 295 290 311 341 314 279 289 375 363 369 336 348 342 361 357 323 272 217 360 254 167 119 151 198 299 281 331 375 339 358 365 379 326 345 332 328 355 312 254 212 218 208 274 384 464 459 451 500 460 498 511 532 537 542 538 541 540 540 358 378 311 364 417 448 433 474 402 417 429 394 459 455 426 409 446 384 382 293)
Population mean number of elite cases: 29.08
Count of perfect (error zero) individuals by case: (207 373 295 290 311 341 314 279 289 375 363 369 336 348 342 361 357 323 272 217 360 254 167 119 151 198 299 281 331 375 339 358 365 379 326 345 332 328 355 312 254 212 218 208 274 384 464 459 451 500 460 498 511 532 537 542 538 541 540 540 358 378 311 364 417 448 433 474 402 417 429 394 459 455 426 409 446 384 382 293)
Population mean number of perfect (error zero) cases: 29.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4395.13
Median total errors in population: 360
Error averages by case: (55.101 52.152 78.297 99.28 66.567 45.089 68.538 79.318 63.63 73.754 49.582 42.38 40.954 48.371 47.615 43.633 41.312 39.077 42.575 42.923 49.978 54.464 67.879 76.989 52.552 52.546 41.386 45.224 46.175 51.046 51.805 54.493 44.014 46.059 46.696 42.875 49.372 45.674 50.552 48.416 69.974 62.155 42.261 46.841 50.762 45.28 45.79 45.067 43.566 45.808 46.354 46.836 51.189 45.722 47.678 48.506 48.038 53.513 51.263 56.157 56.137 54.165 51.551 53.717 92.293 54.284 65.412 50.614 70.484 62.806 76.956 60.717 60.858 68.859 92.497 64.25 53.373 52.442 65.897 56.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.939
Average program size in population (points): 43.967
Average percent parens in population: 0.138
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.391
Error (vector) diversity:			 0.494
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 852848687
--- Timings ---
Current time: 1481133244354 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 380 256 257 301 320 286 271 291 380 353 373 347 368 368 383 402 354 281 209 331 237 164 138 161 212 292 269 295 345 342 341 371 361 314 313 314 294 317 293 225 223 204 215 299 379 472 470 458 498 458 501 510 549 550 554 552 554 553 554 406 421 353 357 408 465 419 483 416 425 418 423 483 462 445 392 431 376 362 276)
Population mean number of elite cases: 29.08
Count of perfect (error zero) individuals by case: (198 380 256 257 301 320 286 271 291 380 353 373 347 368 368 383 402 354 281 209 331 237 164 138 161 212 292 269 295 345 342 341 371 361 314 313 314 294 317 293 225 223 204 215 299 379 472 470 458 498 458 501 510 549 550 554 552 554 553 554 406 421 353 357 408 465 419 483 416 425 418 423 483 462 445 392 431 376 362 276)
Population mean number of perfect (error zero) cases: 29.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup boolean_not) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup boolean_not) integer_gt boolean_shove)
Errors: [1 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
Total: 47
Mean: 0.5875
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3232.475
Median total errors in population: 310
Error averages by case: (43.069 36.151 65.394 80.408 46.581 44.026 53.486 46.446 54.579 54.634 32.979 33.567 24.724 28.683 34.714 36.993 31.194 40.115 32.446 32.757 39.078 35.574 44.963 61.093 52.452 32.804 30.744 32.308 35.68 38.657 43.471 39.584 41.729 35.04 31.247 33.971 37.302 32.297 32.943 33.506 51.218 39.223 28.676 39.704 34.94 30.665 32.47 29.697 31.057 28.231 34.494 32.307 38.317 32.578 33.817 35.956 34.569 39.077 36.456 39.312 51.053 40.105 31.557 28.695 76.528 28.354 50.729 31.75 50.677 42.072 66.895 37.641 46.798 56.888 64.312 53.242 39.198 32.661 47.917 35.25)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.382
Average program size in population (points): 43.331
Average percent parens in population: 0.137
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.422
Error (vector) diversity:			 0.546
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 862225691
--- Timings ---
Current time: 1481133272453 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 394 267 286 305 303 296 277 292 379 365 383 379 364 359 370 359 343 281 206 355 265 158 124 144 205 257 264 315 346 350 372 365 359 320 323 322 299 316 298 230 234 191 209 283 364 453 424 439 470 439 463 476 525 527 529 529 529 531 532 405 409 357 386 440 429 434 489 408 417 445 435 501 483 437 387 435 393 359 314)
Population mean number of elite cases: 28.93
Count of perfect (error zero) individuals by case: (221 394 267 286 305 303 296 277 292 379 365 383 379 364 359 370 359 343 281 206 355 265 158 124 144 205 257 264 315 346 350 372 365 359 320 323 322 299 316 298 230 234 191 209 283 364 453 424 439 470 439 463 476 525 527 529 529 529 531 532 405 409 357 386 440 429 434 489 408 417 445 435 501 483 437 387 435 393 359 314)
Population mean number of perfect (error zero) cases: 28.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4184.6
Median total errors in population: 358
Error averages by case: (56.944 47.123 72.154 78.272 58.431 52.056 57.253 66.794 67.828 63.5 44.421 40.331 39.376 49.975 44.919 43.693 42.938 92.451 43.251 43.086 50.919 45.348 58.955 67.802 62.065 40.326 41.584 47.392 44.755 46.286 54.321 49.705 42.242 44.646 41.928 44.222 46.153 44.367 47.661 44.864 55.155 60.154 39.214 54.626 47.479 43.667 44.517 42.885 43.13 42.289 44.211 44.387 54.172 45.992 46.116 49.333 48.33 54.824 49.466 55.019 63.966 49.058 42.458 39.697 77.314 50.345 58.764 44.78 64.402 54.723 69.564 52.329 52.474 63.554 79.192 71.881 51.712 55.832 62.45 44.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.32
Average program size in population (points): 43.325
Average percent parens in population: 0.140
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.411
Error (vector) diversity:			 0.528
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 871486679
--- Timings ---
Current time: 1481133300177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 397 279 275 334 327 301 281 304 375 337 403 371 357 351 361 364 321 250 211 354 271 151 121 144 193 267 279 307 364 344 380 371 370 319 343 331 316 320 321 234 199 191 197 295 329 443 431 430 446 419 451 490 522 522 527 527 532 529 531 370 389 342 377 441 456 431 488 411 391 423 436 493 456 456 407 446 393 352 292)
Population mean number of elite cases: 28.76
Count of perfect (error zero) individuals by case: (197 397 279 275 334 327 301 281 304 375 337 403 371 357 351 361 364 321 250 211 354 271 151 121 144 193 267 279 307 364 344 380 371 370 319 343 331 316 320 321 234 199 191 197 295 329 443 431 430 446 419 451 490 522 522 527 527 532 529 531 370 389 342 377 441 456 431 488 411 391 423 436 493 456 456 407 446 393 352 292)
Population mean number of perfect (error zero) cases: 28.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4676.203
Median total errors in population: 328
Error averages by case: (62.975 44.285 109.807 95.837 54.663 55.778 61.495 77.979 68.987 75.678 52.149 49.8 47.518 51.962 44.619 52.479 47.808 47.289 47.222 49.851 59.123 58.267 53.273 71.864 63.216 48.995 47.705 47.44 53.571 50.813 55.24 54.757 50.253 51.312 52.658 54.294 52.483 57.997 54.828 55.199 55.435 60.338 45.316 53.879 51.53 50.057 49.869 50.345 55.794 50.635 56.119 54.792 61.454 55.713 55.514 59.336 57.725 63.299 58.885 63.572 73.995 61.079 53.553 47.646 101.009 55.203 65.544 54.775 62.704 62.116 69.023 51.555 57.669 64.776 82.232 68.922 54.041 54.09 76.673 58.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.54
Average program size in population (points): 43.672
Average percent parens in population: 0.141
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.402
Error (vector) diversity:			 0.532
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 880690279
--- Timings ---
Current time: 1481133327963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 391 279 289 333 317 306 277 307 373 371 395 351 348 337 362 355 310 270 205 385 272 156 114 162 196 316 303 319 371 359 355 351 379 350 332 317 335 313 315 248 223 226 225 302 354 464 445 455 473 459 476 513 550 551 556 554 554 553 555 374 375 353 387 435 472 439 507 442 423 448 431 509 459 438 396 444 388 348 285)
Population mean number of elite cases: 29.48
Count of perfect (error zero) individuals by case: (215 391 279 289 333 317 306 277 307 373 371 395 351 348 337 362 355 310 270 205 385 272 156 114 162 196 316 303 319 371 359 355 351 379 350 332 317 335 313 315 248 223 226 225 302 354 464 445 455 473 459 476 513 550 551 556 554 554 553 555 374 375 353 387 435 472 439 507 442 423 448 431 509 459 438 396 444 388 348 285)
Population mean number of perfect (error zero) cases: 29.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4317.324
Median total errors in population: 368
Error averages by case: (58.959 49.091 78.184 87.325 53.276 51.02 66.362 55.978 56.242 82.792 50.594 45.438 41.362 50.698 44.493 45.143 49.624 46.683 45.581 44.658 51.878 44.373 56.936 66.86 57.116 50.518 45.787 44.766 55.626 46.268 54.884 50.899 44.458 46.769 44.614 45.601 44.408 47.754 50.917 49.705 56.174 55.849 44.225 49.978 47.609 44.493 45.237 45.478 44.836 45.256 47.386 46.382 52.077 48.475 48.913 50.059 49.43 56.994 52.84 59.522 66.993 62.098 46.502 47.666 76.31 45.229 60.502 47.582 69.415 65.698 72.98 53.526 60.533 62.697 87.254 66.955 53.995 54.011 65.772 56.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.62
Average program size in population (points): 43.519
Average percent parens in population: 0.137
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.407
Error (vector) diversity:			 0.515
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 890013023
--- Timings ---
Current time: 1481133355865 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.205
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 394 271 293 338 329 319 265 296 363 376 406 375 379 388 399 398 333 301 206 370 251 116 131 144 182 281 281 271 348 297 333 358 350 335 342 313 315 330 314 224 218 226 180 283 364 457 452 433 473 452 465 508 553 557 557 560 557 559 561 401 397 361 385 436 420 458 482 421 432 437 411 482 453 441 412 446 411 352 302)
Population mean number of elite cases: 29.26
Count of perfect (error zero) individuals by case: (191 394 271 293 338 329 319 265 296 363 376 406 375 379 388 399 398 333 301 206 370 251 116 131 144 182 281 281 271 348 297 333 358 350 335 342 313 315 330 314 224 218 226 180 283 364 457 452 433 473 452 465 508 553 557 557 560 557 559 561 401 397 361 385 436 420 458 482 421 432 437 411 482 453 441 412 446 411 352 302)
Population mean number of perfect (error zero) cases: 29.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3816.68
Median total errors in population: 302
Error averages by case: (50.05 33.185 56.28 81.35 48.382 41.098 42.578 63.289 58.121 58.71 52.137 39.566 37.276 53.62 41.079 40.7 41.241 38.906 40.294 36.872 41.956 36.406 51.156 69.054 46.268 43.568 41.394 44.258 42.839 42.398 45.536 42.338 39.792 42.638 40.724 40.875 42.61 43.445 44.117 43.201 49.417 52.848 39.219 51.257 42.544 40.159 41.011 41.196 43.853 43.119 45.546 43.493 49.161 47.21 47.753 50.582 48.092 55.841 51.323 55.921 59.996 52.105 39.486 44.797 55.455 42.409 59.464 42.621 57.77 52.03 55.979 40.689 43.873 52.634 71.353 59.798 47.946 49.968 65.243 44.212)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.976
Average program size in population (points): 42.998
Average percent parens in population: 0.141
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.401
Error (vector) diversity:			 0.529
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 899238791
--- Timings ---
Current time: 1481133384023 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 389 282 277 308 311 289 272 314 363 379 400 363 371 371 371 374 337 304 189 354 244 164 123 142 200 273 275 301 337 302 334 362 350 334 328 316 320 322 316 227 228 236 188 287 370 457 444 445 475 454 471 491 534 538 537 541 542 541 542 413 395 353 361 419 464 437 495 438 458 458 431 489 451 416 403 429 378 343 287)
Population mean number of elite cases: 29.02
Count of perfect (error zero) individuals by case: (193 389 282 277 308 311 289 272 314 363 379 400 363 371 371 371 374 337 304 189 354 244 164 123 142 200 273 275 301 337 302 334 362 350 334 328 316 320 322 316 227 228 236 188 287 370 457 444 445 475 454 471 491 534 538 537 541 542 541 542 413 395 353 361 419 464 437 495 438 458 458 431 489 451 416 403 429 378 343 287)
Population mean number of perfect (error zero) cases: 29.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.000005073151E9
Median total errors in population: 302
Error averages by case: (62.001 57.093 81.24 105.756 74.488 64.747 70.646 69.475 69.988 70.206 67.858 58.809 53.43 63.847 54.407 56.681 58.118 53.288 55.544 52.825 64.959 52.314 71.83 87.074 64.305 60.672 54.562 58.216 58.148 58.776 61.254 56.318 51.913 55.976 54.307 54.178 56.397 56.044 58.264 59.806 64.274 69.967 57.89 60.597 56.625 58.715 53.581 55.156 56.929 56.409 60.808 63.607 63.186 57.866 1.000000058831E9 1.000000059215E9 1.000000059696E9 1.000000063433E9 1.000000062617E9 1.00000006619E9 64.942 63.064 53.428 63.829 72.565 60.146 70.486 56.601 75.459 68.486 74.773 64.499 65.853 65.043 109.44 64.929 69.172 66.191 83.66 59.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.882
Average program size in population (points): 42.96
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.405
Error (vector) diversity:			 0.524
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 908468779
--- Timings ---
Current time: 1481133411892 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 378 253 281 306 303 294 255 278 348 368 383 362 350 349 376 358 329 306 202 361 259 119 121 147 197 256 282 275 364 294 306 376 323 328 311 298 312 305 302 218 228 246 216 293 368 459 449 446 473 452 460 497 550 546 546 551 554 549 550 417 425 379 397 451 452 459 486 445 434 440 424 490 466 449 400 435 410 343 316)
Population mean number of elite cases: 28.98
Count of perfect (error zero) individuals by case: (195 378 253 281 306 303 294 255 278 348 368 383 362 350 349 376 358 329 306 202 361 259 119 121 147 197 256 282 275 364 294 306 376 323 328 311 298 312 305 302 218 228 246 216 293 368 459 449 446 473 452 460 497 550 546 546 551 554 549 550 417 425 379 397 451 452 459 486 445 434 440 424 490 466 449 400 435 410 343 316)
Population mean number of perfect (error zero) cases: 28.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (integer_empty boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (integer_empty boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 4835.561
Median total errors in population: 367
Error averages by case: (57.985 48.228 73.339 81.813 59.312 56.983 66.708 70.519 61.417 72.458 57.989 56.538 46.636 65.273 53.39 48.203 48.166 51.338 53.866 49.047 50.972 49.303 75.855 87.147 63.652 60.611 50.249 57.281 52.144 57.41 59.799 56.857 52.575 53.055 53.372 55.257 56.056 53.872 58.053 62.192 59.357 61.256 54.994 55.869 61.787 50.873 52.065 52.63 57.521 52.753 58.613 57.322 61.652 58.517 60.545 60.44 59.248 63.802 62.076 67.015 65.975 57.011 45.483 54.671 69.478 61.227 68.415 55.485 81.434 65.802 81.709 62.702 63.55 61.949 90.232 75.173 61.443 56.31 87.552 56.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.745
Average program size in population (points): 42.835
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.409
Error (vector) diversity:			 0.521
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 917616995
--- Timings ---
Current time: 1481133439887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 373 279 308 325 309 328 296 277 349 367 378 372 344 368 379 360 328 317 214 368 259 137 125 147 207 273 265 285 349 306 327 380 357 367 336 321 333 334 330 209 221 217 225 301 375 441 437 447 471 439 470 469 528 536 535 539 538 541 540 385 381 383 379 428 467 410 469 429 404 435 395 487 463 435 399 455 373 366 328)
Population mean number of elite cases: 29.02
Count of perfect (error zero) individuals by case: (198 373 279 308 325 309 328 296 277 349 367 378 372 344 368 379 360 328 317 214 368 259 137 125 147 207 273 265 285 349 306 327 380 357 367 336 321 333 334 330 209 221 217 225 301 375 441 437 447 471 439 470 469 528 536 535 539 538 541 540 385 381 383 379 428 467 410 469 429 404 435 395 487 463 435 399 455 373 366 328)
Population mean number of perfect (error zero) cases: 29.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_pop boolean_pop boolean_xor boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 1 1 1 1 1 1 1 1 1 1 1]
Total: 48
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3905.328
Median total errors in population: 575/2
Error averages by case: (57.005 44.163 65.223 72.314 54.379 41.107 57.69 65.463 53.293 74.13 42.005 42.371 41.455 53.028 39.318 40.125 45.408 39.769 36.86 40.164 48.931 45.282 52.858 66.292 48.409 47.353 40.839 43.377 40.711 42.488 44.741 43.137 39.319 37.153 41.367 39.879 42.842 39.34 38.02 41.612 47.375 60.205 39.762 42.157 48.989 39.401 39.161 36.292 38.585 37.883 43.121 38.548 42.803 45.133 45.373 44.357 44.78 49.19 47.293 51.793 60.003 53.153 36.473 51.666 60.382 47.153 61.583 49.68 59.406 54.808 71.81 54.578 54.483 52.693 91.231 73.06 45.248 51.402 53.862 51.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.858
Average program size in population (points): 43.083
Average percent parens in population: 0.144
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.41
Error (vector) diversity:			 0.516
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 926781873
--- Timings ---
Current time: 1481133467759 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 368 258 321 313 314 344 264 291 390 395 394 382 354 375 387 358 347 311 186 383 260 154 147 139 182 243 286 283 357 321 348 372 357 332 342 332 325 318 330 219 234 227 221 332 411 488 458 482 505 457 509 532 557 562 558 562 559 561 560 402 401 364 390 434 462 437 488 425 408 435 417 467 469 420 398 411 389 352 290)
Population mean number of elite cases: 29.63
Count of perfect (error zero) individuals by case: (210 368 258 321 313 314 344 264 291 390 395 394 382 354 375 387 358 347 311 186 383 260 154 147 139 182 243 286 283 357 321 348 372 357 332 342 332 325 318 330 219 234 227 221 332 411 488 458 482 505 457 509 532 557 562 558 562 559 561 560 402 401 364 390 434 462 437 488 425 408 435 417 467 469 420 398 411 389 352 290)
Population mean number of perfect (error zero) cases: 29.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4799.931
Median total errors in population: 267
Error averages by case: (66.998 46.381 63.217 78.22 63.504 49.853 69.442 73.331 69.983 67.209 53.274 54.35 52.133 57.024 48.028 44.784 51.144 50.674 50.377 53.243 52.966 46.289 64.818 78.651 61.165 61.406 53.586 46.656 50.566 59.161 56.446 53.223 54.861 60.336 56.634 54.365 58.26 55.964 57.69 59.209 54.352 64.72 53.256 48.577 58.929 54.386 54.879 55.976 58.541 56.686 62.044 61.638 64.625 66.14 63.837 66.294 66.968 74.634 70.002 77.454 66.944 61.076 46.505 56.65 59.426 51.132 60.592 52.608 70.304 69.628 66.741 56.472 68.478 57.709 92.331 71.922 49.007 68.053 74.833 60.161)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.783
Average program size in population (points): 43.218
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.375
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 935917979
--- Timings ---
Current time: 1481133495346 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 394 286 313 341 311 334 280 283 369 382 406 363 342 345 375 356 338 303 202 378 242 143 127 158 196 233 266 307 358 335 348 357 345 357 330 333 339 331 338 211 210 220 233 316 382 484 463 473 478 440 490 525 563 566 565 569 572 568 568 376 404 363 384 432 464 436 480 445 429 443 435 495 455 428 424 443 371 374 304)
Population mean number of elite cases: 29.65
Count of perfect (error zero) individuals by case: (220 394 286 313 341 311 334 280 283 369 382 406 363 342 345 375 356 338 303 202 378 242 143 127 158 196 233 266 307 358 335 348 357 345 357 330 333 339 331 338 211 210 220 233 316 382 484 463 473 478 440 490 525 563 566 565 569 572 568 568 376 404 363 384 432 464 436 480 445 429 443 435 495 455 428 424 443 371 374 304)
Population mean number of perfect (error zero) cases: 29.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4283.936
Median total errors in population: 259
Error averages by case: (55.924 43.11 58.232 66.275 52.375 51.751 62.426 74.077 67.124 63.991 45.741 43.735 48.696 47.706 47.091 45.635 44.564 44.149 47.492 47.227 49.892 46.292 56.874 76.173 56.528 52.796 47.017 48.692 46.069 49.647 51.162 53.672 47.294 49.177 47.71 48.038 46.531 47.798 47.105 50.402 52.324 53.116 45.385 45.308 52.331 46.742 46.82 46.265 46.703 47.84 50.629 50.73 52.684 55.25 54.551 58.747 57.395 60.031 59.808 62.506 74.955 65.982 36.47 50.622 52.386 54.284 61.545 48.487 49.565 53.566 62.827 54.694 57.481 52.981 91.506 72.07 45.347 63.251 67.746 46.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.794
Average program size in population (points): 42.945
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.414
Error (vector) diversity:			 0.52
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 945232014
--- Timings ---
Current time: 1481133523461 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 45
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 379 270 307 298 306 310 289 287 410 387 404 385 373 379 405 368 343 305 193 350 247 139 124 144 192 258 267 300 341 316 336 368 372 373 342 349 354 352 347 206 213 213 219 293 381 464 429 443 467 434 475 513 546 550 550 557 554 556 557 396 390 341 370 445 451 471 503 461 464 473 458 504 465 451 399 435 388 371 306)
Population mean number of elite cases: 29.65
Count of perfect (error zero) individuals by case: (217 379 270 307 298 306 310 289 287 410 387 404 385 373 379 405 368 343 305 193 350 247 139 124 144 192 258 267 300 341 316 336 368 372 373 342 349 354 352 347 206 213 213 219 293 381 464 429 443 467 434 475 513 546 550 550 557 554 556 557 396 390 341 370 445 451 471 503 461 464 473 458 504 465 451 399 435 388 371 306)
Population mean number of perfect (error zero) cases: 29.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 26458.724
Median total errors in population: 447/2
Error averages by case: (63.96 45.171 56.189 67.192 55.504 49.805 65.712 59.067 65.92 61.592 46.86 46.292 52.411 54.01 46.803 52.262 45.757 45.905 44.585 48.644 49.989 47.25 58.837 78.004 57.034 49.495 51.174 56.044 55.103 46.412 47.632 54.597 47.919 45.472 46.302 1568.028 46.319 2242.919 2791.456 49.39 58.384 60.066 46.959 50.124 45.692 48.072 1203.089 1773.281 2506.485 46.431 4540.527 5881.012 49.44 53.283 52.652 55.246 53.724 60.461 56.366 63.209 69.964 68.04 44.504 59.607 58.4 50.153 62.599 51.557 65.309 55.517 57.583 52.459 56.429 59.935 69.326 77.096 49.946 58.143 74.06 50.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.794
Average program size in population (points): 43.022
Average percent parens in population: 0.145
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.404
Error (vector) diversity:			 0.522
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 954474734
--- Timings ---
Current time: 1481133551321 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 45
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 363 269 288 299 321 290 285 309 400 402 420 394 387 370 402 357 329 298 220 337 253 141 123 119 194 239 264 287 336 315 322 354 370 341 349 318 328 326 324 213 214 207 226 284 380 459 436 444 474 444 484 479 556 559 557 559 559 559 560 381 392 351 405 447 446 430 497 439 452 465 456 512 500 468 431 438 400 379 297)
Population mean number of elite cases: 29.49
Count of perfect (error zero) individuals by case: (212 363 269 288 299 321 290 285 309 400 402 420 394 387 370 402 357 329 298 220 337 253 141 123 119 194 239 264 287 336 315 322 354 370 341 349 318 328 326 324 213 214 207 226 284 380 459 436 444 474 444 484 479 556 559 557 559 559 559 560 381 392 351 405 447 446 430 497 439 452 465 456 512 500 468 431 438 400 379 297)
Population mean number of perfect (error zero) cases: 29.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4075.166
Median total errors in population: 267
Error averages by case: (52.973 40.188 48.225 70.275 49.399 49.996 61.729 55.424 67.922 60.738 50.518 50.038 42.317 45.096 45.72 42.945 40.597 39.672 42.637 42.53 43.983 41.369 60.957 67.176 58.097 52.238 44.579 51.906 50.817 44.043 50.123 53.627 46.213 44.183 44.49 44.42 44.442 43.344 45.2 47.229 47.407 59.183 44.149 43.878 44.016 44.999 42.176 43.215 42.503 45.032 49.647 47.43 51.274 49.921 49.339 50.987 50.525 55.044 51.988 57.575 67.987 61.054 38.454 44.536 52.425 44.269 63.708 51.586 63.407 50.686 54.778 53.489 59.596 52.981 68.208 67.021 49.907 63.002 67.504 52.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.892
Average program size in population (points): 43.089
Average percent parens in population: 0.144
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.398
Error (vector) diversity:			 0.527
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 963689539
--- Timings ---
Current time: 1481133578973 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 45
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 372 278 299 326 322 315 303 316 401 398 401 404 389 401 411 372 328 309 206 389 235 156 122 146 201 250 278 321 362 341 340 342 386 385 380 352 376 359 352 237 207 212 208 292 406 442 450 455 479 469 480 510 554 555 558 561 560 561 563 390 399 335 395 446 434 443 477 441 431 433 389 474 481 466 409 433 411 377 314)
Population mean number of elite cases: 30.00
Count of perfect (error zero) individuals by case: (238 372 278 299 326 322 315 303 316 401 398 401 404 389 401 411 372 328 309 206 389 235 156 122 146 201 250 278 321 362 341 340 342 386 385 380 352 376 359 352 237 207 212 208 292 406 442 450 455 479 469 480 510 554 555 558 561 560 561 563 390 399 335 395 446 434 443 477 441 431 433 389 474 481 466 409 433 411 377 314)
Population mean number of perfect (error zero) cases: 30.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5890.9
Median total errors in population: 193
Error averages by case: (44.977 38.182 44.209 60.412 51.471 41.691 59.022 48.387 50.938 55.979 42.18 39.87 34.067 48.883 35.131 36.192 39.954 36.877 34.626 38.072 44.927 51.811 46.606 74.55 50.713 38.134 33.206 37.728 40.323 38.891 42.572 41.821 44.407 36.183 38.586 40.263 38.295 38.823 40.95 43.337 39.377 44.889 39.34 37.343 37.513 43.336 38.246 38.802 37.982 39.658 42.954 44.013 42.252 49.034 45.943 47.174 45.759 49.324 47.179 50.749 50.041 47.112 34.545 2143.775 174.634 134.44 55.74 44.848 49.679 47.031 47.156 44.26 43.869 44.247 59.669 59.668 47.297 53.696 62.1 42.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.184
Average program size in population (points): 43.358
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.388
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 972894339
--- Timings ---
Current time: 1481133606904 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 45
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 377 281 301 337 317 314 267 299 406 400 398 400 357 374 402 362 323 283 225 384 235 142 141 140 192 246 272 330 337 335 340 327 359 375 384 346 351 360 340 228 198 233 217 314 390 474 459 450 480 466 489 512 558 560 561 560 562 561 561 351 376 351 412 478 460 425 469 423 418 449 411 480 488 492 438 447 403 398 294)
Population mean number of elite cases: 29.88
Count of perfect (error zero) individuals by case: (224 377 281 301 337 317 314 267 299 406 400 398 400 357 374 402 362 323 283 225 384 235 142 141 140 192 246 272 330 337 335 340 327 359 375 384 346 351 360 340 228 198 233 217 314 390 474 459 450 480 466 489 512 558 560 561 560 562 561 561 351 376 351 412 478 460 425 469 423 418 449 411 480 488 492 438 447 403 398 294)
Population mean number of perfect (error zero) cases: 29.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4576.084
Median total errors in population: 451/2
Error averages by case: (54.981 46.171 58.461 73.654 63.875 55.1 70.882 56.353 64.991 62.78 52.638 45.508 43.905 50.536 45.973 45.561 49.545 53.395 47.879 46.266 49.909 41.628 62.304 90.378 250.787 47.792 44.84 49.659 52.89 51.955 47.317 57.742 51.173 50.676 48.622 49.413 48.611 48.557 51.223 53.396 59.338 52.274 44.16 49.353 49.094 50.899 47.531 47.817 48.673 49.236 50.56 49.88 50.855 57.294 55.353 57.076 55.494 60.602 56.833 62.238 62.028 55.136 41.512 49.606 56.431 48.98 54.653 53.316 59.837 64.916 66.103 51.921 64.718 58.045 80.218 74.018 51.041 64.409 72.485 54.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.079
Average program size in population (points): 43.43
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.381
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 982040928
--- Timings ---
Current time: 1481133634682 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 45
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty integer_dup) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 45
Zero cases best number of zero cases: 45
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 388 281 297 327 300 352 309 293 420 402 412 403 383 404 426 370 309 290 197 392 273 147 139 144 191 241 238 320 309 323 354 323 334 354 368 332 318 337 339 231 205 235 216 321 405 482 477 475 486 484 500 533 589 593 589 591 592 592 592 369 370 341 441 479 466 447 515 433 417 439 397 474 464 439 400 435 409 383 264)
Population mean number of elite cases: 30.12
Count of perfect (error zero) individuals by case: (213 388 281 297 327 300 352 309 293 420 402 412 403 383 404 426 370 309 290 197 392 273 147 139 144 191 241 238 320 309 323 354 323 334 354 368 332 318 337 339 231 205 235 216 321 405 482 477 475 486 484 500 533 589 593 589 591 592 592 592 369 370 341 441 479 466 447 515 433 417 439 397 474 464 439 400 435 409 383 264)
Population mean number of perfect (error zero) cases: 30.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4369.292
Median total errors in population: 193
Error averages by case: (56.951 48.111 63.051 69.276 59.47 52.969 67.323 62.257 61.549 63.033 49.777 51.035 46.405 58.308 44.72 45.496 48.079 48.57 47.524 45.936 53.835 48.189 66.027 73.906 51.026 50.183 42.922 49.022 48.073 52.077 54.342 48.89 47.944 46.484 47.743 48.653 47.711 49.119 52.421 52.65 55.097 60.765 45.384 51.277 50.458 47.908 48.523 47.73 48.389 48.648 51.365 49.608 50.846 55.542 51.646 52.192 51.618 53.04 54.7 55.534 66.003 57.08 45.494 53.414 52.287 52.133 68.473 55.306 70.357 66.756 66.643 52.633 63.48 63.543 77.978 68.77 59.918 61.076 63.335 53.286)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.152
Average program size in population (points): 43.529
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.364
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 991164308
--- Timings ---
Current time: 1481133662451 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop integer_eq boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop integer_eq boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop integer_eq boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop integer_eq boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 410 277 292 306 304 337 301 293 415 363 393 386 371 366 403 363 307 278 218 379 269 142 124 121 196 255 276 309 304 303 329 311 342 327 341 319 338 316 341 229 212 226 235 319 393 454 437 462 466 460 480 504 571 572 572 573 578 574 574 369 370 350 440 483 462 433 481 462 445 443 430 494 470 466 422 438 417 385 289)
Population mean number of elite cases: 29.68
Count of perfect (error zero) individuals by case: (220 410 277 292 306 304 337 301 293 415 363 393 386 371 366 403 363 307 278 218 379 269 142 124 121 196 255 276 309 304 303 329 311 342 327 341 319 338 316 341 229 212 226 235 319 393 454 437 462 466 460 480 504 571 572 572 573 578 574 574 369 370 350 440 483 462 433 481 462 445 443 430 494 470 466 422 438 417 385 289)
Population mean number of perfect (error zero) cases: 29.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.95621851779E8
Median total errors in population: 203
Error averages by case: (54.957 44.045 59.338 70.421 5.9507791953E8 53.054 57.609 52.455 163.658 59.408 52.555 52.496 373.166 50.868 44.669 42.588 43.458 51.388 46.923 43.079 50.893 41.253 60.006 63.305 51.248 47.098 40.829 49.732 55.191 45.962 48.319 1889.746 2623.017 3044.904 4036.361 4608.685 5905.022 6637.153 8279.03 9196.453 47.343 53.97 42.547 47.516 44.773 44.455 3519.071 5229.201 7426.955 10170.452 13523.316 17543.211 22296.252 27831.606 34220.81 41520.489 49793.554 59098.884 69499.411 81052.885 61.06 55.087 42.497 44.46 58.286 42.354 58.518 46.564 53.459 53.752 58.726 55.566 61.395 57.122 51703.001 62.042 56.043 53.967 62.371 48.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.233
Average program size in population (points): 43.6
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.388
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 1000256572
--- Timings ---
Current time: 1481133690414 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Lexicase best number of elite cases: 44
Lexicase best total error: 2051
Lexicase best mean error: 25.6375
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 2051
Zero cases best mean error: 25.6375
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 367 244 291 293 308 311 284 277 396 358 382 367 360 372 397 355 312 273 196 403 276 148 157 147 202 256 257 287 297 318 325 306 334 333 358 312 335 311 355 219 207 237 203 313 386 447 444 444 474 454 477 491 562 565 562 566 567 567 567 357 350 303 431 499 448 438 481 435 453 444 429 484 476 438 392 422 381 384 299)
Population mean number of elite cases: 29.19
Count of perfect (error zero) individuals by case: (236 367 244 291 293 308 311 284 277 396 358 382 367 360 372 397 355 312 273 196 403 276 148 157 147 202 256 257 287 297 318 325 306 334 333 358 312 335 311 355 219 207 237 203 313 386 447 444 444 474 454 477 491 562 565 562 566 567 567 567 357 350 303 431 499 448 438 481 435 453 444 429 484 476 438 392 422 381 384 299)
Population mean number of perfect (error zero) cases: 29.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4234.726
Median total errors in population: 241
Error averages by case: (51.974 48.153 57.181 79.186 65.59 51.706 61.65 54.101 55.809 64.332 39.943 45.609 42.682 54.327 45.127 50.068 45.314 49.876 44.881 45.167 51.88 47.274 63.045 66.959 54.394 40.466 46.843 51.132 49.681 48.48 49.892 47.243 48.362 43.327 45.392 47.491 49.839 48.194 53.071 50.506 63.179 65.16 43.555 49.281 49.519 47.242 46.074 46.927 47.278 50.067 51.187 51.632 53.29 54.523 53.323 52.67 53.989 52.812 55.777 55.31 59.099 50.202 45.623 46.478 53.313 52.234 57.657 57.632 60.541 62.84 64.689 54.449 55.56 53.868 74.966 65.804 48.984 62.834 63.313 45.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.214
Average program size in population (points): 43.78
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.418
Error (vector) diversity:			 0.545
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 1009293468
--- Timings ---
Current time: 1481133718238 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Lexicase best number of elite cases: 44
Lexicase best total error: 2051
Lexicase best mean error: 25.6375
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 2051
Zero cases best mean error: 25.6375
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 367 279 303 308 289 321 268 295 380 374 398 369 365 374 414 343 292 264 191 408 250 160 150 146 212 275 268 341 341 329 337 357 347 341 366 333 341 338 349 237 195 221 205 319 391 459 464 459 486 470 491 489 574 576 576 578 581 578 578 347 335 319 418 453 455 423 470 430 447 463 452 488 498 438 402 429 392 369 269)
Population mean number of elite cases: 29.62
Count of perfect (error zero) individuals by case: (216 367 279 303 308 289 321 268 295 380 374 398 369 365 374 414 343 292 264 191 408 250 160 150 146 212 275 268 341 341 329 337 357 347 341 366 333 341 338 349 237 195 221 205 319 391 459 464 459 486 470 491 489 574 576 576 578 581 578 578 347 335 319 418 453 455 423 470 430 447 463 452 488 498 438 402 429 392 369 269)
Population mean number of perfect (error zero) cases: 29.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 172637.745
Median total errors in population: 192
Error averages by case: (63.279 52.649 60.192 83.208 65.525 62.329 83.52 85.242 98.099 106.556 107.8 127.076 162.989 188.47 208.525 236.08 298.254 342.087 383.608 409.71 56.26 55.517 77.154 109.603 109.586 116.694 174.678 220.924 333.154 402.073 570.697 669.743 908.935 1049.874 1381.084 1573.114 2007.174 2250.057 2798.144 3103.166 60.749 89.426 144.353 269.059 479.628 780.731 1208.468 1782.427 2513.45 3427.259 4546.653 5884.364 7472.323 9314.047 11445.154 13878.742 16637.306 19738.614 23206.857 27058.257 66.398 66.47 47.902 52.082 66.208 55.752 64.159 59.549 71.757 64.902 71.708 64.405 79.001 72.579 100.157 95.423 90.069 96.835 114.839 106.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.076
Average program size in population (points): 43.707
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.371
Error (vector) diversity:			 0.511
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 1018292063
--- Timings ---
Current time: 1481133745893 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div})
Lexicase best program: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_div))
Lexicase best partial simplification: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_div))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.205
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div})
Zero cases best program: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_div))
Zero cases best partial simplification: (boolean_dup_times integer_swap integer_sub integer_fromboolean boolean_pop exec_rot () (exec_do*times (integer_lte in1 boolean_shove) boolean_xor) (boolean_shove) integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_div))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 401 298 327 328 297 334 297 302 391 354 395 394 366 378 413 354 298 285 213 406 240 149 144 129 187 272 276 327 318 316 334 326 355 336 362 350 361 336 350 241 223 218 220 311 369 439 451 438 456 446 464 483 559 563 560 564 566 565 565 368 377 336 437 464 449 429 495 423 435 460 432 495 510 432 406 459 416 411 316)
Population mean number of elite cases: 29.77
Count of perfect (error zero) individuals by case: (220 401 298 327 328 297 334 297 302 391 354 395 394 366 378 413 354 298 285 213 406 240 149 144 129 187 272 276 327 318 316 334 326 355 336 362 350 361 336 350 241 223 218 220 311 369 439 451 438 456 446 464 483 559 563 560 564 566 565 565 368 377 336 437 464 449 429 495 423 435 460 432 495 510 432 406 459 416 411 316)
Population mean number of perfect (error zero) cases: 29.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3981.117
Median total errors in population: 393/2
Error averages by case: (50.92 35.062 188.603 63.315 102.339 40.092 57.642 57.29 42.077 54.296 42.871 40.56 37.561 49.419 35.363 38.471 39.863 43.443 41.275 42.731 38.856 52.543 49.948 52.955 51.547 44.355 37.894 40.399 48.25 43.026 43.102 43.432 41.351 40.413 42.337 46.056 43.777 45.408 45.431 45.506 47.65 55.154 41.122 41.767 43.875 39.14 41.135 44.805 45.469 44.685 43.623 45.118 48.493 46.907 46.288 46.896 46.041 47.207 47.47 48.637 53.979 47.085 37.542 35.466 95.523 43.227 56.511 49.452 54.732 48.145 44.823 49.874 52.73 57.919 75.989 58.867 50.98 60.075 54.261 42.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.652
Average program size in population (points): 44.196
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.399
Error (vector) diversity:			 0.533
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 1027457148
--- Timings ---
Current time: 1481133773887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when boolean_shove boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 44
Lexicase best total error: 50
Lexicase best mean error: 0.625
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when (boolean_shove) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_shove 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq exec_when () boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove boolean_empty boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 1 2 1 0 1 1 2 0 0 1 0 0 0 0 0 0 0 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 50
Zero cases best mean error: 0.625
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 357 268 301 324 306 318 281 270 353 371 386 355 340 359 390 362 300 278 219 415 265 143 142 152 184 256 279 332 311 317 333 363 356 352 360 334 353 327 340 222 201 236 213 289 376 442 439 436 468 443 485 467 543 548 543 551 549 552 550 366 370 349 452 521 471 443 503 448 465 470 442 513 516 476 449 475 438 417 356)
Population mean number of elite cases: 29.76
Count of perfect (error zero) individuals by case: (215 357 268 301 324 306 318 281 270 353 371 386 355 340 359 390 362 300 278 219 415 265 143 142 152 184 256 279 332 311 317 333 363 356 352 360 334 353 327 340 222 201 236 213 289 376 442 439 436 468 443 485 467 543 548 543 551 549 552 550 366 370 349 452 521 471 443 503 448 465 470 442 513 516 476 449 475 438 417 356)
Population mean number of perfect (error zero) cases: 29.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.00000494176E9
Median total errors in population: 160
Error averages by case: (57.963 43.172 47.261 70.337 48.522 64.17 56.807 62.214 52.252 60.67 52.736 48.271 46.871 66.524 50.676 54.475 51.047 46.896 45.901 49.796 50.855 43.264 53.985 67.946 62.492 50.272 52.653 53.917 51.099 48.718 53.474 64.268 51.571 51.711 51.993 56.31 53.707 52.517 54.966 56.818 50.258 52.986 54.872 49.167 52.53 50.403 53.285 52.405 54.14 53.147 81.502 53.198 97.117 99.004 107.343 114.936 121.966 130.2 139.395 149.083 54.958 56.054 51.45 45.48 55.321 46.239 67.579 1.00000005348E9 63.433 51.639 55.884 61.852 60.248 59.071 77.836 61.971 51.007 64.999 76.091 51.134)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0)
Average genome size in population (length): 37.742
Average program size in population (points): 44.252
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.356
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 1036553034
--- Timings ---
Current time: 1481133801437 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 390 266 319 304 297 322 279 303 409 395 402 369 367 405 406 362 310 279 200 403 278 164 170 161 199 243 268 334 322 323 344 343 334 352 353 356 335 342 370 247 225 247 222 295 354 421 426 427 440 432 468 483 537 536 534 539 543 540 539 387 386 323 451 495 457 423 488 435 443 448 409 467 473 435 394 445 406 365 307)
Population mean number of elite cases: 29.47
Count of perfect (error zero) individuals by case: (201 390 266 319 304 297 322 279 303 409 395 402 369 367 405 406 362 310 279 200 403 278 164 170 161 199 243 268 334 322 323 344 343 334 352 353 356 335 342 370 247 225 247 222 295 354 421 426 427 440 432 468 483 537 536 534 539 543 540 539 387 386 323 451 495 457 423 488 435 443 448 409 467 473 435 394 445 406 365 307)
Population mean number of perfect (error zero) cases: 29.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3967.511
Median total errors in population: 161
Error averages by case: (54.961 46.066 52.14 65.157 48.587 52.074 60.273 51.228 48.799 49.167 45.783 39.062 44.428 52.038 39.653 44.99 44.654 42.282 41.701 41.227 43.845 37.281 54.818 54.816 59.199 43.186 40.983 45.76 48.739 44.21 46.365 47.455 46.011 45.072 45.511 45.17 48.545 45.989 48.296 51.099 48.18 55.712 45.449 42.339 45.148 44.889 44.838 45.504 51.321 46.742 52.018 49.269 54.29 49.219 53.29 49.985 51.199 51.641 53.057 54.316 48.962 53.025 46.538 38.368 47.279 44.171 62.495 53.6 57.328 47.765 55.681 52.697 61.59 50.045 81.072 56.006 47.731 52.81 60.31 55.012)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.474
Average program size in population (points): 43.936
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.378
Error (vector) diversity:			 0.538
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 1045734671
--- Timings ---
Current time: 1481133829538 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Lexicase best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Lexicase best number of elite cases: 44
Lexicase best total error: 2051
Lexicase best mean error: 25.6375
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_pop integer_dup boolean_stackdepth integer_min integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) boolean_pop exec_eq boolean_dup integer_mult boolean_shove 3 integer_eq exec_do*range (in1 exec_dup_items 5 integer_shove boolean_shove) integer_fromboolean boolean_stackdepth integer_min)
Zero cases best errors: [1 0 0 0 2 1 0 2 1 2 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 3 0 0 0 0 0 0 0 0 1000 0 5 0 1]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 2051
Zero cases best mean error: 25.6375
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 366 269 295 298 315 287 258 281 356 361 365 343 344 390 401 371 306 275 173 418 261 145 153 162 223 273 286 337 336 355 330 372 369 349 381 368 343 345 372 251 229 245 221 323 392 468 440 445 483 462 501 498 575 579 577 579 579 581 580 371 382 310 425 469 447 420 504 469 445 477 430 475 502 427 429 447 401 374 318)
Population mean number of elite cases: 29.97
Count of perfect (error zero) individuals by case: (209 366 269 295 298 315 287 258 281 356 361 365 343 344 390 401 371 306 275 173 418 261 145 153 162 223 273 286 337 336 355 330 372 369 349 381 368 343 345 372 251 229 245 221 323 392 468 440 445 483 462 501 498 575 579 577 579 579 581 580 371 382 310 425 469 447 420 504 469 445 477 430 475 502 427 429 447 401 374 318)
Population mean number of perfect (error zero) cases: 29.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3068.609
Median total errors in population: 220N
Error averages by case: (44.039 38.225 44.359 69.486 39.641 38.172 52.756 41.314 33.1 46.001 31.999 27.835 30.692 45.63 28.862 29.435 27.646 28.827 31.108 29.178 41.898 28.356 46.245 52.177 48.956 30.508 30.067 30.661 35.712 30.312 35.617 32.79 32.157 32.945 33.339 34.295 34.937 34.438 36.699 35.193 33.466 37.042 30.523 30.079 30.053 32.497 33.215 34.268 33.911 34.072 37.256 35.631 39.347 36.506 37.446 36.741 38.763 38.785 38.577 39.701 45.04 45.097 37.605 36.551 48.423 29.382 55.661 45.665 49.778 39.982 33.18 34.195 49.893 40.222 66.221 49.217 37.209 46.366 59.273 36.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.553
Average program size in population (points): 44.101
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.385
Error (vector) diversity:			 0.533
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 1054978066
--- Timings ---
Current time: 1481133857328 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Lexicase best number of elite cases: 44
Lexicase best total error: 4106
Lexicase best mean error: 51.325
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop boolean_pop boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor boolean_shove integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 3 0 0 1 1000 1 1 1 1 1 68 1 1 1 1 1 1 1 1 1 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 0 1 0 0 0 1 0 0 0 1000 1 1 1000 1000 2]
Zero cases best number of elite cases: 44
Zero cases best number of zero cases: 44
Zero cases best total error: 4106
Zero cases best mean error: 51.325
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 394 284 308 317 310 318 286 301 367 398 427 403 379 406 420 411 354 303 181 383 260 134 156 135 209 283 278 326 343 347 330 389 351 338 374 354 341 344 368 245 237 282 223 335 370 480 459 456 487 489 528 522 609 613 611 615 616 614 614 391 395 362 426 471 453 450 509 446 448 477 428 479 485 454 430 450 410 377 304)
Population mean number of elite cases: 30.87
Count of perfect (error zero) individuals by case: (207 394 284 308 317 310 318 286 301 367 398 427 403 379 406 420 411 354 303 181 383 260 134 156 135 209 283 278 326 343 347 330 389 351 338 374 354 341 344 368 245 237 282 223 335 370 480 459 456 487 489 528 522 609 613 611 615 616 614 614 391 395 362 426 471 453 450 509 446 448 477 428 479 485 454 430 450 410 377 304)
Population mean number of perfect (error zero) cases: 30.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3340.684
Median total errors in population: 180
Error averages by case: (43.952 33.126 46.147 75.338 45.316 37.157 47.437 54.888 40.525 44.974 36.965 30.91 29.253 45.779 33.817 34.13 34.332 33.973 34.434 34.12 35.923 32.313 55.759 57.891 46.18 31.909 32.942 36.658 42.476 35.658 40.705 36.185 37.604 35.978 35.914 37.038 36.11 36.137 37.932 37.26 44.235 37.928 35.179 36.312 37.526 37.563 35.22 37.468 36.139 38.375 38.599 37.246 42.907 39.712 39.64 38.992 39.582 39.944 40.585 40.96 38.02 41.058 37.433 37.439 51.377 38.197 49.381 49.34 73.192 52.771 39.585 38.705 60.542 45.779 74.797 50.868 38.12 52.293 62.901 39.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.137
Average program size in population (points): 43.592
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.359
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 1064183441
--- Timings ---
Current time: 1481133885423 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 371 281 334 349 321 326 313 274 348 388 399 369 329 338 354 370 294 265 202 389 244 134 150 143 186 280 290 338 356 355 359 370 353 349 350 355 324 319 339 221 224 269 238 321 364 447 458 467 460 475 502 498 587 595 590 594 591 593 594 362 346 342 396 458 438 432 481 410 426 434 438 466 482 457 419 430 435 391 316)
Population mean number of elite cases: 29.86
Count of perfect (error zero) individuals by case: (204 371 281 334 349 321 326 313 274 348 388 399 369 329 338 354 370 294 265 202 389 244 134 150 143 186 280 290 338 356 355 359 370 353 349 350 355 324 319 339 221 224 269 238 321 364 447 458 467 460 475 502 498 587 595 590 594 591 593 594 362 346 342 396 458 438 432 481 410 426 434 438 466 482 457 419 430 435 391 316)
Population mean number of perfect (error zero) cases: 29.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3934.54
Median total errors in population: 175
Error averages by case: (56.935 42.217 57.197 72.365 50.405 50.1 48.479 51.155 53.849 63.799 45.907 38.217 43.916 47.291 41.642 45.015 48.828 39.368 39.845 40.127 45.942 43.343 62.97 66.071 56.536 44.853 45.318 44.148 43.282 44.335 44.818 48.074 42.574 42.386 41.281 43.359 44.265 42.946 45.119 46.141 48.274 51.773 45.438 41.698 45.917 42.778 43.314 44.003 43.279 44.743 45.682 43.605 46.776 45.454 45.928 47.436 48.173 48.694 48.2 48.707 51.028 54.16 46.453 45.576 56.479 49.195 49.319 46.445 77.298 54.861 49.713 50.569 57.669 47.965 78.013 53.069 53.276 59.277 68.425 51.46)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.147
Average program size in population (points): 43.741
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.366
Error (vector) diversity:			 0.514
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 1073313296
--- Timings ---
Current time: 1481133913685 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove integer_lte integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove integer_lte integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove integer_lte integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove integer_lte integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 380 268 314 319 315 331 308 284 374 368 396 370 338 389 394 377 326 285 195 362 239 142 158 163 202 273 261 323 333 329 331 372 343 351 364 341 318 345 348 233 230 249 234 335 379 455 460 458 476 465 492 482 558 567 565 568 567 568 568 367 359 337 402 458 454 452 481 451 453 468 417 467 462 426 421 452 409 375 317)
Population mean number of elite cases: 29.79
Count of perfect (error zero) individuals by case: (226 380 268 314 319 315 331 308 284 374 368 396 370 338 389 394 377 326 285 195 362 239 142 158 163 202 273 261 323 333 329 331 372 343 351 364 341 318 345 348 233 230 249 234 335 379 455 460 458 476 465 492 482 558 567 565 568 567 568 568 367 359 337 402 458 454 452 481 451 453 468 417 467 462 426 421 452 409 375 317)
Population mean number of perfect (error zero) cases: 29.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3904.745
Median total errors in population: 184
Error averages by case: (52.914 41.099 48.271 78.304 44.677 46.162 52.606 61.116 50.103 56.785 42.836 40.628 44.843 40.592 40.768 42.795 40.202 39.632 40.148 42.687 42.96 45.311 57.002 61.12 58.688 41.754 40.42 45.228 43.447 43.197 48.115 49.176 41.261 44.323 42.313 43.546 43.266 43.447 45.881 46.371 48.223 51.004 42.871 41.102 44.164 43.981 44.404 43.762 43.958 43.909 47.292 45.519 48.469 46.603 46.407 46.759 46.848 47.673 48.518 49.398 51.01 59.1 44.467 42.582 58.448 52.235 58.428 52.627 70.387 55.737 44.815 45.92 54.619 62.018 74.137 55.087 58.979 59.328 59.477 50.486)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.217
Average program size in population (points): 43.662
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.385
Error (vector) diversity:			 0.517
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 1082396652
--- Timings ---
Current time: 1481133941962 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 372 258 303 326 305 336 318 273 372 384 399 401 371 378 409 396 304 289 187 385 253 154 158 152 226 278 263 333 343 341 321 383 354 360 362 335 329 345 339 245 239 267 254 337 360 471 468 444 479 482 492 516 589 591 590 592 599 592 591 366 373 289 417 477 440 469 483 428 429 471 417 481 453 438 408 447 396 378 298)
Population mean number of elite cases: 30.17
Count of perfect (error zero) individuals by case: (218 372 258 303 326 305 336 318 273 372 384 399 401 371 378 409 396 304 289 187 385 253 154 158 152 226 278 263 333 343 341 321 383 354 360 362 335 329 345 339 245 239 267 254 337 360 471 468 444 479 482 492 516 589 591 590 592 599 592 591 366 373 289 417 477 440 469 483 428 429 471 417 481 453 438 408 447 396 378 298)
Population mean number of perfect (error zero) cases: 30.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4819.595
Median total errors in population: 190
Error averages by case: (62.965 46.169 55.241 82.381 49.701 50.623 58.234 70.719 54.926 57.77 49.118 42.79 46.995 47.463 43.393 48.311 47.062 48.855 49.727 48.493 44.895 45.395 61.398 60.508 49.472 45.837 42.011 51.265 51.407 51.279 50.712 58.619 48.731 51.804 52.94 57.955 57.818 59.141 65.005 67.541 51.255 51.501 46.32 50.381 53.435 52.495 52.664 56.737 61.36 65.528 73.956 77.069 86.206 89.875 97.297 103.282 113.156 121.732 130.814 141.069 51.119 61.086 51.562 48.545 57.39 44.273 52.389 49.629 73.584 65.1 49.124 46.053 52.081 52.581 75.774 57.831 52.897 57.11 55.007 55.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.168
Average program size in population (points): 43.699
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.38
Error (vector) diversity:			 0.515
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 1091566684
--- Timings ---
Current time: 1481133970238 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 371 234 300 307 291 315 301 271 388 399 420 383 355 369 367 380 329 284 168 401 267 150 150 136 196 265 268 308 327 326 314 345 337 332 317 321 292 315 331 253 208 245 256 336 380 450 456 454 472 465 477 500 571 576 574 575 577 577 577 336 324 292 418 446 437 441 471 417 418 454 436 462 438 436 419 417 375 394 295)
Population mean number of elite cases: 29.26
Count of perfect (error zero) individuals by case: (229 371 234 300 307 291 315 301 271 388 399 420 383 355 369 367 380 329 284 168 401 267 150 150 136 196 265 268 308 327 326 314 345 337 332 317 321 292 315 331 253 208 245 256 336 380 450 456 454 472 465 477 500 571 576 574 575 577 577 577 336 324 292 418 446 437 441 471 417 418 454 436 462 438 436 419 417 375 394 295)
Population mean number of perfect (error zero) cases: 29.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.000005320781E9
Median total errors in population: 208N
Error averages by case: (67.951 50.223 63.294 79.217 59.607 59.094 66.72 63.995 58.147 63.814 52.182 49.747 54.183 50.882 55.859 50.891 53.039 54.869 61.475 58.488 46.976 52.391 72.96 68.105 57.726 47.063 48.35 56.221 53.264 57.895 61.018 65.329 59.326 61.065 61.717 66.779 64.956 67.437 70.634 75.686 51.179 52.711 52.666 51.981 57.771 63.066 64.088 63.832 67.982 71.952 79.404 84.336 95.28 97.362 104.438 110.968 120.945 129.642 138.249 147.584 58.108 64.196 57.567 50.503 64.624 55.187 70.502 59.525 80.488 1.000000062834E9 55.775 58.697 63.708 50.114 81.168 65.054 52.138 59.463 62.239 54.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.407
Average program size in population (points): 44.177
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.387
Error (vector) diversity:			 0.538
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 1100605942
--- Timings ---
Current time: 1481133998333 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_yank boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_yank boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_yank boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_yank boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 370 275 333 306 316 332 318 305 381 393 406 377 351 354 375 375 322 296 191 410 247 158 144 158 219 288 253 330 321 308 311 368 332 339 356 327 326 320 335 232 213 268 265 330 394 476 464 465 495 488 494 509 593 596 591 598 595 598 598 346 339 293 420 466 447 470 496 459 446 471 442 481 490 435 427 456 398 415 321)
Population mean number of elite cases: 30.22
Count of perfect (error zero) individuals by case: (213 370 275 333 306 316 332 318 305 381 393 406 377 351 354 375 375 322 296 191 410 247 158 144 158 219 288 253 330 321 308 311 368 332 339 356 327 326 320 335 232 213 268 265 330 394 476 464 465 495 488 494 509 593 596 591 598 595 598 598 346 339 293 420 466 447 470 496 459 446 471 442 481 490 435 427 456 398 415 321)
Population mean number of perfect (error zero) cases: 30.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4046.631
Median total errors in population: 183
Error averages by case: (55.942 46.198 51.106 77.131 55.731 49.024 53.363 65.4 54.41 55.771 45.208 41.699 46.238 41.401 42.207 44.954 46.636 46.164 46.308 49.282 46.871 49.27 51.909 56.835 63.049 45.039 43.703 47.837 51.876 47.401 49.733 45.039 46.094 45.485 43.186 49.663 46.557 47.39 48.342 48.952 47.193 47.554 44.04 45.01 47.281 48.057 46.934 44.503 45.142 46.628 47.043 48.775 51.703 45.913 47.365 48.635 48.869 48.149 48.382 48.647 52.07 59.131 55.532 50.413 60.454 54.094 62.271 50.391 68.088 60.634 49.585 49.425 51.495 48.761 79.825 58.743 40.686 53.832 57.293 49.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.406
Average program size in population (points): 44.116
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.376
Error (vector) diversity:			 0.525
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 1109716873
--- Timings ---
Current time: 1481134026659 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 390 235 310 303 282 292 325 322 392 370 391 366 360 359 387 369 290 274 206 388 254 167 122 138 194 267 263 313 318 311 313 345 361 343 332 320 303 318 339 247 250 246 254 338 390 441 433 468 474 476 463 518 577 577 579 580 582 580 581 339 348 297 429 486 470 468 509 466 437 457 428 504 468 440 411 429 366 394 313)
Population mean number of elite cases: 29.69
Count of perfect (error zero) individuals by case: (244 390 235 310 303 282 292 325 322 392 370 391 366 360 359 387 369 290 274 206 388 254 167 122 138 194 267 263 313 318 311 313 345 361 343 332 320 303 318 339 247 250 246 254 338 390 441 433 468 474 476 463 518 577 577 579 580 582 580 581 339 348 297 429 486 470 468 509 466 437 457 428 504 468 440 411 429 366 394 313)
Population mean number of perfect (error zero) cases: 29.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 243603.544
Median total errors in population: 176
Error averages by case: (53.91 38.064 52.168 239586.934 47.635 48.243 57.75 56.969 59.768 58.543 42.612 41.568 42.53 47.285 44.161 42.454 43.58 42.109 43.851 45.711 35.96 47.352 50.075 65.096 63.236 50.662 43.844 46.891 46.959 44.148 49.902 44.603 47.378 49.693 46.668 50.77 50.399 50.544 49.434 50.166 45.203 49.86 44.589 45.58 46.426 53.63 48.789 48.563 49.99 51.626 51.894 51.756 52.846 53.853 55.892 56.29 58.161 56.995 57.854 58.165 45.065 50.148 47.521 42.401 60.328 58.088 57.305 42.393 69.224 56.867 46.797 48.696 56.596 49.883 82.066 56.026 48.005 64.252 58.441 45.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.264
Average program size in population (points): 43.899
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.386
Error (vector) diversity:			 0.532
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 1118839963
--- Timings ---
Current time: 1481134055043 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 379 240 321 301 316 351 358 340 405 393 409 388 339 381 378 374 357 267 183 397 278 141 124 128 189 284 288 346 341 380 333 377 386 368 371 365 334 361 354 209 238 234 248 328 372 450 422 444 470 444 465 490 583 585 586 588 588 588 588 345 343 285 462 518 495 487 554 483 495 474 455 506 470 453 423 447 382 389 311)
Population mean number of elite cases: 30.56
Count of perfect (error zero) individuals by case: (235 379 240 321 301 316 351 358 340 405 393 409 388 339 381 378 374 357 267 183 397 278 141 124 128 189 284 288 346 341 380 333 377 386 368 371 365 334 361 354 209 238 234 248 328 372 450 422 444 470 444 465 490 583 585 586 588 588 588 588 345 343 285 462 518 495 487 554 483 495 474 455 506 470 453 423 447 382 389 311)
Population mean number of perfect (error zero) cases: 30.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3695.747
Median total errors in population: 309/2
Error averages by case: (46.923 35.09 49.096 71.062 43.548 42.992 45.441 51.779 48.805 51.606 42.178 44.029 38.843 41.337 38.61 40.678 36.664 40.049 47.723 40.023 35.941 36.259 54.801 59.89 58.198 45.286 38.999 42.508 42.529 39.941 44.359 42.766 45.032 43.052 41.643 44.26 45.773 44.428 46.083 45.363 45.251 39.51 44.417 37.563 42.111 47.222 43.95 42.566 42.273 45.48 46.586 46.077 46.462 47.237 47.643 48.042 49.192 48.59 48.975 49.663 48.07 46.143 38.545 37.237 62.282 47.901 46.271 49.296 62.298 50.611 41.699 40.428 48.519 48.629 68.916 51.915 42.788 60.975 58.435 42.392)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.571
Average program size in population (points): 44.171
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.364
Error (vector) diversity:			 0.522
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 1127999245
--- Timings ---
Current time: 1481134083263 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_lte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) boolean_not 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_lte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) boolean_not 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_lte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) boolean_not 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_lte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) boolean_not 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 392 257 329 317 325 342 345 336 417 408 421 404 387 410 417 379 335 278 192 371 237 147 143 131 171 260 247 321 331 334 298 357 344 330 342 318 327 349 358 214 217 255 230 321 385 455 437 439 467 453 458 518 590 592 588 594 593 594 593 324 318 290 444 490 487 477 528 486 469 418 442 489 448 440 398 400 374 388 306)
Population mean number of elite cases: 30.05
Count of perfect (error zero) individuals by case: (235 392 257 329 317 325 342 345 336 417 408 421 404 387 410 417 379 335 278 192 371 237 147 143 131 171 260 247 321 331 334 298 357 344 330 342 318 327 349 358 214 217 255 230 321 385 455 437 439 467 453 458 518 590 592 588 594 593 594 593 324 318 290 444 490 487 477 528 486 469 418 442 489 448 440 398 400 374 388 306)
Population mean number of perfect (error zero) cases: 30.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.000004062689E9
Median total errors in population: 156
Error averages by case: (55.911 47.055 42.07 71.14 54.48 49.121 52.518 61.994 55.551 59.182 41.934 45.071 41.926 50.501 46.854 46.124 46.79 47.57 50.848 49.158 40.973 36.348 54.871 72.125 59.182 47.326 45.815 48.31 58.793 48.088 53.367 51.375 44.799 46.77 43.873 47.446 48.826 48.49 48.784 47.297 52.315 49.581 50.255 47.171 48.797 53.379 47.871 45.607 48.34 48.247 47.691 51.795 46.168 46.128 46.882 46.528 48.81 47.653 48.255 48.604 45.108 53.131 44.474 50.224 53.275 45.011 1.000000055227E9 53.267 65.105 59.845 54.683 45.416 51.618 50.874 74.251 48.854 52.192 69.998 63.198 48.205)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.276
Average program size in population (points): 43.987
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.363
Error (vector) diversity:			 0.503
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 1137003052
--- Timings ---
Current time: 1481134111499 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 368 286 327 306 312 331 332 315 396 386 398 394 353 404 429 359 307 300 198 381 241 134 117 132 183 263 239 330 348 339 317 365 368 346 337 327 325 340 366 211 238 241 214 315 378 418 456 435 454 445 445 511 584 587 586 586 588 587 587 335 331 309 458 483 480 487 516 477 460 472 451 502 489 473 456 455 385 409 331)
Population mean number of elite cases: 30.13
Count of perfect (error zero) individuals by case: (201 368 286 327 306 312 331 332 315 396 386 398 394 353 404 429 359 307 300 198 381 241 134 117 132 183 263 239 330 348 339 317 365 368 346 337 327 325 340 366 211 238 241 214 315 378 418 456 435 454 445 445 511 584 587 586 586 588 587 587 335 331 309 458 483 480 487 516 477 460 472 451 502 489 473 456 455 385 409 331)
Population mean number of perfect (error zero) cases: 30.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4083.437
Median total errors in population: 180
Error averages by case: (58.942 49.137 58.21 72.336 54.647 45.324 55.682 70.955 56.843 56.388 42.545 43.434 42.819 43.971 42.149 47.194 41.903 43.384 50.34 42.02 50.028 44.387 62.101 62.116 61.35 49.826 43.049 42.901 47.287 42.273 45.175 44.157 42.721 44.27 43.373 46.443 46.658 47.752 47.267 46.573 54.367 48.853 47.426 45.226 45.089 50.08 43.787 44.534 48.454 48.008 50.509 48.431 47.157 46.83 48.908 48.406 49.402 49.933 51.29 51.162 54.041 58.107 51.497 49.359 68.415 48.069 56.406 49.505 69.352 51.825 51.701 49.428 56.601 49.673 91.135 54.042 50.025 70.188 61.44 46.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.017
Average program size in population (points): 43.676
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.374
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 1146206824
--- Timings ---
Current time: 1481134139761 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 383 273 331 308 315 328 338 314 390 403 410 398 361 394 416 386 337 286 182 410 263 145 146 149 198 261 243 333 334 364 328 375 393 356 368 345 339 366 373 240 216 228 248 315 347 427 432 404 448 428 437 485 561 564 564 564 568 566 566 328 326 319 437 490 468 483 530 453 448 459 459 482 450 464 444 448 389 400 318)
Population mean number of elite cases: 30.06
Count of perfect (error zero) individuals by case: (213 383 273 331 308 315 328 338 314 390 403 410 398 361 394 416 386 337 286 182 410 263 145 146 149 198 261 243 333 334 364 328 375 393 356 368 345 339 366 373 240 216 228 248 315 347 427 432 404 448 428 437 485 561 564 564 564 568 566 566 328 326 319 437 490 468 483 530 453 448 459 459 482 450 464 444 448 389 400 318)
Population mean number of perfect (error zero) cases: 30.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 2.000003235167E9
Median total errors in population: 189
Error averages by case: (53.983 29.205 40.338 57.329 46.511 32.113 42.747 44.906 44.044 36.121 34.304 34.295 28.947 35.233 33.883 39.101 36.012 33.194 39.102 34.819 29.964 1.000000030513E9 59.028 50.269 38.379 39.529 36.223 40.423 35.004 35.454 37.585 35.471 36.144 37.478 1.000000036243E9 37.01 38.079 37.594 40.029 38.694 46.142 40.719 36.335 35.718 34.674 40.587 36.368 35.866 39.201 38.278 42.613 37.902 42.495 39.65 39.925 40.185 43.161 43.668 42.898 44.69 45.139 52.177 40.573 35.451 50.457 34.086 39.421 33.453 66.359 43.016 36.685 31.712 39.739 37.77 77.115 41.129 36.099 56.238 56.358 35.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.558
Average program size in population (points): 44.132
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.394
Error (vector) diversity:			 0.527
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 1155495098
--- Timings ---
Current time: 1481134168157 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 382 268 304 309 300 360 325 320 372 414 414 403 346 383 392 355 327 291 193 359 254 153 146 156 182 249 252 320 312 333 298 334 346 331 353 326 323 348 336 239 218 248 260 320 380 452 442 434 476 466 486 508 583 586 586 587 591 589 589 331 336 321 400 472 464 483 530 459 463 438 432 461 441 454 418 429 379 397 297)
Population mean number of elite cases: 29.82
Count of perfect (error zero) individuals by case: (206 382 268 304 309 300 360 325 320 372 414 414 403 346 383 392 355 327 291 193 359 254 153 146 156 182 249 252 320 312 333 298 334 346 331 353 326 323 348 336 239 218 248 260 320 380 452 442 434 476 466 486 508 583 586 586 587 591 589 589 331 336 321 400 472 464 483 530 459 463 438 432 461 441 454 418 429 379 397 297)
Population mean number of perfect (error zero) cases: 29.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3664.688
Median total errors in population: 175
Error averages by case: (47.967 43.1 51.171 58.311 52.556 42.137 51.601 52.064 51.88 52.042 36.721 38.324 34.75 41.505 39.264 41.658 38.021 39.899 39.308 38.852 38.003 43.302 57.046 58.226 53.321 41.318 38.238 41.37 46.793 39.824 43.059 40.863 43.18 41.109 37.71 42.041 40.393 40.821 42.519 46.186 49.17 45.046 42.481 40.902 38.325 41.069 39.986 40.009 41.07 41.279 47.199 43.756 44.854 43.861 44.17 45.668 45.683 47.744 46.199 51.994 50.116 49.146 42.5 45.422 56.292 43.122 52.393 46.359 67.339 55.95 42.903 40.719 55.82 52.749 71.357 50.038 41.251 53.997 55.24 45.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.252
Average program size in population (points): 43.764
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.393
Error (vector) diversity:			 0.533
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 1164652343
--- Timings ---
Current time: 1481134196517 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 379 272 330 300 287 295 295 307 357 388 407 393 338 364 387 342 308 277 189 374 245 123 130 139 200 267 241 338 337 337 308 352 352 354 365 323 342 368 352 211 208 229 206 296 348 434 430 439 441 439 467 493 570 569 574 573 578 575 575 326 329 339 422 485 463 469 525 459 449 473 481 520 504 468 442 456 402 403 322)
Population mean number of elite cases: 29.65
Count of perfect (error zero) individuals by case: (197 379 272 330 300 287 295 295 307 357 388 407 393 338 364 387 342 308 277 189 374 245 123 130 139 200 267 241 338 337 337 308 352 352 354 365 323 342 368 352 211 208 229 206 296 348 434 430 439 441 439 467 493 570 569 574 573 578 575 575 326 329 339 422 485 463 469 525 459 449 473 481 520 504 468 442 456 402 403 322)
Population mean number of perfect (error zero) cases: 29.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4635.358
Median total errors in population: 190
Error averages by case: (64.969 51.077 60.16 76.259 62.59 54.162 66.705 73.884 56.949 58.86 51.961 51.55 52.81 54.682 49.176 50.054 48.439 50.484 55.658 52.711 46.994 52.356 69.98 60.155 59.32 52.572 54.511 55.162 57.375 52.759 56.89 53.766 54.124 57.573 52.884 55.552 54.426 57.256 58.225 60.0 65.128 51.977 47.516 52.942 53.119 59.865 55.337 54.358 57.712 59.916 62.967 57.47 60.878 58.852 59.387 61.126 61.672 60.946 62.028 64.585 65.066 65.148 52.425 46.373 64.353 48.118 65.107 50.339 78.344 57.088 62.782 55.573 56.831 60.613 85.148 59.937 48.247 63.226 64.304 53.535)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.895
Average program size in population (points): 43.481
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.395
Error (vector) diversity:			 0.54
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 1173695170
--- Timings ---
Current time: 1481134224665 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 368 258 311 307 284 321 264 343 374 378 399 398 361 390 389 346 330 266 201 369 245 124 132 143 205 275 258 334 324 354 306 329 325 328 344 308 316 333 323 250 194 237 222 317 362 435 436 447 463 450 484 502 586 587 591 592 598 593 594 342 323 318 410 449 431 495 519 449 465 479 472 504 450 455 418 426 391 385 287)
Population mean number of elite cases: 29.56
Count of perfect (error zero) individuals by case: (185 368 258 311 307 284 321 264 343 374 378 399 398 361 390 389 346 330 266 201 369 245 124 132 143 205 275 258 334 324 354 306 329 325 328 344 308 316 333 323 250 194 237 222 317 362 435 436 447 463 450 484 502 586 587 591 592 598 593 594 342 323 318 410 449 431 495 519 449 465 479 472 504 450 455 418 426 391 385 287)
Population mean number of perfect (error zero) cases: 29.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 2.000005142299E9
Median total errors in population: 405/2
Error averages by case: (68.992 1.000000048198E9 61.314 76.401 57.745 52.6 59.177 67.794 59.09 66.014 52.006 46.244 48.126 54.083 53.72 48.357 46.059 53.002 54.005 53.727 38.119 46.512 69.478 66.699 71.796 46.268 50.058 56.009 59.437 52.33 54.368 54.153 57.645 58.098 60.045 61.472 64.255 65.842 71.588 73.251 48.427 54.863 49.358 52.178 54.046 58.367 61.208 64.376 68.381 72.367 80.609 84.665 92.733 94.727 101.693 109.083 117.697 125.723 134.016 142.939 66.055 62.137 51.72 1.000000047384E9 62.612 51.343 52.445 45.415 69.556 59.404 55.071 50.046 59.335 52.524 81.797 67.833 47.231 60.217 67.399 61.242)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.785
Average program size in population (points): 43.342
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.407
Error (vector) diversity:			 0.544
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 1182839289
--- Timings ---
Current time: 1481134252895 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 399 262 322 288 292 294 284 309 360 379 401 399 368 385 396 356 335 280 171 399 275 128 138 152 205 261 252 340 361 353 316 341 325 339 378 328 307 345 338 255 194 243 224 305 385 480 445 458 481 461 497 514 614 611 616 616 623 620 619 305 310 324 455 514 456 500 549 470 476 488 494 512 483 454 419 444 421 422 289)
Population mean number of elite cases: 30.41
Count of perfect (error zero) individuals by case: (207 399 262 322 288 292 294 284 309 360 379 401 399 368 385 396 356 335 280 171 399 275 128 138 152 205 261 252 340 361 353 316 341 325 339 378 328 307 345 338 255 194 243 224 305 385 480 445 458 481 461 497 514 614 611 616 616 623 620 619 305 310 324 455 514 456 500 549 470 476 488 494 512 483 454 419 444 421 422 289)
Population mean number of perfect (error zero) cases: 30.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3703.513
Median total errors in population: 187
Error averages by case: (58.956 41.069 57.139 65.089 51.349 44.729 56.567 61.734 47.759 63.432 43.18 40.342 44.247 38.135 40.216 39.493 37.304 36.24 42.809 40.088 33.006 46.336 52.857 55.097 55.001 37.332 48.961 38.153 47.2 36.461 38.828 39.954 39.647 38.24 34.975 37.599 39.472 38.513 40.879 40.919 40.121 49.463 40.103 36.955 38.962 41.01 38.931 36.322 41.471 40.582 46.139 38.996 47.695 43.803 45.267 45.631 46.148 45.588 46.597 47.086 68.137 57.23 41.523 37.312 54.317 42.983 42.111 45.064 64.238 49.622 46.493 46.285 54.702 43.597 92.75 59.514 47.998 53.07 53.105 57.285)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.158
Average program size in population (points): 43.684
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.38
Error (vector) diversity:			 0.511
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 1192027866
--- Timings ---
Current time: 1481134281083 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_yank boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 393 273 310 290 310 306 274 325 380 411 412 399 349 391 405 368 322 287 180 348 243 144 157 145 173 259 235 307 355 339 316 353 365 351 368 354 342 343 343 249 218 248 229 289 373 443 446 427 440 442 471 504 596 594 595 600 606 599 599 336 345 328 421 497 432 489 507 440 450 456 445 477 466 473 429 426 401 391 288)
Population mean number of elite cases: 29.87
Count of perfect (error zero) individuals by case: (182 393 273 310 290 310 306 274 325 380 411 412 399 349 391 405 368 322 287 180 348 243 144 157 145 173 259 235 307 355 339 316 353 365 351 368 354 342 343 343 249 218 248 229 289 373 443 446 427 440 442 471 504 596 594 595 600 606 599 599 336 345 328 421 497 432 489 507 440 450 456 445 477 466 473 429 426 401 391 288)
Population mean number of perfect (error zero) cases: 29.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5321.203
Median total errors in population: 204
Error averages by case: (74.947 54.118 65.13 84.261 67.317 59.984 78.423 74.914 65.829 72.719 62.861 58.373 61.499 63.324 61.439 61.617 62.402 58.909 66.451 66.792 55.0 66.297 83.772 68.877 72.338 56.68 66.262 64.636 65.492 61.036 63.169 59.436 61.255 62.354 61.121 59.876 61.993 61.226 64.965 63.437 66.05 67.461 57.264 58.578 57.216 59.492 65.272 60.978 65.644 65.633 69.271 62.415 74.182 68.496 68.873 73.679 69.823 70.187 70.695 69.254 79.035 71.119 54.465 58.288 65.421 60.017 65.14 63.406 94.259 64.761 73.567 64.434 66.979 61.512 98.619 69.691 70.151 79.979 71.652 67.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.761
Average program size in population (points): 43.252
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.368
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 1201034346
--- Timings ---
Current time: 1481134309419 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 377 275 313 294 307 306 292 297 380 380 419 406 370 381 398 342 325 284 173 365 261 130 146 147 188 259 259 321 339 346 327 336 361 359 361 331 348 357 346 246 219 219 200 281 359 444 441 419 442 451 451 501 571 572 573 573 574 573 573 335 347 320 409 485 459 485 527 445 452 493 467 493 478 448 458 423 398 406 287)
Population mean number of elite cases: 29.68
Count of perfect (error zero) individuals by case: (175 377 275 313 294 307 306 292 297 380 380 419 406 370 381 398 342 325 284 173 365 261 130 146 147 188 259 259 321 339 346 327 336 361 359 361 331 348 357 346 246 219 219 200 281 359 444 441 419 442 451 451 501 571 572 573 573 574 573 573 335 347 320 409 485 459 485 527 445 452 493 467 493 478 448 458 423 398 406 287)
Population mean number of perfect (error zero) cases: 29.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1057946.82
Median total errors in population: 445/2
Error averages by case: (62.952 55.116 60.108 77.172 62.243 54.943 70.399 69.916 64.915 77.361 54.367 53.468 54.078 54.549 52.831 54.124 60.618 54.14 56.325 57.837 54.979 53.303 73.928 58.094 73.324 53.822 59.343 56.065 60.932 54.111 38018.936 56.553 54.911 55.689 53.088 56.925 54.39 55.302 56.736 56.278 61.094 56.617 57.738 53.955 60.385 57.533 54.975 52.114 57.906 55.116 62.328 1015178.857 66.049 66.584 67.214 67.123 68.855 68.089 69.844 69.051 70.042 62.093 52.515 60.305 67.217 55.996 63.17 56.11 91.256 57.732 58.498 54.425 68.94 56.587 90.901 60.573 58.247 60.159 62.462 63.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.31
Average program size in population (points): 43.868
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.393
Error (vector) diversity:			 0.528
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 1210083478
--- Timings ---
Current time: 1481134337470 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 385 278 320 302 314 321 284 298 378 420 425 395 347 376 407 359 331 289 189 385 237 119 154 147 180 269 263 312 355 344 291 336 351 332 345 308 315 322 317 249 216 251 237 319 394 469 480 447 492 473 503 537 614 614 616 616 619 616 616 316 325 317 396 486 430 472 498 440 461 484 448 475 468 461 453 450 391 400 273)
Population mean number of elite cases: 30.12
Count of perfect (error zero) individuals by case: (194 385 278 320 302 314 321 284 298 378 420 425 395 347 376 407 359 331 289 189 385 237 119 154 147 180 269 263 312 355 344 291 336 351 332 345 308 315 322 317 249 216 251 237 319 394 469 480 447 492 473 503 537 614 614 616 616 619 616 616 316 325 317 396 486 430 472 498 440 461 484 448 475 468 461 453 450 391 400 273)
Population mean number of perfect (error zero) cases: 30.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4440.829
Median total errors in population: 221
Error averages by case: (56.991 43.12 57.12 75.169 60.272 46.899 59.384 62.882 63.048 60.603 45.936 48.293 48.621 49.608 48.885 50.191 52.29 50.1 53.518 53.831 41.983 50.338 69.882 54.042 70.253 46.481 55.511 50.714 59.751 53.476 53.536 48.314 48.676 49.751 49.73 53.758 51.799 50.796 54.279 53.789 59.127 53.559 47.583 50.795 51.904 66.439 50.052 50.197 55.252 52.754 57.408 53.122 57.501 56.928 57.256 57.767 58.296 58.827 59.346 59.883 55.17 53.193 44.54 47.454 70.181 51.154 63.777 51.612 76.803 54.756 56.497 60.444 61.893 54.724 80.895 58.805 55.13 63.905 61.359 50.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.969
Average program size in population (points): 43.408
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.383
Error (vector) diversity:			 0.517
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 1219183673
--- Timings ---
Current time: 1481134365710 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 409 275 335 322 323 301 300 341 375 422 434 417 364 404 401 373 333 294 190 376 250 121 141 144 174 290 292 356 365 346 343 381 365 350 379 339 334 371 342 254 213 241 215 311 349 428 441 426 469 460 476 505 602 602 605 606 610 606 606 325 346 320 384 500 438 471 524 446 482 465 448 500 475 444 465 452 425 416 302)
Population mean number of elite cases: 30.54
Count of perfect (error zero) individuals by case: (212 409 275 335 322 323 301 300 341 375 422 434 417 364 404 401 373 333 294 190 376 250 121 141 144 174 290 292 356 365 346 343 381 365 350 379 339 334 371 342 254 213 241 215 311 349 428 441 426 469 460 476 505 602 602 605 606 610 606 606 325 346 320 384 500 438 471 524 446 482 465 448 500 475 444 465 452 425 416 302)
Population mean number of perfect (error zero) cases: 30.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 732713.943
Median total errors in population: 175
Error averages by case: (47.955 39.053 46.134 72.034 41.195 41.947 53.286 48.706 42.674 45.546 36.153 32.997 37.484 41.273 32.116 38.325 36.215 33.043 40.653 34.843 33.012 35.448 47.811 47.893 48.144 33.419 37.046 37.459 39.095 35.394 42.99 38.673 41.427 40.315 38.82 40.098 39.47 42.011 40.43 42.162 45.051 41.746 33.053 34.454 36.422 38.513 41.072 40.926 46.801 40.968 44.811 41.815 46.725 309.551 349.539 390.558 436.513 483.171 534.523 587.178 46.166 45.108 39.492 37.543 53.274 38.076 51.598 726525.844 58.315 42.623 39.42 51.162 46.816 52.492 76.685 45.495 43.926 56.779 55.534 41.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.411
Average program size in population (points): 43.951
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.373
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 1228327217
--- Timings ---
Current time: 1481134394120 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 415 263 305 285 310 301 289 323 386 421 423 398 367 399 400 360 310 294 166 354 245 124 158 164 194 282 269 327 332 358 303 315 364 365 351 316 338 349 330 255 200 257 224 317 371 439 449 471 466 484 477 539 595 595 597 596 599 597 598 329 361 303 366 463 425 515 526 443 473 469 431 457 438 447 416 420 379 379 302)
Population mean number of elite cases: 29.94
Count of perfect (error zero) individuals by case: (216 415 263 305 285 310 301 289 323 386 421 423 398 367 399 400 360 310 294 166 354 245 124 158 164 194 282 269 327 332 358 303 315 364 365 351 316 338 349 330 255 200 257 224 317 371 439 449 471 466 484 477 539 595 595 597 596 599 597 598 329 361 303 366 463 425 515 526 443 473 469 431 457 438 447 416 420 379 379 302)
Population mean number of perfect (error zero) cases: 29.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5151.804
Median total errors in population: 204
Error averages by case: (58.908 41.043 62.098 62.22 64.348 52.02 69.617 55.707 54.791 57.591 46.265 47.541 52.762 45.246 47.561 47.655 53.288 47.138 48.437 47.014 44.008 41.396 70.938 61.084 63.314 54.495 48.889 51.221 51.459 42.836 49.68 47.232 48.307 45.803 47.453 47.962 46.119 47.471 49.871 48.713 58.081 58.862 49.717 42.756 44.958 47.621 46.905 45.337 50.954 46.552 49.652 48.384 54.039 49.564 52.988 50.399 53.838 51.514 54.957 52.682 60.104 57.044 50.528 54.495 58.303 53.137 419.613 589.042 76.567 62.058 52.676 50.642 66.075 54.683 84.125 59.918 53.604 56.02 57.45 56.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.111
Average program size in population (points): 43.539
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.413
Error (vector) diversity:			 0.541
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 1237434698
--- Timings ---
Current time: 1481134422419 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 387 264 311 306 318 304 319 278 392 413 432 397 360 398 367 365 321 287 170 392 240 120 142 132 168 264 264 300 326 368 316 357 366 349 375 327 325 343 337 253 232 242 211 300 366 463 429 455 454 473 462 502 589 589 591 590 590 590 590 299 367 309 378 502 423 483 516 455 476 463 445 509 456 437 434 454 424 426 281)
Population mean number of elite cases: 29.93
Count of perfect (error zero) individuals by case: (221 387 264 311 306 318 304 319 278 392 413 432 397 360 398 367 365 321 287 170 392 240 120 142 132 168 264 264 300 326 368 316 357 366 349 375 327 325 343 337 253 232 242 211 300 366 463 429 455 454 473 462 502 589 589 591 590 590 590 590 299 367 309 378 502 423 483 516 455 476 463 445 509 456 437 434 454 424 426 281)
Population mean number of perfect (error zero) cases: 29.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4502.329
Median total errors in population: 212
Error averages by case: (58.967 55.055 75.111 76.108 58.235 51.167 65.535 55.994 62.091 64.45 57.598 50.473 49.083 51.364 48.665 50.294 52.671 48.799 53.675 47.088 52.968 50.351 65.037 65.317 63.199 52.687 56.401 50.538 50.66 48.944 55.896 52.054 50.893 52.572 50.527 49.616 49.168 51.247 54.095 55.671 56.289 53.94 50.882 48.824 50.39 53.897 50.232 49.442 53.812 50.222 55.414 53.376 59.804 55.098 58.077 55.937 58.73 57.269 59.81 58.644 59.221 56.103 52.594 59.546 72.332 54.168 62.217 51.126 76.05 52.768 54.929 52.682 62.023 49.905 82.002 59.81 55.304 59.084 64.359 65.753)
Error minima by case: (0 0 0 0 0 0N 0N 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0N 0N 0 0)
Average genome size in population (length): 37.779
Average program size in population (points): 44.486
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.395
Error (vector) diversity:			 0.518
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 1246568886
--- Timings ---
Current time: 1481134450720 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 396 267 329 327 287 275 294 293 361 405 410 370 370 405 386 366 334 292 157 391 252 136 176 157 195 288 293 334 357 368 335 384 387 386 394 343 345 370 374 241 228 233 189 280 348 437 425 440 434 454 453 501 581 582 583 582 582 582 582 329 369 317 410 505 423 498 532 435 476 432 445 489 471 458 428 453 404 421 292)
Population mean number of elite cases: 30.14
Count of perfect (error zero) individuals by case: (222 396 267 329 327 287 275 294 293 361 405 410 370 370 405 386 366 334 292 157 391 252 136 176 157 195 288 293 334 357 368 335 384 387 386 394 343 345 370 374 241 228 233 189 280 348 437 425 440 434 454 453 501 581 582 583 582 582 582 582 329 369 317 410 505 423 498 532 435 476 432 445 489 471 458 428 453 404 421 292)
Population mean number of perfect (error zero) cases: 30.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4266.145
Median total errors in population: 175
Error averages by case: (55.919 43.034 61.131 60.149 55.284 47.384 59.53 51.869 53.796 67.7 45.615 46.4 49.201 45.098 49.895 47.329 50.59 47.863 60.953 51.293 41.069 51.321 59.94 55.955 54.206 49.473 58.668 52.57 50.535 48.328 47.207 46.883 48.276 47.755 47.904 52.293 49.375 51.52 50.737 51.548 46.119 51.947 48.665 46.978 52.937 47.75 50.359 61.518 51.734 49.907 57.017 48.93 58.928 54.955 58.692 56.0 59.04 57.593 59.432 59.292 69.119 61.077 41.566 53.421 64.181 43.135 56.212 46.176 69.388 58.922 52.722 51.641 49.142 45.673 70.025 64.753 53.323 55.044 56.128 61.108)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.538
Average program size in population (points): 44.106
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.378
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 1255675626
--- Timings ---
Current time: 1481134479012 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 410 224 286 295 300 289 298 334 398 432 451 396 367 395 408 373 328 313 160 390 277 113 124 130 179 282 279 322 319 344 332 385 350 350 373 329 335 356 327 264 211 235 194 312 384 462 444 474 483 485 487 527 613 615 616 615 615 615 614 289 359 302 402 505 437 492 535 474 484 458 455 521 483 435 402 437 386 401 281)
Population mean number of elite cases: 30.38
Count of perfect (error zero) individuals by case: (219 410 224 286 295 300 289 298 334 398 432 451 396 367 395 408 373 328 313 160 390 277 113 124 130 179 282 279 322 319 344 332 385 350 350 373 329 335 356 327 264 211 235 194 312 384 462 444 474 483 485 487 527 613 615 616 615 615 615 614 289 359 302 402 505 437 492 535 474 484 458 455 521 483 435 402 437 386 401 281)
Population mean number of perfect (error zero) cases: 30.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5131.488
Median total errors in population: 201
Error averages by case: (67.926 51.995 61.188 76.102 61.302 65.143 64.353 57.78 67.862 69.567 59.87 52.509 59.804 58.584 54.002 56.383 56.599 57.772 63.983 63.069 52.978 56.362 72.174 69.1 68.76 59.655 64.63 56.543 59.341 61.4 69.526 61.355 60.892 62.072 61.075 62.97 60.929 65.183 64.668 65.756 63.075 74.86 59.437 56.953 59.552 66.15 64.999 60.893 63.269 61.714 66.101 63.113 68.122 63.66 66.539 65.022 67.252 66.0 68.46 67.552 73.153 67.065 57.544 56.507 73.209 57.156 73.122 53.199 74.309 66.843 56.573 64.618 61.773 63.622 97.905 74.884 65.306 78.221 78.304 64.29)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.158
Average program size in population (points): 43.645
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.387
Error (vector) diversity:			 0.508
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 1264763159
--- Timings ---
Current time: 1481134507270 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 399 276 299 317 333 359 322 344 442 426 447 417 377 416 404 389 341 327 166 369 247 128 137 154 176 290 288 340 345 381 357 389 380 378 378 329 320 352 335 233 196 261 205 310 358 439 436 435 459 469 479 509 617 621 624 628 624 630 625 300 352 326 387 499 423 488 522 482 494 443 452 495 471 441 443 449 366 407 284)
Population mean number of elite cases: 30.81
Count of perfect (error zero) individuals by case: (252 399 276 299 317 333 359 322 344 442 426 447 417 377 416 404 389 341 327 166 369 247 128 137 154 176 290 288 340 345 381 357 389 380 378 378 329 320 352 335 233 196 261 205 310 358 439 436 435 459 469 479 509 617 621 624 628 624 630 625 300 352 326 387 499 423 488 522 482 494 443 452 495 471 441 443 449 366 407 284)
Population mean number of perfect (error zero) cases: 30.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4143.356
Median total errors in population: 180
Error averages by case: (45.93 40.061 55.102 64.172 57.339 46.971 60.259 44.397 53.759 54.086 51.495 42.411 49.529 48.609 45.677 44.764 48.301 44.298 47.77 47.705 37.997 46.248 58.002 53.113 62.387 45.399 55.496 48.808 44.081 45.759 48.924 47.906 48.077 49.816 52.233 51.283 49.386 54.618 52.618 54.119 50.212 54.519 42.327 45.744 47.27 50.239 48.833 50.002 49.188 51.489 56.471 52.737 57.778 56.935 56.445 55.759 57.063 57.399 57.686 58.321 53.202 48.126 41.516 44.52 59.138 50.081 57.264 49.204 65.229 52.864 52.678 48.467 49.86 47.605 83.816 61.745 50.143 61.123 54.202 57.251)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.396
Average program size in population (points): 44.007
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.376
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 1273853117
--- Timings ---
Current time: 1481134535380 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 413 284 315 323 335 348 315 318 390 404 452 431 386 366 372 369 321 297 167 385 263 104 113 124 153 273 288 338 321 372 316 391 348 343 368 306 308 333 323 269 188 264 202 348 366 463 434 435 482 475 471 522 618 620 623 628 624 628 624 273 337 311 408 508 445 476 529 462 478 455 442 512 477 422 422 452 409 433 285)
Population mean number of elite cases: 30.46
Count of perfect (error zero) individuals by case: (263 413 284 315 323 335 348 315 318 390 404 452 431 386 366 372 369 321 297 167 385 263 104 113 124 153 273 288 338 321 372 316 391 348 343 368 306 308 333 323 269 188 264 202 348 366 463 434 435 482 475 471 522 618 620 623 628 624 628 624 273 337 311 408 508 445 476 529 462 478 455 442 512 477 422 422 452 409 433 285)
Population mean number of perfect (error zero) cases: 30.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 2.382434160072E9
Median total errors in population: 439/2
Error averages by case: (49.939 1.000000047113E9 2.82429603615E8 80.146 59.509 51.043 75.035 51.914 54.827 74.448 59.435 47.725 54.939 50.779 47.289 49.168 56.477 49.631 55.225 49.992 47.046 1.00000055397E8 63.116 66.134 60.324 51.648 63.553 47.44 51.585 49.226 64.819 51.987 50.3 51.879 51.351 52.78 53.103 53.846 51.84 55.893 62.035 65.79 48.398 49.354 51.158 52.687 52.305 52.103 54.158 54.603 58.177 57.288 62.116 59.235 63.36 61.087 62.055 63.023 63.979 64.304 65.216 60.086 43.874 1.000000053539E9 65.253 55.122 74.213 53.102 77.163 67.86 55.645 59.626 61.985 57.715 90.304 63.831 53.059 67.158 59.338 57.252)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.569
Average program size in population (points): 44.24
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.385
Error (vector) diversity:			 0.501
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 1283012266
--- Timings ---
Current time: 1481134563656 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 400 264 271 296 319 343 320 331 403 388 426 394 367 374 365 354 308 324 163 362 268 116 143 149 208 295 290 357 339 369 333 394 378 361 389 338 336 342 321 234 220 229 213 312 340 446 429 409 468 456 467 500 597 596 598 607 606 607 604 306 372 312 368 519 421 510 549 494 492 467 432 473 476 434 409 445 389 402 310)
Population mean number of elite cases: 30.24
Count of perfect (error zero) individuals by case: (228 400 264 271 296 319 343 320 331 403 388 426 394 367 374 365 354 308 324 163 362 268 116 143 149 208 295 290 357 339 369 333 394 378 361 389 338 336 342 321 234 220 229 213 312 340 446 429 409 468 456 467 500 597 596 598 607 606 607 604 306 372 312 368 519 421 510 549 494 492 467 432 473 476 434 409 445 389 402 310)
Population mean number of perfect (error zero) cases: 30.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1225535.232
Median total errors in population: 225
Error averages by case: (57.907 56.054 69.068 82.18 62.238 60.059 78.273 61.763 69.845 78.044 65.46 133.221 186.545 195.516 216.825 58.141 310.028 348.811 387.751 419.272 52.013 61.232 65.384 73.128 66.419 65.295 195.89 229.855 341.721 401.97 38531.837 674.549 918.355 1058.926 1390.043 1581.19 2015.625 2261.022 2804.247 3111.905 65.559 72.427 151.93 274.64 480.629 792.132 1217.267 1788.284 2521.479 3433.069 4556.46 1021017.307 7481.648 9323.923 11455.017 13889.261 16647.67 19747.774 23216.629 27066.593 80.092 65.032 50.554 58.429 63.163 67.552 79.126 62.122 78.26 75.633 72.06 69.436 78.158 65.55 101.002 89.762 67.401 76.902 74.243 63.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.636
Average program size in population (points): 43.199
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.358
Error (vector) diversity:			 0.476
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 1291992229
--- Timings ---
Current time: 1481134591913 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 406 290 313 300 316 318 266 311 411 427 435 401 387 392 390 362 323 335 203 341 254 120 118 164 173 252 250 325 336 355 301 354 367 346 360 324 347 330 327 263 193 244 222 327 386 456 430 453 463 474 475 534 622 624 627 630 630 630 629 323 390 344 403 515 417 515 535 457 502 475 472 482 489 465 415 474 421 439 298)
Population mean number of elite cases: 30.72
Count of perfect (error zero) individuals by case: (243 406 290 313 300 316 318 266 311 411 427 435 401 387 392 390 362 323 335 203 341 254 120 118 164 173 252 250 325 336 355 301 354 367 346 360 324 347 330 327 263 193 244 222 327 386 456 430 453 463 474 475 534 622 624 627 630 630 630 629 323 390 344 403 515 417 515 535 457 502 475 472 482 489 465 415 474 421 439 298)
Population mean number of perfect (error zero) cases: 30.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3045.735
Median total errors in population: 190
Error averages by case: (31.932 33.084 42.119 49.238 35.306 31.907 51.463 36.696 48.085 46.17 27.582 30.267 41.233 33.989 28.135 29.405 32.369 33.579 29.877 31.441 29.078 32.252 42.061 44.287 44.226 35.89 37.805 31.854 34.63 34.429 33.868 29.369 32.446 36.48 34.776 33.884 38.241 38.104 34.556 38.223 36.441 45.845 35.628 30.04 34.467 32.523 33.214 34.428 34.542 34.361 34.054 35.953 40.345 35.168 36.631 36.319 37.294 37.023 39.471 39.248 53.103 38.027 32.506 32.425 46.06 42.159 44.11 34.702 62.276 40.864 35.686 34.566 47.338 38.376 69.838 61.911 41.134 41.909 50.274 35.14)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.845
Average program size in population (points): 44.329
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.407
Error (vector) diversity:			 0.538
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 1301200594
--- Timings ---
Current time: 1481134620385 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 397 271 312 296 293 319 288 313 393 429 421 350 355 404 381 364 319 321 169 392 277 125 151 156 204 285 281 316 338 352 323 375 397 317 356 326 326 342 322 274 242 270 246 362 386 478 471 479 500 484 485 522 627 626 627 630 629 630 629 286 324 315 400 524 405 480 515 463 467 484 409 457 457 467 440 454 425 436 305)
Population mean number of elite cases: 30.73
Count of perfect (error zero) individuals by case: (262 397 271 312 296 293 319 288 313 393 429 421 350 355 404 381 364 319 321 169 392 277 125 151 156 204 285 281 316 338 352 323 375 397 317 356 326 326 342 322 274 242 270 246 362 386 478 471 479 500 484 485 522 627 626 627 630 629 630 629 286 324 315 400 524 405 480 515 463 467 484 409 457 457 467 440 454 425 436 305)
Population mean number of perfect (error zero) cases: 30.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 47597.692
Median total errors in population: 183
Error averages by case: (58.858 49.099 64.0 71.241 62.656 56.187 66.514 52.598 60.742 64.833 51.534 52.353 52.339 50.403 48.721 48.15 53.467 52.195 50.468 56.823 50.935 51.254 68.217 71.921 66.022 54.238 48.732 51.289 51.323 54.348 49.709 51.307 50.087 49.05 51.686 50.127 49.759 73.539 57.456 51.87 59.918 54.686 48.877 46.425 50.271 47.453 51.088 49.433 51.704 48.404 51.91 53.404 57.571 51.954 54.047 52.575 54.634 53.95 56.231 55.14 77.122 66.092 46.564 49.552 62.298 43104.815 65.244 55.348 75.36 59.085 58.677 58.584 73.251 59.624 98.926 66.65 51.087 64.97 64.043 64.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.438
Average program size in population (points): 44.001
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.371
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 1310283864
--- Timings ---
Current time: 1481134648461 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_shove integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_shove integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_shove integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_shove integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 432 284 283 317 309 333 284 290 383 412 431 414 366 404 386 374 326 328 191 370 262 139 142 166 200 279 287 307 335 350 343 383 366 348 368 320 353 340 324 254 219 265 221 325 365 462 442 457 479 465 477 514 584 583 586 590 588 589 587 312 375 319 389 500 418 481 543 455 483 455 416 471 453 476 446 476 410 437 304)
Population mean number of elite cases: 30.45
Count of perfect (error zero) individuals by case: (248 432 284 283 317 309 333 284 290 383 412 431 414 366 404 386 374 326 328 191 370 262 139 142 166 200 279 287 307 335 350 343 383 366 348 368 320 353 340 324 254 219 265 221 325 365 462 442 457 479 465 477 514 584 583 586 590 588 589 587 312 375 319 389 500 418 481 543 455 483 455 416 471 453 476 446 476 410 437 304)
Population mean number of perfect (error zero) cases: 30.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3959.268
Median total errors in population: 183
Error averages by case: (51.964 39.004 45.063 60.206 50.353 40.012 58.633 42.855 59.04 53.031 44.479 43.519 44.428 48.565 38.437 39.844 44.714 42.275 46.274 53.254 43.032 42.186 49.858 61.91 55.184 43.306 49.465 41.542 49.076 52.618 47.788 44.983 42.974 43.851 45.735 47.938 48.194 51.13 49.991 54.257 49.091 49.642 44.1 43.163 43.404 44.625 46.605 45.612 46.925 46.651 50.398 49.193 51.709 49.189 51.457 50.382 52.367 51.853 52.584 52.672 71.135 56.054 43.566 41.574 54.146 44.093 54.234 42.324 63.346 53.567 48.429 54.382 56.89 53.542 78.971 64.679 42.928 50.186 51.307 51.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.228
Average program size in population (points): 43.718
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.387
Error (vector) diversity:			 0.506
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 1319474551
--- Timings ---
Current time: 1481134676886 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 408 271 332 320 305 337 302 313 387 418 436 402 355 409 400 385 321 309 203 383 243 123 125 157 184 267 256 301 328 379 316 365 361 329 366 338 323 333 322 263 206 240 211 345 389 482 434 443 487 483 476 517 613 615 616 619 617 619 617 297 344 327 416 546 410 482 529 481 475 452 428 487 444 461 454 466 431 422 282)
Population mean number of elite cases: 30.59
Count of perfect (error zero) individuals by case: (253 408 271 332 320 305 337 302 313 387 418 436 402 355 409 400 385 321 309 203 383 243 123 125 157 184 267 256 301 328 379 316 365 361 329 366 338 323 333 322 263 206 240 211 345 389 482 434 443 487 483 476 517 613 615 616 619 617 619 617 297 344 327 416 546 410 482 529 481 475 452 428 487 444 461 454 466 431 422 282)
Population mean number of perfect (error zero) cases: 30.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3683.926
Median total errors in population: 173N
Error averages by case: (44.911 38.116 43.145 53.417 99.027 39.982 52.769 45.308 51.013 59.109 41.186 43.432 44.819 49.243 36.927 39.915 41.856 43.597 41.636 43.956 39.046 36.33 41.912 51.986 52.343 46.329 40.726 44.445 44.242 43.271 48.555 41.063 40.854 41.475 40.836 41.717 42.219 42.037 46.439 47.142 43.145 45.75 43.224 41.587 43.717 39.57 42.438 42.889 43.087 42.261 45.657 44.368 49.628 45.007 45.885 44.615 45.87 45.386 46.142 45.673 55.18 41.119 41.524 43.658 50.218 36.118 50.226 37.296 48.293 48.64 47.573 43.503 58.893 50.733 65.977 57.907 42.955 46.027 50.988 54.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.29
Average program size in population (points): 43.921
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.374
Error (vector) diversity:			 0.523
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 1328547945
--- Timings ---
Current time: 1481134705017 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 389 280 312 330 328 334 285 298 404 422 463 411 363 426 435 406 364 354 170 398 256 136 121 146 197 293 277 281 331 401 357 405 400 351 370 342 346 361 337 249 206 260 205 363 362 481 442 475 482 493 477 557 619 619 623 628 625 628 625 267 347 314 411 538 434 484 528 467 477 487 447 489 475 477 459 504 456 436 304)
Population mean number of elite cases: 31.35
Count of perfect (error zero) individuals by case: (249 389 280 312 330 328 334 285 298 404 422 463 411 363 426 435 406 364 354 170 398 256 136 121 146 197 293 277 281 331 401 357 405 400 351 370 342 346 361 337 249 206 260 205 363 362 481 442 475 482 493 477 557 619 619 623 628 625 628 625 267 347 314 411 538 434 484 528 467 477 487 447 489 475 477 459 504 456 436 304)
Population mean number of perfect (error zero) cases: 31.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4317.001
Median total errors in population: 174
Error averages by case: (48.9 36.013 46.057 53.09 51.264 50.923 56.601 41.432 53.69 54.943 43.084 40.839 47.403 50.21 39.594 44.177 48.452 40.091 40.707 39.567 567.357 34.212 52.15 57.119 50.212 48.369 43.073 44.272 45.897 42.771 43.346 41.594 42.499 41.17 40.999 44.69 41.716 44.668 44.682 45.195 51.071 48.676 39.901 40.994 40.288 37.414 41.809 40.952 44.647 44.186 43.742 45.76 45.985 44.038 46.468 46.279 48.005 47.601 48.067 48.381 60.18 50.107 41.744 40.605 64.096 45.047 53.22 49.16 59.313 51.579 49.576 48.507 54.113 47.477 81.829 58.889 48.904 55.616 66.711 53.036)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.681
Average program size in population (points): 44.433
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.369
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 1337697139
--- Timings ---
Current time: 1481134733358 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_div integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_div integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_div integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_div integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 401 303 318 322 318 331 282 348 384 405 425 401 365 390 393 369 320 304 187 376 258 113 131 135 206 257 264 304 306 378 343 349 382 336 367 343 333 354 324 217 217 250 238 365 383 482 454 452 477 480 487 535 616 620 623 631 626 631 627 300 356 334 403 547 421 486 513 508 478 499 432 504 483 448 424 459 437 419 324)
Population mean number of elite cases: 30.87
Count of perfect (error zero) individuals by case: (259 401 303 318 322 318 331 282 348 384 405 425 401 365 390 393 369 320 304 187 376 258 113 131 135 206 257 264 304 306 378 343 349 382 336 367 343 333 354 324 217 217 250 238 365 383 482 454 452 477 480 487 535 616 620 623 631 626 631 627 300 356 334 403 547 421 486 513 508 478 499 432 504 483 448 424 459 437 419 324)
Population mean number of perfect (error zero) cases: 30.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.8072352828E7
Median total errors in population: 192
Error averages by case: (38.972 36.256 41.281 47.412 45.893 38.504 46.638 43.385 48.628 53.426 39.805 34.885 45.256 47.4 36.101 40.472 41.493 38.989 37.773 39.099 35.089 31.43 43.704 55.723 50.872 36.395 43.435 44.999 44.23 39.267 35.2 39.544 34.614 1.8069041516E7 35.73 35.424 37.445 37.734 40.918 37.829 34.289 50.495 34.428 34.187 30.836 32.718 35.153 36.964 37.55 36.343 35.824 38.887 41.908 40.973 40.564 42.182 41.068 42.467 41.818 43.214 55.178 39.113 34.602 32.795 55.214 34.328 50.584 30.746 35.261 40.585 37.099 50.475 54.265 49.536 86.591 54.106 47.983 55.627 55.645 38.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.468
Average program size in population (points): 44.062
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.391
Error (vector) diversity:			 0.523
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 1346854474
--- Timings ---
Current time: 1481134761576 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 408 271 311 288 311 261 261 288 360 420 420 376 348 390 376 363 292 284 185 407 281 119 131 140 184 274 276 291 324 395 354 352 390 340 353 343 345 346 339 233 235 225 230 350 376 450 456 439 456 469 457 527 621 621 626 629 627 629 627 285 369 298 450 549 427 537 581 512 495 511 444 497 506 484 463 492 460 450 352)
Population mean number of elite cases: 30.88
Count of perfect (error zero) individuals by case: (236 408 271 311 288 311 261 261 288 360 420 420 376 348 390 376 363 292 284 185 407 281 119 131 140 184 274 276 291 324 395 354 352 390 340 353 343 345 346 339 233 235 225 230 350 376 450 456 439 456 469 457 527 621 621 626 629 627 629 627 285 369 298 450 549 427 537 581 512 495 511 444 497 506 484 463 492 460 450 352)
Population mean number of perfect (error zero) cases: 30.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.00000446206E9
Median total errors in population: 214
Error averages by case: (59.985 46.054 52.027 70.994 53.392 49.151 65.118 52.829 56.736 69.418 49.658 46.405 58.583 66.265 54.074 53.605 61.886 52.969 49.769 48.84 45.971 44.244 56.954 68.11 65.535 49.921 51.314 49.269 1.000000053336E9 50.519 60.552 49.383 48.935 51.033 47.54 50.701 53.702 55.276 55.525 55.678 51.152 51.598 50.908 46.791 46.23 51.296 50.908 51.35 50.386 51.297 51.649 52.897 57.257 56.052 58.577 58.32 58.606 59.144 59.656 59.491 74.123 58.998 48.591 43.419 72.998 50.976 65.979 49.037 52.254 51.689 56.321 60.595 67.202 60.506 90.031 72.091 56.034 58.846 58.77 58.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.49
Average program size in population (points): 44.113
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.392
Error (vector) diversity:			 0.519
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 1356017769
--- Timings ---
Current time: 1481134789949 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_swap boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_swap boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_swap boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_swap boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 378 280 318 311 296 300 274 287 363 390 402 372 339 378 377 358 306 301 178 386 251 129 125 161 197 283 267 294 334 398 366 345 374 357 352 344 346 366 325 217 230 247 225 355 345 456 455 455 456 464 474 534 624 625 627 631 626 630 626 278 343 308 423 526 429 496 550 493 487 489 431 501 475 491 452 482 441 433 355)
Population mean number of elite cases: 30.65
Count of perfect (error zero) individuals by case: (255 378 280 318 311 296 300 274 287 363 390 402 372 339 378 377 358 306 301 178 386 251 129 125 161 197 283 267 294 334 398 366 345 374 357 352 344 346 366 325 217 230 247 225 355 345 456 455 455 456 464 474 534 624 625 627 631 626 630 626 278 343 308 423 526 429 496 550 493 487 489 431 501 475 491 452 482 441 433 355)
Population mean number of perfect (error zero) cases: 30.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.144370954418E9
Median total errors in population: 183
Error averages by case: (47.965 38.13 40.1 51.504 5819.353 65.327 1768090.164 103.424 154.717 53.239 221.068 259.048 16077.681 20476.725 25701.634 600.624 1.000000794203E9 905.313 1032.387 1122.22 42.01 37.336 73.514 102.564 56.377 232.271 1.42506291782E8 544.531 868.747 1076.025 1580.928 1888.751 2624.51 41.684 39.134 43.294 42.484 43.282 43.663 43.031 52.208 2500.763 314.233 688.518 1309.375 2233.082 42.573 39.35 41.706 41.364 43.319 43.693 44.81 47.642 49.44 49.274 49.63 50.514 52.109 53.739 63.134 54.069 37.58 36.633 62.258 42.113 45.247 157.461 57.351 4390.032 45.59 53.663 91.353 48.738 69.557 131.991 40.35 153.464 56.096 199.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.477
Average program size in population (points): 44.123
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.404
Error (vector) diversity:			 0.518
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 1365068871
--- Timings ---
Current time: 1481134818017 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 384 265 316 299 286 313 284 302 388 402 422 390 348 356 365 367 336 289 182 361 278 115 129 157 166 284 251 278 317 367 327 366 378 332 330 348 328 359 303 238 209 230 230 344 341 454 453 469 457 469 471 529 603 607 607 614 610 613 610 281 369 306 404 510 408 486 523 478 463 482 447 491 439 470 462 491 407 418 320)
Population mean number of elite cases: 30.13
Count of perfect (error zero) individuals by case: (244 384 265 316 299 286 313 284 302 388 402 422 390 348 356 365 367 336 289 182 361 278 115 129 157 166 284 251 278 317 367 327 366 378 332 330 348 328 359 303 238 209 230 230 344 341 454 453 469 457 469 471 529 603 607 607 614 610 613 610 281 369 306 404 510 408 486 523 478 463 482 447 491 439 470 462 491 407 418 320)
Population mean number of perfect (error zero) cases: 30.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4941.874
Median total errors in population: 241
Error averages by case: (56.958 54.06 60.215 59.172 95.176 56.735 64.072 55.863 60.994 70.852 52.478 51.656 63.765 62.713 57.45 68.323 61.914 56.519 54.647 55.302 54.992 48.283 66.938 64.344 71.825 64.616 56.04 63.138 57.554 53.219 55.623 63.453 55.354 59.004 56.203 60.566 58.384 63.173 61.617 63.383 64.144 55.101 57.208 56.855 54.624 60.013 57.295 58.729 60.088 58.807 59.716 61.076 63.003 61.684 61.263 61.85 62.167 63.019 63.589 64.189 79.073 62.004 49.553 54.482 78.1 59.213 65.304 57.372 68.508 63.869 67.819 64.871 72.794 66.072 83.726 75.219 55.673 66.408 68.33 62.491)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.249
Average program size in population (points): 43.78
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.414
Error (vector) diversity:			 0.526
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 1374117844
--- Timings ---
Current time: 1481134844838 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 414 285 324 291 304 319 295 301 372 394 432 374 360 369 375 365 338 284 195 374 255 111 119 146 186 292 264 301 319 388 374 388 395 367 373 370 337 371 334 235 227 245 224 342 340 444 435 452 463 454 483 525 598 599 601 613 605 613 605 274 379 309 425 509 413 477 516 481 490 488 434 497 456 469 455 492 426 410 323)
Population mean number of elite cases: 30.50
Count of perfect (error zero) individuals by case: (216 414 285 324 291 304 319 295 301 372 394 432 374 360 369 375 365 338 284 195 374 255 111 119 146 186 292 264 301 319 388 374 388 395 367 373 370 337 371 334 235 227 245 224 342 340 444 435 452 463 454 483 525 598 599 601 613 605 613 605 274 379 309 425 509 413 477 516 481 490 488 434 497 456 469 455 492 426 410 323)
Population mean number of perfect (error zero) cases: 30.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.000004768121E9
Median total errors in population: 216
Error averages by case: (55.974 47.053 52.125 60.083 62.365 55.423 72.487 56.512 63.716 70.491 56.806 52.547 64.099 63.719 57.04 55.414 60.625 56.658 59.266 58.144 46.002 47.315 73.005 72.955 67.382 52.998 56.624 60.325 55.121 53.615 58.24 64.86 55.534 54.407 55.218 59.045 56.448 57.38 58.362 59.918 63.082 53.814 58.934 56.017 55.391 53.443 58.146 57.148 56.013 57.101 57.548 57.838 58.543 59.275 60.605 59.941 60.095 60.28 60.935 61.384 68.116 54.986 46.566 55.456 66.138 49.137 63.383 50.341 63.274 67.542 65.357 57.669 74.951 60.619 87.673 74.938 1.000000052419E9 71.007 67.051 60.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.405
Average program size in population (points): 44.105
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.39
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 1383166183
--- Timings ---
Current time: 1481134871622 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 421 267 324 311 288 309 296 291 387 412 439 378 388 395 403 388 329 307 179 399 273 121 121 154 175 276 278 289 305 388 344 361 359 346 334 352 323 339 316 254 228 254 196 348 361 454 441 448 471 472 487 547 615 617 619 627 625 627 625 274 383 306 439 545 393 470 509 453 483 497 443 496 467 508 462 498 437 449 326)
Population mean number of elite cases: 30.76
Count of perfect (error zero) individuals by case: (242 421 267 324 311 288 309 296 291 387 412 439 378 388 395 403 388 329 307 179 399 273 121 121 154 175 276 278 289 305 388 344 361 359 346 334 352 323 339 316 254 228 254 196 348 361 454 441 448 471 472 487 547 615 617 619 627 625 627 625 274 383 306 439 545 393 470 509 453 483 497 443 496 467 508 462 498 437 449 326)
Population mean number of perfect (error zero) cases: 30.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_dup_times integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.000010301724E9
Median total errors in population: 214
Error averages by case: (52.976 39.045 41.226 51.26 58.434 51.374 51.741 44.687 49.99 64.481 42.236 43.693 48.668 50.455 49.112 40.611 56.586 43.734 52.759 62.109 37.997 44.313 63.889 52.092 62.883 42.956 41.481 48.488 47.035 47.261 537.12 53.154 45.676 43.236 44.51 45.745 45.104 49.957 46.597 48.063 61.068 55.91 48.941 44.955 45.206 47.214 44.547 46.209 46.464 44.798 48.964 5783.482 50.097 52.827 52.91 54.634 54.626 55.115 55.586 55.372 70.182 56.022 44.606 1.000000040538E9 60.104 45.346 64.304 47.533 69.316 55.538 46.601 57.835 64.367 51.062 62.007 50.235 42.824 62.512 55.172 63.961)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.827
Average program size in population (points): 44.647
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.393
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 1392283186
--- Timings ---
Current time: 1481134899728 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 364 279 362 331 300 335 310 297 390 384 463 406 376 351 376 362 303 322 167 369 237 136 146 152 187 289 304 297 325 367 363 385 388 372 364 382 346 383 356 214 224 269 242 382 372 432 469 448 456 462 497 530 622 625 627 634 630 634 630 290 367 325 435 522 406 462 508 451 441 489 444 490 462 486 448 487 429 435 327)
Population mean number of elite cases: 30.96
Count of perfect (error zero) individuals by case: (228 364 279 362 331 300 335 310 297 390 384 463 406 376 351 376 362 303 322 167 369 237 136 146 152 187 289 304 297 325 367 363 385 388 372 364 382 346 383 356 214 224 269 242 382 372 432 469 448 456 462 497 530 622 625 627 634 630 634 630 290 367 325 435 522 406 462 508 451 441 489 444 490 462 486 448 487 429 435 327)
Population mean number of perfect (error zero) cases: 30.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4364.073
Median total errors in population: 183
Error averages by case: (59.887 47.09 50.331 55.773 58.318 55.906 60.64 55.689 55.676 64.075 50.108 46.001 57.726 57.58 52.66 49.683 54.717 51.579 54.37 52.119 46.036 47.513 64.99 64.891 64.834 45.495 52.025 52.853 47.571 51.643 52.017 57.74 47.48 45.819 46.581 49.87 47.553 54.321 52.607 51.364 64.298 52.46 51.901 50.573 50.702 49.329 47.066 48.102 47.887 49.053 50.558 49.462 51.306 51.129 51.217 51.749 51.796 52.113 52.396 52.713 73.07 60.012 45.493 45.499 65.141 60.815 57.899 43.899 68.292 58.648 53.478 58.587 69.357 59.549 65.865 71.03 50.172 70.922 62.712 64.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.476
Average program size in population (points): 44.332
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.363
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 1401399707
--- Timings ---
Current time: 1481134926513 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 385 275 364 314 287 336 297 288 364 390 440 397 348 357 371 325 263 317 188 376 249 124 133 140 187 288 298 296 363 383 357 398 389 374 384 388 347 376 366 224 208 302 240 358 360 435 438 438 450 464 482 521 635 641 641 641 641 641 641 280 377 325 463 537 370 470 500 457 488 485 422 464 469 494 477 509 443 426 324)
Population mean number of elite cases: 30.94
Count of perfect (error zero) individuals by case: (234 385 275 364 314 287 336 297 288 364 390 440 397 348 357 371 325 263 317 188 376 249 124 133 140 187 288 298 296 363 383 357 398 389 374 384 388 347 376 366 224 208 302 240 358 360 435 438 438 450 464 482 521 635 641 641 641 641 641 641 280 377 325 463 537 370 470 500 457 488 485 422 464 469 494 477 509 443 426 324)
Population mean number of perfect (error zero) cases: 30.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 2.17959545875E8
Median total errors in population: 197
Error averages by case: (54.899 48.143 45.147 51.169 52.3 52.249 52.676 49.293 58.665 55.9 51.359 45.251 60.352 61.231 52.829 43.716 51.235 41.372 51.564 53.607 46.03 47.298 51.722 58.091 61.935 50.618 49.402 52.016 46.474 46.082 45.082 48.963 44.26 46.349 41.214 46.821 44.889 49.982 47.648 46.756 54.114 48.564 49.526 46.236 47.031 46.389 46.577 44.257 47.141 44.599 45.229 45.007 47.467 51.105 51.037 51.632 52.756 52.124 53.476 53.138 78.051 60.98 45.56 42.406 59.1 50.151 50.21 9728.869 56.121 59.475 69.142 50.689 67.142 47.911 2.17945792656E8 72.845 51.361 65.513 61.856 53.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.322
Average program size in population (points): 44.129
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.363
Error (vector) diversity:			 0.489
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 1410431922
--- Timings ---
Current time: 1481134954833 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 404 282 350 321 292 320 283 296 367 367 433 403 372 384 380 349 297 285 186 390 248 123 128 131 189 283 298 300 363 412 359 397 396 374 379 381 350 375 377 235 218 271 214 334 340 435 418 411 445 441 480 508 612 614 614 615 616 616 616 285 366 334 437 508 388 469 518 461 467 470 420 472 476 454 432 474 428 424 323)
Population mean number of elite cases: 30.52
Count of perfect (error zero) individuals by case: (241 404 282 350 321 292 320 283 296 367 367 433 403 372 384 380 349 297 285 186 390 248 123 128 131 189 283 298 300 363 412 359 397 396 374 379 381 350 375 377 235 218 271 214 334 340 435 418 411 445 441 480 508 612 614 614 615 616 616 616 285 366 334 437 508 388 469 518 461 467 470 420 472 476 454 432 474 428 424 323)
Population mean number of perfect (error zero) cases: 30.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.286447455986E9
Median total errors in population: 214
Error averages by case: (52.997 44.132 39.154 57.189 50.342 48.459 49.632 55.681 53.161 6227072.275 6227071.748 6227065.655 6227068.636 6227074.671 6227070.912 6227066.378 6227071.308 6227071.51 6227073.317 6227074.218 41.03 40.405 52.828 62.166 6227083.105 6227065.702 6227065.741 6227065.858 6227067.681 6227069.36 6227067.332 6227070.892 6227070.815 6227068.507 6227065.636 6227068.727 6227068.273 6227070.908 1.006227069625E9 6227071.885 54.146 50.628 6227066.137 6227066.327 6227066.207 6227068.219 6227067.451 6227067.168 6227069.392 6227067.285 6227069.239 6227068.845 1.006227070987E9 1.0062270728E9 1.006227073043E9 1.006227074724E9 1.006227076185E9 1.006227074661E9 1.006227076115E9 1.006227075885E9 63.113 53.094 40.583 47.537 58.204 440.789 54.249 45.26 67.235 60.769 41.689 47.898 62.965 50.639 78.979 68.974 52.109 73.473 65.075 6227070.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.701
Average program size in population (points): 44.548
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.38
Error (vector) diversity:			 0.509
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 1419519182
--- Timings ---
Current time: 1481134983045 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove boolean_eq) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 431 305 353 333 299 324 288 307 376 390 470 406 401 414 430 397 317 321 200 402 274 142 134 147 185 294 274 282 331 412 370 389 399 381 397 377 341 391 357 231 200 266 194 331 345 434 430 416 434 448 477 515 585 585 586 588 588 588 588 289 397 326 452 534 390 460 530 459 466 504 461 485 485 455 462 494 436 441 325)
Population mean number of elite cases: 30.97
Count of perfect (error zero) individuals by case: (250 431 305 353 333 299 324 288 307 376 390 470 406 401 414 430 397 317 321 200 402 274 142 134 147 185 294 274 282 331 412 370 389 399 381 397 377 341 391 357 231 200 266 194 331 345 434 430 416 434 448 477 515 585 585 586 588 588 588 588 289 397 326 452 534 390 460 530 459 466 504 461 485 485 455 462 494 436 441 325)
Population mean number of perfect (error zero) cases: 30.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7987.162
Median total errors in population: 180
Error averages by case: (38.968 40.014 39.066 45.159 54.354 51.528 50.627 105.082 59.732 52.197 46.522 36.403 47.319 111.606 38.437 36.343 43.561 39.94 38.574 44.399 33.995 37.22 58.146 48.285 57.322 43.909 40.844 40.823 40.97 42.941 35.484 40.465 38.921 36.709 37.972 40.322 39.908 42.997 41.883 43.416 49.035 41.919 42.734 40.978 40.254 40.977 38.32 38.882 38.858 39.776 38.784 40.202 42.821 43.04 42.362 41.882 42.407 41.942 43.458 42.992 59.098 43.014 49.678 35.546 48.041 4339.981 56.263 39.157 55.509 47.654 40.629 43.972 56.03 44.858 70.22 63.706 41.262 53.54 49.006 56.012)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.367
Average program size in population (points): 44.079
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.378
Error (vector) diversity:			 0.513
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 1428678836
--- Timings ---
Current time: 1481135011345 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 416 303 355 328 312 328 304 279 372 362 414 395 346 382 386 367 319 349 193 386 257 107 140 146 177 314 284 292 348 363 355 355 401 373 359 377 347 404 363 220 200 256 220 301 381 453 438 428 460 439 475 508 594 594 597 597 597 598 599 300 411 326 453 550 426 493 545 488 498 526 469 498 477 483 480 482 439 461 360)
Population mean number of elite cases: 31.00
Count of perfect (error zero) individuals by case: (227 416 303 355 328 312 328 304 279 372 362 414 395 346 382 386 367 319 349 193 386 257 107 140 146 177 314 284 292 348 363 355 355 401 373 359 377 347 404 363 220 200 256 220 301 381 453 438 428 460 439 475 508 594 594 597 597 597 598 599 300 411 326 453 550 426 493 545 488 498 526 469 498 477 483 480 482 439 461 360)
Population mean number of perfect (error zero) cases: 31.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1059582.116
Median total errors in population: 174
Error averages by case: (44.944 35.136 39.007 46.178 54.322 53.226 49.55 42.572 50.223 65.289 47.161 46.105 49.066 49.669 37.798 38.659 45.873 41.324 41.026 44.383 37.004 40.371 59.906 52.128 64.835 43.648 43.105 45.145 41.377 41.041 38000.452 48.609 47.301 42.412 39.851 42.884 43.498 45.613 45.315 45.159 54.144 50.896 42.278 40.052 38.875 41.073 42.196 42.034 44.034 44.095 44.133 1015168.575 47.035 44.822 44.955 46.246 46.777 46.575 47.106 46.652 66.032 50.961 45.77 39.444 47.068 2777.584 61.26 39.291 58.139 47.524 42.526 43.727 52.987 54.775 65.875 58.755 45.636 57.379 55.049 58.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.324
Average program size in population (points): 44.079
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.363
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 1437765024
--- Timings ---
Current time: 1481135039739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 382 292 339 351 314 312 290 288 352 365 414 383 349 352 365 333 270 293 172 402 245 122 138 135 193 309 311 313 347 391 371 390 397 384 374 384 366 386 366 211 198 249 216 305 369 441 446 423 475 415 476 509 585 585 587 586 588 586 588 282 368 313 440 542 428 459 536 467 472 507 472 499 473 487 476 480 453 452 358)
Population mean number of elite cases: 30.57
Count of perfect (error zero) individuals by case: (230 382 292 339 351 314 312 290 288 352 365 414 383 349 352 365 333 270 293 172 402 245 122 138 135 193 309 311 313 347 391 371 390 397 384 374 384 366 386 366 211 198 249 216 305 369 441 446 423 475 415 476 509 585 585 587 586 588 586 588 282 368 313 440 542 428 459 536 467 472 507 472 499 473 487 476 480 453 452 358)
Population mean number of perfect (error zero) cases: 30.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6724.046
Median total errors in population: 214
Error averages by case: (57.014 50.103 56.019 56.189 62.486 59.054 58.681 53.507 66.821 76.326 59.141 52.808 58.73 59.424 53.822 54.23 58.827 61.18 56.355 57.0 47.03 52.384 71.809 66.937 78.154 54.89 55.727 55.813 61.129 53.954 55.763 51.577 56.571 53.442 54.873 58.334 58.091 60.388 59.666 57.994 69.094 62.497 56.567 56.369 53.453 56.229 54.569 55.211 56.889 55.735 56.897 57.388 59.381 61.223 63.228 64.028 63.394 63.715 64.285 64.855 72.117 57.041 53.629 50.497 59.157 2011.301 64.198 44.21 61.163 57.566 57.481 58.616 65.776 63.637 86.994 78.605 59.986 65.842 61.084 67.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.462
Average program size in population (points): 44.408
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.372
Error (vector) diversity:			 0.499
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 1446742963
--- Timings ---
Current time: 1481135067868 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 408 298 326 333 308 312 275 275 333 363 425 403 347 351 388 346 305 296 197 405 258 119 138 142 198 323 294 293 335 363 370 371 391 365 386 377 352 395 337 241 196 261 203 329 377 470 450 434 455 457 471 491 590 591 592 591 592 591 592 269 396 306 481 556 402 479 533 471 473 494 437 487 494 491 489 483 456 473 351)
Population mean number of elite cases: 30.75
Count of perfect (error zero) individuals by case: (255 408 298 326 333 308 312 275 275 333 363 425 403 347 351 388 346 305 296 197 405 258 119 138 142 198 323 294 293 335 363 370 371 391 365 386 377 352 395 337 241 196 261 203 329 377 470 450 434 455 457 471 491 590 591 592 591 592 591 592 269 396 306 481 556 402 479 533 471 473 494 437 487 494 491 489 483 456 473 351)
Population mean number of perfect (error zero) cases: 30.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6777.807
Median total errors in population: 180
Error averages by case: (50.912 42.051 48.98 63.333 52.535 50.064 46.497 48.649 57.034 62.262 46.686 47.186 51.443 53.281 43.35 43.076 49.663 49.47 46.216 50.702 38.01 49.419 55.733 58.193 59.674 51.545 48.596 46.521 42.396 47.838 45.841 47.149 51.011 42.684 43.093 46.13 44.851 49.61 48.152 46.307 51.054 66.719 49.603 47.132 47.063 45.851 43.513 45.257 46.534 47.889 45.385 47.707 48.652 48.984 52.111 52.097 52.825 52.045 52.787 53.564 71.161 51.013 49.652 41.292 47.066 2780.678 57.37 47.445 52.353 49.472 48.341 49.728 64.645 62.813 62.977 56.773 48.183 55.878 52.813 65.239)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.501
Average program size in population (points): 44.37
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.386
Error (vector) diversity:			 0.521
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 1455865028
--- Timings ---
Current time: 1481135095941 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 395 283 324 301 295 322 278 292 341 380 444 388 359 377 384 343 283 337 215 404 228 121 136 143 182 290 275 319 322 335 374 369 401 370 345 362 339 380 352 225 232 294 244 343 405 481 447 458 499 472 507 521 627 628 630 632 631 631 631 311 427 349 478 546 421 500 544 494 495 499 454 496 523 485 472 494 427 462 361)
Population mean number of elite cases: 31.42
Count of perfect (error zero) individuals by case: (259 395 283 324 301 295 322 278 292 341 380 444 388 359 377 384 343 283 337 215 404 228 121 136 143 182 290 275 319 322 335 374 369 401 370 345 362 339 380 352 225 232 294 244 343 405 481 447 458 499 472 507 521 627 628 630 632 631 631 631 311 427 349 478 546 421 500 544 494 495 499 454 496 523 485 472 494 427 462 361)
Population mean number of perfect (error zero) cases: 31.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5705.935
Median total errors in population: 174
Error averages by case: (46.874 39.045 41.021 62.157 43.338 52.551 37.451 42.497 43.022 55.097 50.329 39.034 50.01 57.047 38.573 41.147 42.651 48.813 43.742 47.894 35.017 36.388 52.004 45.932 53.863 40.357 43.801 49.657 39.577 41.989 41.056 44.858 49.723 45.376 45.027 50.741 47.178 51.794 49.855 49.865 45.101 50.647 51.103 41.771 40.217 46.898 44.411 45.629 48.816 44.522 48.763 49.129 49.122 47.13 50.231 50.005 50.102 49.707 50.046 50.691 58.071 44.934 44.476 39.365 50.144 1997.225 53.153 42.288 44.149 45.386 46.629 39.916 51.897 50.717 57.331 59.763 38.921 55.393 46.716 49.069)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.465
Average program size in population (points): 44.131
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.381
Error (vector) diversity:			 0.517
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 1465024902
--- Timings ---
Current time: 1481135122834 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 401 329 328 329 324 343 280 291 332 411 465 373 363 396 400 353 314 330 193 399 232 129 131 126 203 306 262 268 293 311 347 372 388 386 348 368 320 376 339 227 210 271 261 345 384 434 412 426 474 454 456 501 590 592 594 599 601 600 600 305 392 348 425 529 409 471 514 470 471 491 456 482 478 496 463 480 414 436 371)
Population mean number of elite cases: 30.66
Count of perfect (error zero) individuals by case: (269 401 329 328 329 324 343 280 291 332 411 465 373 363 396 400 353 314 330 193 399 232 129 131 126 203 306 262 268 293 311 347 372 388 386 348 368 320 376 339 227 210 271 261 345 384 434 412 426 474 454 456 501 590 592 594 599 601 600 600 305 392 348 425 529 409 471 514 470 471 491 456 482 478 496 463 480 414 436 371)
Population mean number of perfect (error zero) cases: 30.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6508.586
Median total errors in population: 192
Error averages by case: (51.876 45.016 49.929 65.072 52.267 126.472 48.743 53.923 59.175 71.721 60.457 50.14 54.467 59.19 50.652 54.779 58.244 64.629 58.67 57.739 44.932 46.425 63.793 66.177 67.984 54.341 50.066 59.253 55.271 52.908 50.132 49.568 53.095 52.817 49.194 51.661 51.762 52.935 53.362 53.993 55.023 56.878 51.559 57.843 52.299 49.217 49.879 52.866 53.005 51.809 54.563 51.76 54.068 53.84 57.082 57.729 57.366 56.956 57.814 58.717 65.026 54.942 52.557 45.544 67.056 2004.306 63.221 56.208 62.064 54.488 55.452 55.829 57.947 62.718 75.476 63.921 48.647 74.232 58.24 67.609)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.742
Average program size in population (points): 43.323
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.372
Error (vector) diversity:			 0.503
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 1474000924
--- Timings ---
Current time: 1481135150882 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 411 305 337 331 314 331 303 278 330 390 445 371 341 357 379 340 294 337 222 389 236 137 157 122 198 314 277 315 304 336 363 371 392 386 366 357 320 362 329 211 195 248 212 303 371 445 409 410 462 455 465 507 589 592 594 594 594 594 594 349 449 378 424 526 397 499 533 459 466 470 438 465 480 473 447 487 439 431 358)
Population mean number of elite cases: 30.51
Count of perfect (error zero) individuals by case: (255 411 305 337 331 314 331 303 278 330 390 445 371 341 357 379 340 294 337 222 389 236 137 157 122 198 314 277 315 304 336 363 371 392 386 366 357 320 362 329 211 195 248 212 303 371 445 409 410 462 455 465 507 589 592 594 594 594 594 594 349 449 378 424 526 397 499 533 459 466 470 438 465 480 473 447 487 439 431 358)
Population mean number of perfect (error zero) cases: 30.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5391.596
Median total errors in population: 347/2
Error averages by case: (58.908 48.016 48.99 57.145 53.408 58.959 53.425 50.448 52.316 60.451 51.72 48.781 54.66 56.724 47.04 47.417 58.296 46.646 51.445 48.291 43.979 45.478 53.916 57.879 59.892 50.648 51.649 50.899 46.877 46.444 47.944 57.611 45.754 48.572 46.945 49.55 49.512 51.127 51.844 51.694 56.066 52.675 52.222 46.238 47.647 47.199 48.167 48.75 50.7 51.15 52.378 49.842 51.703 53.189 54.085 55.338 55.569 56.046 56.499 56.976 64.998 56.886 51.506 44.526 53.079 1223.031 60.251 50.201 58.198 57.639 49.499 54.698 56.925 54.659 60.128 60.857 49.857 66.006 55.878 59.035)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.033
Average program size in population (points): 43.81
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.374
Error (vector) diversity:			 0.513
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 1482975822
--- Timings ---
Current time: 1481135179044 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 394 315 327 324 297 314 271 294 349 381 461 353 353 349 374 348 292 317 202 408 260 130 124 124 179 296 273 319 326 340 393 358 408 383 360 386 346 375 356 224 227 302 245 328 350 446 412 433 463 453 469 519 614 617 621 621 620 621 621 276 391 323 466 564 420 483 542 479 477 469 455 513 500 506 481 503 450 441 383)
Population mean number of elite cases: 31.03
Count of perfect (error zero) individuals by case: (247 394 315 327 324 297 314 271 294 349 381 461 353 353 349 374 348 292 317 202 408 260 130 124 124 179 296 273 319 326 340 393 358 408 383 360 386 346 375 356 224 227 302 245 328 350 446 412 433 463 453 469 519 614 617 621 621 620 621 621 276 391 323 466 564 420 483 542 479 477 469 455 513 500 506 481 503 450 441 383)
Population mean number of perfect (error zero) cases: 31.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6979.881
Median total errors in population: 180
Error averages by case: (46.957 40.104 35.591 45.135 50.374 55.261 42.615 44.76 51.78 53.314 48.384 41.47 44.233 47.365 41.434 42.515 46.663 42.896 49.147 49.774 38.029 42.363 49.805 57.997 55.136 42.479 45.952 46.276 42.222 45.489 44.827 43.633 46.699 43.004 45.184 49.179 48.391 51.3 50.596 48.762 56.183 44.662 43.464 41.081 46.817 46.771 46.383 45.979 48.736 48.566 47.357 50.899 52.092 48.588 51.006 50.433 51.368 51.848 52.298 52.775 63.087 48.999 50.556 40.782 55.075 3172.161 53.259 45.22 48.187 45.662 45.443 44.658 44.616 53.644 61.038 56.916 43.941 61.056 57.991 53.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.543
Average program size in population (points): 44.489
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.386
Error (vector) diversity:			 0.515
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 1492059277
--- Timings ---
Current time: 1481135205954 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 391 302 307 324 307 305 277 297 360 368 470 384 327 358 363 340 284 313 194 421 236 123 137 149 183 309 297 335 333 330 396 361 392 376 350 378 333 383 355 221 206 302 234 333 354 439 439 424 485 475 459 510 628 632 632 633 636 637 637 277 390 334 482 552 431 487 538 474 484 474 429 486 493 503 490 508 442 448 387)
Population mean number of elite cases: 31.13
Count of perfect (error zero) individuals by case: (254 391 302 307 324 307 305 277 297 360 368 470 384 327 358 363 340 284 313 194 421 236 123 137 149 183 309 297 335 333 330 396 361 392 376 350 378 333 383 355 221 206 302 234 333 354 439 439 424 485 475 459 510 628 632 632 633 636 637 637 277 390 334 482 552 431 487 538 474 484 474 429 486 493 503 490 508 442 448 387)
Population mean number of perfect (error zero) cases: 31.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6493.321
Median total errors in population: 160
Error averages by case: (57.904 56.08 56.993 61.189 73.117 68.011 62.251 60.565 65.7 66.847 62.169 55.268 65.37 65.129 57.321 56.348 56.26 54.409 61.625 58.277 48.938 52.387 69.836 62.853 63.486 57.533 62.545 59.577 57.454 58.645 56.521 61.871 58.394 57.909 56.129 61.833 58.087 65.135 62.361 59.617 72.068 66.388 57.334 55.05 57.512 61.544 60.262 57.699 60.695 59.767 59.731 65.626 61.379 60.447 61.38 61.71 62.036 62.366 61.689 63.025 72.109 65.999 53.553 49.381 62.017 1627.568 73.221 60.099 71.143 58.494 61.366 58.769 64.621 67.283 79.615 67.318 56.914 76.916 57.696 69.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.651
Average program size in population (points): 44.634
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.341
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 1501086509
--- Timings ---
Current time: 1481135232662 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 403 297 335 318 313 294 258 305 384 403 466 367 367 393 412 392 314 306 199 411 248 130 137 135 199 290 264 323 306 334 364 366 407 383 365 407 367 395 358 244 211 278 228 328 366 452 416 415 464 459 459 536 628 632 632 635 639 639 640 292 387 321 465 546 455 487 546 466 494 472 469 507 495 490 465 466 440 437 363)
Population mean number of elite cases: 31.35
Count of perfect (error zero) individuals by case: (268 403 297 335 318 313 294 258 305 384 403 466 367 367 393 412 392 314 306 199 411 248 130 137 135 199 290 264 323 306 334 364 366 407 383 365 407 367 395 358 244 211 278 228 328 366 452 416 415 464 459 459 536 628 632 632 635 639 639 640 292 387 321 465 546 455 487 546 466 494 472 469 507 495 490 465 466 440 437 363)
Population mean number of perfect (error zero) cases: 31.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.47294472279E8
Median total errors in population: 166
Error averages by case: (45.902 2.82429573572E8 42.975 53.209 55.233 56.784 56.454 50.835 55.492 64.414 55.455 45.246 49.701 48.289 40.035 46.049 45.594 38.399 47.451 44.598 2.82429574405E8 43.581 51.852 62.889 61.606 51.458 39.398 43.913 38.609 41.379 43.167 47.577 42.207 42.301 41.654 44.688 42.381 45.14 46.207 49.363 56.108 51.675 46.197 42.102 41.211 44.349 41.66 42.385 42.961 43.508 46.479 47.971 45.24 44.818 47.062 48.024 49.42 47.828 50.497 48.637 55.089 43.029 2.82429584068E8 40.435 54.026 2003.387 57.173 48.197 54.167 54.459 49.454 51.666 58.526 55.491 75.013 62.866 42.156 72.007 54.594 58.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.586
Average program size in population (points): 44.721
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.362
Error (vector) diversity:			 0.511
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 1510163402
--- Timings ---
Current time: 1481135259423 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 384 307 346 309 316 316 288 285 345 370 431 364 339 354 396 345 281 301 210 401 238 130 143 138 181 297 251 327 314 334 397 368 379 350 360 379 351 374 331 234 196 299 247 351 367 444 428 431 482 454 452 500 604 609 613 612 616 615 615 287 379 333 454 524 418 489 545 445 477 476 458 468 477 481 466 480 436 452 352)
Population mean number of elite cases: 30.64
Count of perfect (error zero) individuals by case: (248 384 307 346 309 316 316 288 285 345 370 431 364 339 354 396 345 281 301 210 401 238 130 143 138 181 297 251 327 314 334 397 368 379 350 360 379 351 374 331 234 196 299 247 351 367 444 428 431 482 454 452 500 604 609 613 612 616 615 615 287 379 333 454 524 418 489 545 445 477 476 458 468 477 481 466 480 436 452 352)
Population mean number of perfect (error zero) cases: 30.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.847343353893E9
Median total errors in population: 200
Error averages by case: (58.958 2.82429590667E8 59.124 66.26 68.383 75.881 75.476 61.15 69.903 72.23 66.35 58.848 60.053 66.093 56.478 57.62 54.843 1.000000055763E9 387.219 58.124 2.82429587419E8 59.446 65.945 68.984 73.953 63.827 58.165 55.338 53.671 54.937 55.372 54.049 54.816 57.722 54.014 56.379 56.851 60.418 60.342 60.309 70.13 61.657 58.036 54.535 53.825 55.066 56.366 56.506 55.966 57.378 62.295 60.549 60.637 60.564 63.2 62.411 64.091 62.811 64.268 63.747 70.117 55.052 2.82429600088E8 51.555 65.316 3181.205 60.341 58.13 70.22 62.841 61.532 58.657 63.868 65.69 76.911 90.786 979.476 84.832 45497.582 64.276)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.074
Average program size in population (points): 43.925
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.38
Error (vector) diversity:			 0.503
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 1519120675
--- Timings ---
Current time: 1481135286164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 377 322 305 300 305 293 263 286 346 373 451 380 378 400 405 399 314 322 201 422 239 142 154 149 192 299 274 334 309 343 393 374 397 374 372 383 359 382 356 234 218 289 227 365 395 458 420 434 487 471 460 525 605 611 611 611 613 613 612 290 401 323 444 512 457 500 559 476 475 473 463 492 497 463 470 476 442 445 363)
Population mean number of elite cases: 31.22
Count of perfect (error zero) individuals by case: (274 377 322 305 300 305 293 263 286 346 373 451 380 378 400 405 399 314 322 201 422 239 142 154 149 192 299 274 334 309 343 393 374 397 374 372 383 359 382 356 234 218 289 227 365 395 458 420 434 487 471 460 525 605 611 611 611 613 613 612 290 401 323 444 512 457 500 559 476 475 473 463 492 497 463 470 476 442 445 363)
Population mean number of perfect (error zero) cases: 31.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6655.788
Median total errors in population: 357/2
Error averages by case: (57.85 47.131 45.937 64.088 60.275 55.808 58.592 50.155 53.83 58.441 63.499 46.396 52.082 53.69 46.242 45.195 50.475 47.53 56.673 50.425 44.896 45.372 58.801 62.024 61.523 49.669 43.955 45.346 49.826 46.706 51.845 46.292 49.171 48.315 46.872 48.744 49.19 52.165 53.204 51.157 60.148 52.612 48.895 49.638 47.293 46.629 45.941 50.747 50.715 48.776 52.194 51.706 51.307 50.749 52.107 54.242 54.853 54.497 55.437 54.873 68.096 55.954 55.579 43.54 66.179 2460.789 63.163 57.025 55.101 46.697 45.726 56.517 60.62 53.485 68.893 68.907 47.03 73.832 56.877 49.032)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.257
Average program size in population (points): 44.122
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.353
Error (vector) diversity:			 0.495
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 1528145062
--- Timings ---
Current time: 1481135313049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 402 327 312 302 280 283 286 294 359 371 413 373 352 379 378 360 307 316 189 386 258 145 145 142 218 324 278 329 349 362 373 379 394 385 373 387 374 386 359 246 222 256 237 326 366 470 449 433 464 474 474 544 613 615 618 620 622 622 622 324 403 329 439 516 441 516 562 485 475 482 441 488 480 482 479 486 416 433 373)
Population mean number of elite cases: 31.21
Count of perfect (error zero) individuals by case: (234 402 327 312 302 280 283 286 294 359 371 413 373 352 379 378 360 307 316 189 386 258 145 145 142 218 324 278 329 349 362 373 379 394 385 373 387 374 386 359 246 222 256 237 326 366 470 449 433 464 474 474 544 613 615 618 620 622 622 622 324 403 329 439 516 441 516 562 485 475 482 441 488 480 482 479 486 416 433 373)
Population mean number of perfect (error zero) cases: 31.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove})
Best program: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Partial simplification: (boolean_eq integer_swap boolean_shove exec_if (boolean_pop) (integer_dup boolean_stackdepth integer_min integer_shove 3) exec_do*range (in1 exec_dup_items integer_dup_times boolean_xor boolean_stackdepth) exec_if (exec_eq) (boolean_dup boolean_xor) boolean_shove integer_fromboolean boolean_stackdepth exec_do*range (in1 exec_dup_items integer_shove integer_shove 3) exec_do*range (boolean_empty exec_do*while () boolean_yankdup integer_dup_times) integer_gt boolean_shove)
Errors: [0 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 1 1 1 1 1 1 1 1]
Total: 46
Mean: 0.575
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5058.791
Median total errors in population: 162N
Error averages by case: (47.912 33.102 35.031 47.313 42.571 47.27 43.559 43.735 45.904 62.297 41.563 38.945 47.313 52.165 42.397 40.392 42.877 41.316 48.099 43.017 33.01 33.329 51.804 49.861 52.481 36.472 39.599 40.721 37.079 38.333 38.818 43.622 39.516 40.405 38.141 40.393 38.423 44.312 44.997 43.267 52.378 51.525 39.947 37.08 38.088 41.107 38.186 41.564 42.408 43.537 40.949 44.868 40.602 45.573 42.385 46.267 43.823 43.656 45.207 44.798 53.095 45.006 42.583 33.513 48.2 1599.701 47.404 44.194 44.354 39.846 35.528 41.702 49.029 50.477 59.7 57.764 39.438 57.058 45.833 49.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.455
Average program size in population (points): 44.282
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.362
Error (vector) diversity:			 0.508
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 1537259831
--- Timings ---
Current time: 1481135341439 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (integer_max) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (integer_max) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (integer_max) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (integer_max) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 379 324 347 319 315 303 286 313 367 402 437 373 369 378 381 355 293 324 189 418 258 147 134 149 182 279 284 304 348 355 348 351 392 399 391 399 380 397 362 213 202 260 236 315 348 439 388 378 442 430 424 494 583 585 587 591 594 594 594 271 358 335 443 556 418 491 523 452 462 432 445 486 470 496 498 496 457 438 372)
Population mean number of elite cases: 30.58
Count of perfect (error zero) individuals by case: (254 379 324 347 319 315 303 286 313 367 402 437 373 369 378 381 355 293 324 189 418 258 147 134 149 182 279 284 304 348 355 348 351 392 399 391 399 380 397 362 213 202 260 236 315 348 439 388 378 442 430 424 494 583 585 587 591 594 594 594 271 358 335 443 556 418 491 523 452 462 432 445 486 470 496 498 496 457 438 372)
Population mean number of perfect (error zero) cases: 30.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction 3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 2 2 2 2 1 1 1 2 0 0 0 2 0 0 0 0 1 0 1 3 3 2 1 1 2 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 48
Mean: 0.6
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 5411.885
Median total errors in population: 156
Error averages by case: (50.916 39.213 36.252 42.247 43.563 53.009 44.821 43.073 38.403 59.121 46.316 34.762 49.032 53.516 39.928 37.672 41.956 44.535 46.357 48.014 37.057 42.34 52.946 54.216 53.227 40.954 36.428 40.025 41.081 43.469 40.974 48.356 47.08 49.14 48.172 51.808 52.84 55.158 59.37 58.722 63.349 49.141 40.757 41.127 42.152 46.285 47.295 52.301 54.61 58.222 63.972 71.027 76.333 81.116 87.598 97.729 103.319 112.358 120.124 130.087 61.17 46.108 44.614 37.64 48.081 1217.02 46.301 43.343 50.275 44.606 40.867 43.798 45.32 47.939 59.236 62.3 44.503 55.441 44.461 43.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.183
Average program size in population (points): 44.034
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.397
Error (vector) diversity:			 0.541
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 1546347110
--- Timings ---
Current time: 1481135368260 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 412 337 355 309 317 292 297 335 376 390 434 353 350 388 381 356 290 300 204 410 268 146 143 145 182 333 281 324 330 358 357 390 409 379 373 386 373 392 363 239 204 296 234 343 374 469 434 424 506 467 468 527 614 614 617 616 619 618 618 287 391 347 430 538 450 497 544 484 497 470 456 505 512 489 500 503 443 447 385)
Population mean number of elite cases: 31.56
Count of perfect (error zero) individuals by case: (263 412 337 355 309 317 292 297 335 376 390 434 353 350 388 381 356 290 300 204 410 268 146 143 145 182 333 281 324 330 358 357 390 409 379 373 386 373 392 363 239 204 296 234 343 374 469 434 424 506 467 468 527 614 614 617 616 619 618 618 287 391 347 430 538 450 497 544 484 497 470 456 505 512 489 500 503 443 447 385)
Population mean number of perfect (error zero) cases: 31.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction 3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 2 2 2 2 1 1 1 2 0 0 0 2 0 0 0 0 1 0 1 3 3 2 1 1 2 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 48
Mean: 0.6
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 5658.162
Median total errors in population: 156
Error averages by case: (38.918 36.274 35.207 43.264 41.512 52.922 41.664 46.859 40.655 55.524 39.534 39.728 46.08 46.241 36.315 39.057 39.465 35.956 38.237 36.345 30.953 38.547 42.133 48.961 49.468 40.938 32.355 34.905 36.593 33.829 37.379 37.994 36.259 35.909 34.692 37.179 37.83 39.92 39.057 38.864 45.5 40.491 37.295 35.751 35.053 36.445 35.156 35.879 39.293 38.594 39.398 41.592 41.143 40.553 42.902 44.455 46.266 45.848 46.697 47.3 47.148 41.012 45.486 32.587 50.055 2385.826 44.242 41.455 45.184 37.499 42.562 40.61 49.026 46.372 63.782 55.738 41.818 52.801 45.739 40.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.939
Average program size in population (points): 43.794
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.364
Error (vector) diversity:			 0.489
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 1555447309
--- Timings ---
Current time: 1481135395432 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 384 330 337 284 316 269 302 321 392 396 451 371 354 385 381 361 293 297 194 418 235 147 136 125 175 338 293 319 336 341 340 380 429 401 377 393 363 411 368 217 198 242 241 303 339 426 406 405 450 434 429 504 601 602 605 606 608 608 608 272 375 316 459 556 472 505 533 502 488 492 468 522 517 471 493 506 465 444 368)
Population mean number of elite cases: 31.05
Count of perfect (error zero) individuals by case: (255 384 330 337 284 316 269 302 321 392 396 451 371 354 385 381 361 293 297 194 418 235 147 136 125 175 338 293 319 336 341 340 380 429 401 377 393 363 411 368 217 198 242 241 303 339 426 406 405 450 434 429 504 601 602 605 606 608 608 608 272 375 316 459 556 472 505 533 502 488 492 468 522 517 471 493 506 465 444 368)
Population mean number of perfect (error zero) cases: 31.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction 3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 2 2 2 2 1 1 1 2 0 0 0 2 0 0 0 0 1 0 1 3 3 2 1 1 2 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 48
Mean: 0.6
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 6887.789
Median total errors in population: 174
Error averages by case: (54.903 50.193 43.99 57.17 53.368 71.77 48.77 57.556 59.928 57.539 58.541 46.951 51.521 58.139 54.981 55.567 60.445 53.904 63.089 55.864 46.977 48.394 55.0 60.206 66.313 57.153 49.839 49.877 52.538 56.287 56.885 61.043 58.198 55.168 53.631 56.345 57.052 58.518 58.688 58.243 59.399 60.539 53.897 54.926 53.765 55.498 56.611 54.995 57.585 57.199 58.794 61.226 59.325 57.355 60.573 59.484 59.331 59.891 60.495 61.061 58.116 50.015 55.555 43.577 64.065 2392.808 56.197 56.228 57.182 56.44 50.441 62.444 60.816 60.363 78.626 66.738 48.061 62.751 56.802 58.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.925
Average program size in population (points): 43.75
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.382
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 1564502239
--- Timings ---
Current time: 1481135422546 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 378 326 325 298 286 247 265 294 347 392 463 384 370 354 402 365 291 334 184 409 242 150 138 132 179 291 266 349 325 342 343 366 426 398 407 391 378 392 380 239 188 256 206 315 326 408 388 374 438 425 430 481 587 590 591 592 594 594 594 275 419 311 482 582 468 509 543 501 478 494 478 525 523 478 516 513 495 452 387)
Population mean number of elite cases: 30.90
Count of perfect (error zero) individuals by case: (244 378 326 325 298 286 247 265 294 347 392 463 384 370 354 402 365 291 334 184 409 242 150 138 132 179 291 266 349 325 342 343 366 426 398 407 391 378 392 380 239 188 256 206 315 326 408 388 374 438 425 430 481 587 590 591 592 594 594 594 275 419 311 482 582 468 509 543 501 478 494 478 525 523 478 516 513 495 452 387)
Population mean number of perfect (error zero) cases: 30.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction 3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush})
Best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_add exec_empty boolean_xor boolean_shove integer_fromboolean boolean_stackdepth boolean_stackdepth integer_min integer_gte 3 integer_yankdup 3 exec_do*range (in1 exec_dup_items integer_div boolean_xor boolean_flush))
Errors: [1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 2 2 2 2 1 1 1 2 0 0 0 2 0 0 0 0 1 0 1 3 3 2 1 1 2 1 0 1 1 0 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 48
Mean: 0.6
Genome size: 45
Size: 53
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 9936.615
Median total errors in population: 165
Error averages by case: (41.949 33.264 34.069 39.335 40.444 58.211 3674.759 51.183 55.02 54.832 43.744 37.959 36.895 43.168 40.46 40.68 37.464 38.548 46.349 43.139 39.996 39.513 49.148 47.216 58.83 42.917 38.157 35.817 39.759 39.837 40.335 38.649 46.09 42.372 42.768 43.023 45.624 45.042 46.593 44.256 42.387 47.85 47.136 38.614 39.841 43.075 40.39 43.973 41.611 42.693 44.148 48.771 47.373 44.532 48.144 47.772 48.401 49.032 49.655 50.292 44.153 33.004 45.626 34.351 49.075 2779.481 41.277 40.39 42.506 40.659 44.627 56.925 46.017 46.746 65.035 57.926 40.727 60.853 52.542 51.591)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.186
Average program size in population (points): 43.967
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.406
Error (vector) diversity:			 0.535
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 1573666315
--- Timings ---
Current time: 1481135449380 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 400 314 362 310 312 288 305 305 368 390 456 369 357 369 382 381 312 334 209 424 246 147 144 144 192 301 290 350 332 362 327 360 415 408 400 395 346 375 364 251 215 260 213 295 336 426 390 399 449 431 427 497 586 590 593 592 594 594 594 268 391 315 487 566 446 493 545 478 461 467 441 479 488 457 470 498 451 451 365)
Population mean number of elite cases: 30.85
Count of perfect (error zero) individuals by case: (255 400 314 362 310 312 288 305 305 368 390 456 369 357 369 382 381 312 334 209 424 246 147 144 144 192 301 290 350 332 362 327 360 415 408 400 395 346 375 364 251 215 260 213 295 336 426 390 399 449 431 427 497 586 590 593 592 594 594 594 268 391 315 487 566 446 493 545 478 461 467 441 479 488 457 470 498 451 451 365)
Population mean number of perfect (error zero) cases: 30.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Total: 48
Mean: 0.6
Genome size: 42
Size: 49
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6104.702
Median total errors in population: 180
Error averages by case: (49.926 43.12 39.116 49.476 51.579 57.282 51.855 51.295 52.093 58.843 49.231 41.302 49.159 49.241 44.14 44.796 42.29 43.921 52.719 48.311 43.01 42.447 45.249 58.566 61.893 45.853 42.272 40.856 42.381 43.353 43.186 51.953 44.3 41.824 40.953 43.072 42.577 47.011 45.1 48.207 55.481 46.86 47.613 44.641 43.991 44.181 44.712 43.936 43.027 42.312 46.046 48.84 49.444 48.274 50.095 51.02 50.606 51.455 53.043 52.654 581.799 576.463 54.585 37.499 55.171 1220.197 43.49 49.594 57.566 50.645 42.748 53.31 54.224 46.853 68.078 53.148 46.419 68.247 54.407 48.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.294
Average program size in population (points): 44.128
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.395
Error (vector) diversity:			 0.539
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 1582798010
--- Timings ---
Current time: 1481135477342 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 417 323 336 329 305 286 284 301 347 394 436 347 355 381 383 349 282 312 174 431 258 167 149 145 209 302 304 368 344 381 363 376 430 414 410 381 375 400 374 252 195 251 201 305 341 429 380 397 460 426 446 526 595 597 600 600 602 604 605 260 391 311 469 566 467 477 533 475 445 445 429 503 484 467 468 498 478 470 353)
Population mean number of elite cases: 30.97
Count of perfect (error zero) individuals by case: (250 417 323 336 329 305 286 284 301 347 394 436 347 355 381 383 349 282 312 174 431 258 167 149 145 209 302 304 368 344 381 363 376 430 414 410 381 375 400 374 252 195 251 201 305 341 429 380 397 460 426 446 526 595 597 600 600 602 604 605 260 391 311 469 566 467 477 533 475 445 445 429 503 484 467 468 498 478 470 353)
Population mean number of perfect (error zero) cases: 30.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Errors: [0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 2 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0]
Total: 45
Mean: 0.5625
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 3.1386227282E7
Median total errors in population: 160
Error averages by case: (48.856 43.038 44.097 47.232 41.629 46.853 53.293 56.65 50.772 58.565 60.144 45.28 61.609 61.57 48.378 45.571 47.535 45.906 56.544 50.044 3.1381104546E7 47.438 48.098 55.784 55.783 46.616 52.134 46.46 47.554 46.767 47.287 54.998 53.474 55.672 57.767 59.682 62.342 66.251 65.434 68.649 54.412 50.426 51.068 46.865 49.071 51.977 55.323 61.294 66.525 70.245 75.949 78.821 86.338 90.918 99.097 106.298 114.672 123.034 131.822 141.084 57.322 47.953 48.638 46.418 61.056 436.746 52.544 52.387 47.594 45.994 46.805 56.416 57.349 59.269 69.662 55.85 51.147 61.763 51.036 59.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.168
Average program size in population (points): 44.029
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.368
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 1591868529
--- Timings ---
Current time: 1481135505381 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop boolean_pop boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 418 346 347 340 297 284 296 314 358 404 427 372 369 401 406 396 305 343 178 424 235 149 163 140 195 316 269 339 342 362 346 370 404 384 380 385 367 375 382 255 195 243 204 307 348 433 390 383 465 439 427 509 589 589 593 593 597 597 597 262 377 347 482 578 463 498 553 496 450 450 424 485 492 457 475 500 462 445 370)
Population mean number of elite cases: 31.02
Count of perfect (error zero) individuals by case: (269 418 346 347 340 297 284 296 314 358 404 427 372 369 401 406 396 305 343 178 424 235 149 163 140 195 316 269 339 342 362 346 370 404 384 380 385 367 375 382 255 195 243 204 307 348 433 390 383 465 439 427 509 589 589 593 593 597 597 597 262 377 347 482 578 463 498 553 496 450 450 424 485 492 457 475 500 462 445 370)
Population mean number of perfect (error zero) cases: 31.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Errors: [0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 2 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0]
Total: 45
Mean: 0.5625
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 3803.679
Median total errors in population: 151
Error averages by case: (38.914 39.059 42.193 48.168 39.43 46.798 49.425 46.673 43.429 57.347 52.545 41.911 49.342 52.275 41.429 40.681 42.438 44.214 50.969 46.214 37.006 37.575 46.774 54.203 60.386 43.967 42.302 42.611 43.856 44.122 43.795 46.106 42.868 43.612 42.932 43.16 43.005 47.163 46.674 44.021 43.296 45.439 53.609 40.929 42.601 42.763 41.905 41.862 44.331 41.74 46.693 44.421 45.223 47.526 49.489 47.361 48.778 48.199 49.606 49.335 50.407 43.055 41.569 36.415 52.16 45.049 40.321 49.149 38.262 38.647 44.54 50.851 53.107 177.302 63.851 49.684 48.695 55.89 51.705 48.322)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.362
Average program size in population (points): 44.251
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.376
Error (vector) diversity:			 0.523
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 1600909134
--- Timings ---
Current time: 1481135533673 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 407 337 341 334 321 285 286 288 362 423 441 353 364 403 403 370 306 338 199 445 253 161 149 133 195 306 272 333 336 359 339 353 392 384 379 368 358 390 375 278 238 264 215 330 343 425 407 433 482 441 462 510 588 587 590 590 593 593 593 258 382 309 460 558 465 508 524 477 420 446 419 480 486 470 470 495 475 467 387)
Population mean number of elite cases: 31.02
Count of perfect (error zero) individuals by case: (261 407 337 341 334 321 285 286 288 362 423 441 353 364 403 403 370 306 338 199 445 253 161 149 133 195 306 272 333 336 359 339 353 392 384 379 368 358 390 375 278 238 264 215 330 343 425 407 433 482 441 462 510 588 587 590 590 593 593 593 258 382 309 460 558 465 508 524 477 420 446 419 480 486 470 470 495 475 467 387)
Population mean number of perfect (error zero) cases: 31.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Errors: [0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 2 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0]
Total: 45
Mean: 0.5625
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 4.004190100403E9
Median total errors in population: 156
Error averages by case: (49.937 45.095 200.707 205.766 205.022 212.514 211.38 203.397 203.617 213.012 209.957 203.169 210.673 212.054 201.409 200.422 201.542 299194.933 204.627 199.557 44.829 203.935 204.64 60.005 225.956 204.515 45.317 861.648 199.76 200.185 1.000000205806E9 199.23 202.329 201.104 200.524 1.000000201948E9 3875202.738 204.653 204.377 203.97 201.995 45.835 211.03 202.342 224.575 201.766 201.31 201.578 201.227 1.000000201306E9 256.978 202.032 204.226 294.621 307.268 321.596 336.842 352.978 370.013 387.958 97.046 72.45 43.626 46.461 58.114 211.64 203.885 202.083 48.369 201.356 205.169 136.7 219.545 212.304 235.514 221.788 207.692 218.635 1.000000211418E9 52.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.055
Average program size in population (points): 43.88
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.357
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 1609912295
--- Timings ---
Current time: 1481135560968 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 420 333 336 338 299 263 297 278 333 425 448 353 344 389 400 368 300 334 184 441 253 155 152 143 195 342 294 350 351 369 352 365 382 378 371 354 352 383 347 270 216 268 237 332 378 461 418 437 510 468 484 526 625 626 628 629 629 629 629 278 428 322 453 574 462 497 553 480 467 464 433 497 481 452 468 497 472 443 360)
Population mean number of elite cases: 31.52
Count of perfect (error zero) individuals by case: (269 420 333 336 338 299 263 297 278 333 425 448 353 344 389 400 368 300 334 184 441 253 155 152 143 195 342 294 350 351 369 352 365 382 378 371 354 352 383 347 270 216 268 237 332 378 461 418 437 510 468 484 526 625 626 628 629 629 629 629 278 428 322 453 574 462 497 553 480 467 464 433 497 481 452 468 497 472 443 360)
Population mean number of perfect (error zero) cases: 31.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Errors: [0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 2 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0]
Total: 45
Mean: 0.5625
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 4054.093
Median total errors in population: 130
Error averages by case: (55.885 42.013 49.023 58.138 48.408 48.957 48.649 47.701 41.897 52.55 51.389 47.221 56.178 56.727 45.243 44.372 46.28 45.564 54.722 48.963 46.873 46.397 46.901 56.911 64.663 45.602 47.601 42.759 45.66 47.848 46.902 48.351 48.0 46.557 47.767 46.532 49.388 50.664 47.676 48.113 52.253 47.874 47.459 45.979 45.818 49.35 46.608 46.814 48.01 48.532 51.401 51.787 52.353 52.402 54.549 54.148 55.871 55.375 56.142 56.658 60.115 53.912 51.519 42.503 55.078 51.062 49.235 53.199 45.272 46.491 49.588 56.745 61.959 56.775 64.858 60.997 49.169 59.853 54.001 51.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.319
Average program size in population (points): 44.194
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.33
Error (vector) diversity:			 0.463
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 1618866961
--- Timings ---
Current time: 1481135589626 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 413 358 353 348 289 281 312 299 358 428 459 389 348 389 406 363 305 334 199 411 221 139 131 128 187 306 282 340 355 374 356 385 415 387 376 381 363 391 358 252 194 274 233 302 341 424 403 433 487 435 461 508 598 601 604 604 605 604 604 258 393 345 451 542 457 489 523 469 427 470 465 497 479 457 462 480 475 468 353)
Population mean number of elite cases: 31.09
Count of perfect (error zero) individuals by case: (250 413 358 353 348 289 281 312 299 358 428 459 389 348 389 406 363 305 334 199 411 221 139 131 128 187 306 282 340 355 374 356 385 415 387 376 381 363 391 358 252 194 274 233 302 341 424 403 433 487 435 461 508 598 601 604 604 605 604 604 258 393 345 451 542 457 489 523 469 427 470 465 497 479 457 462 480 475 468 353)
Population mean number of perfect (error zero) cases: 31.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Best program: (boolean_pop boolean_pop integer_add boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Partial simplification: (boolean_pop boolean_pop integer_add boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_gte boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_add integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Errors: [0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 2 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 3 0 0 1 1 0 1 1 1 3 0 0 0 0 0 0 0 0]
Total: 45
Mean: 0.5625
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 1.3212740422646E10
Median total errors in population: 303/2
Error averages by case: (43.955 41.047 49.195 55.069 40.464 1.06661364211E8 47.781 50.88 1.61356216959E9 2.000000058657E9 51.336 39.096 1.15442087722E8 44.692 1.00000004091E9 40.216 43.42 42.138 49.543 43.301 33.02 42.549 45.951 53.086 2.000000064678E9 42.443 43.522 39.003 44.124 43.708 46.501 45.623 43.033 45.866 48.278 47.074 47.942 50.565 48.64 47.744 51.46 46.181 44.471 43.96 43.535 46.14 75.829 45.932 45.105 46.382 48.639 49.921 48.242 48.191 48.764 49.136 48.616 49.105 49.577 50.068 44.267 43.0 41.605 2.000000040476E9 46.165 53.012 376541.345 50.483 45.999 38.629 14904.124 49.752 48.784 5066713.184 63.797 61.216 1.097633541358E9 1.334949613833E9 1.939030126691E9 49.099)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.4
Average program size in population (points): 44.232
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.363
Error (vector) diversity:			 0.523
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 1627915657
--- Timings ---
Current time: 1481135617667 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 405 332 342 334 304 289 331 286 344 419 441 396 364 370 412 355 292 350 194 428 222 151 136 131 198 334 306 374 330 372 345 388 400 387 386 365 349 405 383 244 201 269 233 321 357 412 401 402 475 462 435 504 585 592 596 596 596 596 596 255 396 344 447 557 461 499 543 500 472 473 452 493 490 465 489 510 481 467 388)
Population mean number of elite cases: 31.30
Count of perfect (error zero) individuals by case: (291 405 332 342 334 304 289 331 286 344 419 441 396 364 370 412 355 292 350 194 428 222 151 136 131 198 334 306 374 330 372 345 388 400 387 386 365 349 405 383 244 201 269 233 321 357 412 401 402 475 462 435 504 585 592 596 596 596 596 596 255 396 344 447 557 461 499 543 500 472 473 452 493 490 465 489 510 481 467 388)
Population mean number of perfect (error zero) cases: 31.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3973.682
Median total errors in population: 142
Error averages by case: (45.878 44.182 47.211 56.106 48.377 50.949 53.79 58.868 43.278 59.81 47.349 44.134 50.052 46.359 44.158 43.62 44.652 49.466 53.515 46.848 40.929 44.64 50.8 65.184 53.6 47.894 41.413 41.771 46.755 43.369 52.529 47.478 47.487 49.205 45.48 48.158 48.221 48.903 47.356 48.062 57.235 48.923 44.366 46.768 45.416 47.299 44.167 44.707 47.143 46.293 49.064 50.153 50.155 49.066 49.729 49.496 50.182 50.639 51.083 51.13 56.174 46.963 44.56 44.495 67.043 58.026 55.208 58.21 47.243 47.405 51.566 52.771 51.989 57.585 64.736 58.092 44.082 60.043 48.127 48.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.836
Average program size in population (points): 43.491
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.346
Error (vector) diversity:			 0.494
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 1636893582
--- Timings ---
Current time: 1481135644356 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 387 327 352 357 310 278 337 296 352 428 449 384 369 368 386 360 322 358 195 458 215 135 163 104 167 303 273 302 342 347 340 390 398 387 375 353 347 394 369 247 189 289 215 338 346 417 394 421 475 420 451 472 595 598 606 608 607 608 607 243 394 330 476 603 460 507 553 502 464 482 490 508 498 511 458 498 487 465 378)
Population mean number of elite cases: 31.32
Count of perfect (error zero) individuals by case: (331 387 327 352 357 310 278 337 296 352 428 449 384 369 368 386 360 322 358 195 458 215 135 163 104 167 303 273 302 342 347 340 390 398 387 375 353 347 394 369 247 189 289 215 338 346 417 394 421 475 420 451 472 595 598 606 608 607 608 607 243 394 330 476 603 460 507 553 502 464 482 490 508 498 511 458 498 487 465 378)
Population mean number of perfect (error zero) cases: 31.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4002.16
Median total errors in population: 155
Error averages by case: (43.869 42.045 41.147 48.027 47.4 54.604 54.62 51.79 51.103 60.75 50.611 46.34 49.104 49.87 43.028 44.929 45.641 45.633 52.632 42.854 43.939 41.54 53.929 57.263 70.591 45.656 44.939 45.378 48.452 43.106 48.264 46.14 45.869 48.44 46.066 47.173 48.845 52.003 49.068 48.174 57.262 48.895 45.333 48.153 44.359 50.142 45.196 47.783 45.346 46.903 49.319 49.473 47.92 49.401 50.514 51.506 50.576 51.122 51.656 52.497 53.197 47.996 54.529 42.47 58.028 53.994 51.237 55.291 47.293 47.422 50.502 54.607 50.962 58.528 60.809 65.078 50.09 53.851 58.401 63.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.19
Average program size in population (points): 44.033
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.358
Error (vector) diversity:			 0.518
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 1645950765
--- Timings ---
Current time: 1481135670933 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 237
Lexicase best mean error: 2.9625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 237
Zero cases best mean error: 2.9625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 395 341 381 356 327 308 327 292 376 456 457 381 361 379 406 377 309 347 189 429 243 173 154 114 177 311 301 350 345 378 351 411 433 410 404 396 397 415 401 258 186 299 245 358 359 420 403 410 494 435 463 500 610 609 612 615 613 615 613 262 401 312 469 607 452 498 550 481 472 451 467 504 502 488 493 519 497 483 395)
Population mean number of elite cases: 32.10
Count of perfect (error zero) individuals by case: (326 395 341 381 356 327 308 327 292 376 456 457 381 361 379 406 377 309 347 189 429 243 173 154 114 177 311 301 350 345 378 351 411 433 410 404 396 397 415 401 258 186 299 245 358 359 420 403 410 494 435 463 500 610 609 612 615 613 615 613 262 401 312 469 607 452 498 550 481 472 451 467 504 502 488 493 519 497 483 395)
Population mean number of perfect (error zero) cases: 32.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.960655815351E9
Median total errors in population: 144
Error averages by case: (40.797 39.1 2.82429574467E8 45.0 34.224 36.691 41.367 37.767 32.831 44.358 45.862 30.272 38.319 43.535 35.751 34.935 1.000000034538E9 35.706 42.166 38.712 38.918 35.481 39.729 45.966 57.78 34.688 38.156 35.091 36.241 34.186 37.944 36.711 36.121 39.065 35.802 36.936 40.506 40.287 40.941 40.935 39.304 40.847 36.11 34.823 35.563 39.109 36.237 39.158 39.073 40.079 40.179 40.855 40.619 39.692 39.293 39.417 39.799 41.168 40.534 41.215 48.156 35.971 48.574 6.78223117232E8 57.971 44.971 36.193 36.197 35.222 33.353 38.619 45.67 45.905 44.475 45.599 57.021 33.129 44.713 49.828 45.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.903
Average program size in population (points): 44.843
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.342
Error (vector) diversity:			 0.499
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 1655021728
--- Timings ---
Current time: 1481135697448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_and integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 417 320 353 341 298 279 304 301 348 433 459 370 345 397 413 410 354 370 173 468 229 126 132 118 183 294 285 339 345 354 362 419 388 387 365 392 340 388 362 256 213 271 235 312 326 416 413 435 500 467 475 520 627 629 631 632 631 633 632 266 382 274 495 633 453 495 566 504 485 467 450 512 521 514 491 520 491 469 382)
Population mean number of elite cases: 31.91
Count of perfect (error zero) individuals by case: (326 417 320 353 341 298 279 304 301 348 433 459 370 345 397 413 410 354 370 173 468 229 126 132 118 183 294 285 339 345 354 362 419 388 387 365 392 340 388 362 256 213 271 235 312 326 416 413 435 500 467 475 520 627 629 631 632 631 633 632 266 382 274 495 633 453 495 566 504 485 467 450 512 521 514 491 520 491 469 382)
Population mean number of perfect (error zero) cases: 31.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2.000004115868E9
Median total errors in population: 323/2
Error averages by case: (42.141 38.502 43.385 47.378 45.691 48.439 51.133 41.229 43.086 53.055 54.58 39.605 49.924 55.936 42.22 42.208 42.705 41.683 48.158 385.114 45.221 44.767 53.159 55.596 60.086 41.044 44.072 43.161 41.927 42.269 44.873 46.182 44.396 44.344 1.000000043258E9 45.442 44.263 46.301 47.092 44.862 47.622 47.929 43.102 39.897 42.715 1.000000046186E9 41.768 45.721 42.142 46.259 43.97 46.747 45.272 45.335 43.795 42.816 44.065 43.328 44.556 43.819 56.443 43.281 47.055 40.73 55.225 54.304 45.597 50.446 39.532 51.667 56.794 56.15 57.8 53.882 62.064 65.673 46.552 63.288 54.446 49.408)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.055
Average program size in population (points): 45.043
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.356
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 1664099770
--- Timings ---
Current time: 1481135725472 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 420 352 366 373 312 294 357 314 382 454 465 389 382 411 416 359 312 360 179 470 250 143 149 102 166 306 258 305 338 348 342 399 419 417 404 398 364 409 404 278 170 285 207 354 368 442 417 453 496 477 488 524 635 637 635 637 636 638 636 261 382 290 487 623 463 507 572 522 463 488 456 489 477 496 455 541 492 460 380)
Population mean number of elite cases: 32.35
Count of perfect (error zero) individuals by case: (346 420 352 366 373 312 294 357 314 382 454 465 389 382 411 416 359 312 360 179 470 250 143 149 102 166 306 258 305 338 348 342 399 419 417 404 398 364 409 404 278 170 285 207 354 368 442 417 453 496 477 488 524 635 637 635 637 636 638 636 261 382 290 487 623 463 507 572 522 463 488 456 489 477 496 455 541 492 460 380)
Population mean number of perfect (error zero) cases: 32.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.00000409772E9
Median total errors in population: 154N
Error averages by case: (45.797 43.006 44.083 50.038 43.409 46.684 60.855 48.849 47.965 60.591 47.146 45.179 1.000000054769E9 62.63 49.046 51.189 54.059 45.468 50.256 48.441 45.898 50.443 48.843 64.178 70.832 48.962 49.45 51.223 47.701 44.788 44.329 1.000000045439E9 46.774 1.000000047934E9 45.923 50.179 48.208 53.058 47.72 47.175 51.304 54.797 47.095 47.383 43.868 48.025 45.846 50.071 45.664 47.625 48.146 48.34 47.929 50.53 50.594 50.606 52.553 52.046 53.509 53.006 54.095 40.924 49.689 1.000000048426E9 62.89 55.016 51.087 51.272 46.122 45.41 53.432 65.759 57.004 58.793 71.607 68.4 52.315 62.888 59.244 55.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.071
Average program size in population (points): 43.908
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.341
Error (vector) diversity:			 0.483
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 1673128595
--- Timings ---
Current time: 1481135752209 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 91
Lexicase best mean error: 1.1375
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 91
Zero cases best mean error: 1.1375
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (365 434 355 370 396 335 292 375 333 364 430 459 385 366 420 428 367 326 357 178 463 242 143 151 100 156 313 268 301 320 331 317 386 395 359 391 355 356 397 359 258 180 305 235 337 368 441 414 447 489 468 461 525 632 630 632 634 632 634 633 294 404 292 519 623 476 527 586 495 473 467 448 488 473 466 463 528 475 480 399)
Population mean number of elite cases: 32.17
Count of perfect (error zero) individuals by case: (365 434 355 370 396 335 292 375 333 364 430 459 385 366 420 428 367 326 357 178 463 242 143 151 100 156 313 268 301 320 331 317 386 395 359 391 355 356 397 359 258 180 305 235 337 368 441 414 447 489 468 461 525 632 630 632 634 632 634 633 294 404 292 519 623 476 527 586 495 473 467 448 488 473 466 463 528 475 480 399)
Population mean number of perfect (error zero) cases: 32.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8.7185442696E7
Median total errors in population: 154
Error averages by case: (36.17 35.99 36.97 40.015 42.221 44.869 8.7178346951E7 42.681 46.718 55.553 42.341 37.041 39.618 54.478 38.439 38.845 40.629 42.409 46.171 41.039 33.946 39.507 46.906 54.01 52.304 41.564 38.697 42.606 40.141 39.738 42.287 43.348 42.312 39.435 40.708 40.466 41.859 43.415 40.808 43.264 45.579 3676.621 46.397 39.215 38.858 43.998 41.451 41.753 39.761 41.596 44.727 43.184 43.813 43.794 44.468 43.457 46.134 44.867 45.318 45.794 42.074 38.934 38.689 35.327 49.894 51.979 41.092 43.17 36.366 42.455 47.355 54.633 48.964 52.658 61.544 69.316 43.054 55.037 45.872 47.029)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.994
Average program size in population (points): 44.801
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.354
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 1682174571
--- Timings ---
Current time: 1481135778659 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 396 339 351 355 333 280 331 301 366 425 433 351 398 397 395 362 305 329 186 465 233 139 152 127 168 282 272 288 339 343 352 418 420 372 384 376 351 413 374 253 175 283 241 362 367 450 419 440 495 460 465 506 644 643 646 646 644 646 645 277 383 278 489 587 463 528 570 518 448 466 466 490 510 475 468 484 478 456 360)
Population mean number of elite cases: 31.88
Count of perfect (error zero) individuals by case: (350 396 339 351 355 333 280 331 301 366 425 433 351 398 397 395 362 305 329 186 465 233 139 152 127 168 282 272 288 339 343 352 418 420 372 384 376 351 413 374 253 175 283 241 362 367 450 419 440 495 460 465 506 644 643 646 646 644 646 645 277 383 278 489 587 463 528 570 518 448 466 466 490 510 475 468 484 478 456 360)
Population mean number of perfect (error zero) cases: 31.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3804.273
Median total errors in population: 387/2
Error averages by case: (38.778 40.025 41.034 48.063 44.422 47.92 53.679 43.796 56.978 56.452 45.39 42.611 45.223 54.608 42.668 44.005 47.424 46.697 50.87 44.149 37.905 46.49 54.878 52.126 55.585 45.453 41.659 48.947 47.637 46.731 42.419 43.559 39.755 41.911 41.825 40.896 42.086 46.802 41.909 41.748 43.425 59.531 48.092 45.019 47.421 43.905 39.361 42.651 43.593 45.233 45.143 44.684 47.949 47.56 47.151 48.725 48.565 49.176 49.763 49.667 46.068 40.961 47.673 39.351 56.975 59.014 40.106 46.114 42.241 54.374 54.444 52.681 54.92 49.794 65.191 61.306 52.238 62.923 57.965 48.207)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.146
Average program size in population (points): 45.11
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.378
Error (vector) diversity:			 0.515
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 1691197890
--- Timings ---
Current time: 1481135809745 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 91
Lexicase best mean error: 1.1375
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 91
Zero cases best mean error: 1.1375
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 408 339 328 345 318 274 307 302 355 418 428 387 375 394 396 374 330 349 194 450 249 152 144 129 199 311 277 308 338 366 365 416 423 387 389 372 342 425 377 240 192 249 222 337 332 454 447 427 477 447 460 503 629 625 628 632 629 632 630 312 400 286 457 575 478 538 568 530 478 473 476 504 516 502 489 518 480 453 399)
Population mean number of elite cases: 32.00
Count of perfect (error zero) individuals by case: (333 408 339 328 345 318 274 307 302 355 418 428 387 375 394 396 374 330 349 194 450 249 152 144 129 199 311 277 308 338 366 365 416 423 387 389 372 342 425 377 240 192 249 222 337 332 454 447 427 477 447 460 503 629 625 628 632 629 632 630 312 400 286 457 575 478 538 568 530 478 473 476 504 516 502 489 518 480 453 399)
Population mean number of perfect (error zero) cases: 32.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.22871704013E9
Median total errors in population: 297/2
Error averages by case: (41.813 38.153 38.748 44.745 42.376 40.182 46.518 42.523 47.968 52.623 41.164 36.073 36.904 49.849 36.892 41.966 38.657 40.043 48.054 39.835 35.91 47.349 46.069 51.003 55.471 41.934 37.594 96.432 40.253 40.562 44.356 41.77 43.741 44.608 42.768 41.564 41.964 47.117 42.384 42.562 40.526 49.617 2.28713327132E8 38.509 42.66 45.23 41.243 41.639 1.000000041389E9 41.053 42.725 43.396 42.996 45.12 45.395 45.849 45.56 46.321 46.799 47.308 40.058 39.934 40.692 42.416 57.809 52.255 43.785 51.623 130.919 40.189 51.331 47.572 50.124 47.696 56.591 54.123 105.512 58.805 52.164 45.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.089
Average program size in population (points): 45.019
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.351
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 1700323442
--- Timings ---
Current time: 1481135836082 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 237
Lexicase best mean error: 2.9625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 237
Zero cases best mean error: 2.9625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 378 355 330 336 331 315 351 292 368 425 444 376 371 359 381 351 302 340 187 439 205 121 151 117 179 336 276 292 349 346 377 413 426 374 387 382 373 424 370 233 188 281 240 339 384 492 439 438 494 484 484 548 655 655 657 658 658 658 657 294 363 299 473 619 470 550 570 552 468 476 448 484 496 496 456 503 471 439 383)
Population mean number of elite cases: 32.22
Count of perfect (error zero) individuals by case: (334 378 355 330 336 331 315 351 292 368 425 444 376 371 359 381 351 302 340 187 439 205 121 151 117 179 336 276 292 349 346 377 413 426 374 387 382 373 424 370 233 188 281 240 339 384 492 439 438 494 484 484 548 655 655 657 658 658 658 657 294 363 299 473 619 470 550 570 552 468 476 448 484 496 496 456 503 471 439 383)
Population mean number of perfect (error zero) cases: 32.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4214.8
Median total errors in population: 303/2
Error averages by case: (49.846 44.155 42.018 54.117 55.556 51.006 53.455 54.136 54.084 54.717 50.197 47.057 47.346 64.222 45.485 48.606 47.486 45.186 57.683 46.001 43.98 47.619 56.944 59.974 58.936 50.0 48.068 47.794 44.662 46.858 48.021 47.019 49.148 51.047 48.702 51.184 50.955 54.039 52.893 50.901 51.478 61.583 54.075 43.908 43.722 53.391 48.251 52.604 50.457 53.043 52.505 52.737 52.536 51.498 52.007 52.511 52.021 52.805 54.04 54.561 61.106 48.985 45.638 44.481 64.905 65.035 50.122 56.283 50.096 56.258 66.488 51.605 63.77 58.829 62.558 71.551 52.39 65.991 59.288 58.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.617
Average program size in population (points): 44.576
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.334
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 1709369032
--- Timings ---
Current time: 1481135862685 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 406 353 333 345 320 295 352 284 360 417 423 365 370 395 415 354 283 340 183 440 237 142 153 126 186 309 264 295 325 369 372 394 400 360 381 344 346 380 370 268 214 294 256 363 349 498 453 447 502 494 494 556 656 657 658 660 658 660 658 297 376 276 487 610 479 519 574 528 473 468 443 489 508 502 478 544 508 475 387)
Population mean number of elite cases: 32.36
Count of perfect (error zero) individuals by case: (355 406 353 333 345 320 295 352 284 360 417 423 365 370 395 415 354 283 340 183 440 237 142 153 126 186 309 264 295 325 369 372 394 400 360 381 344 346 380 370 268 214 294 256 363 349 498 453 447 502 494 494 556 656 657 658 660 658 660 658 297 376 276 487 610 479 519 574 528 473 468 443 489 508 502 478 544 508 475 387)
Population mean number of perfect (error zero) cases: 32.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000003603468E9
Median total errors in population: 307/2
Error averages by case: (39.825 44.041 36.111 44.129 38.346 1.000000038302E9 47.53 44.573 47.415 51.629 46.231 38.193 40.656 55.648 41.775 42.836 41.274 40.718 49.395 40.449 34.97 40.711 45.831 49.12 55.747 44.118 39.534 41.869 39.622 38.999 41.295 39.15 43.202 43.065 42.753 42.661 45.102 45.329 40.753 43.894 44.328 52.681 44.106 39.664 37.262 41.388 39.32 42.572 42.681 42.215 46.326 45.361 48.758 47.118 46.6 47.073 47.8 48.305 48.072 48.592 42.156 40.965 38.728 44.415 61.944 53.984 43.188 44.215 36.2 41.272 52.545 44.623 48.107 47.787 63.494 61.695 45.526 62.856 52.131 50.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.863
Average program size in population (points): 44.77
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.356
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 1718551304
--- Timings ---
Current time: 1481135890977 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (integer_yankdup boolean_invert_first_then_and boolean_not integer_mult boolean_invert_second_then_and integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (integer_yankdup boolean_invert_first_then_and boolean_not integer_mult boolean_invert_second_then_and integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (integer_yankdup boolean_invert_first_then_and boolean_not integer_mult boolean_invert_second_then_and integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (integer_yankdup boolean_invert_first_then_and boolean_not integer_mult boolean_invert_second_then_and integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 411 381 356 347 349 306 330 297 377 406 430 381 369 361 374 323 277 325 169 442 216 141 151 128 202 324 282 304 348 380 386 428 420 396 379 382 369 429 391 254 187 301 228 342 363 470 428 422 467 468 449 533 627 629 632 636 632 635 632 298 357 288 477 606 454 505 543 522 432 428 421 467 488 501 470 526 476 459 369)
Population mean number of elite cases: 31.84
Count of perfect (error zero) individuals by case: (356 411 381 356 347 349 306 330 297 377 406 430 381 369 361 374 323 277 325 169 442 216 141 151 128 202 324 282 304 348 380 386 428 420 396 379 382 369 429 391 254 187 301 228 342 363 470 428 422 467 468 449 533 627 629 632 636 632 635 632 298 357 288 477 606 454 505 543 522 432 428 421 467 488 501 470 526 476 459 369)
Population mean number of perfect (error zero) cases: 31.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4546.648
Median total errors in population: 349/2
Error averages by case: (55.766 49.079 51.952 53.908 44.414 51.906 54.504 54.592 59.017 61.472 57.321 48.217 55.054 65.479 51.732 54.344 51.741 52.823 59.204 53.171 48.897 49.513 57.987 62.909 59.745 55.041 50.928 52.457 52.014 53.943 54.374 52.837 52.946 55.358 53.773 55.183 56.055 59.429 56.988 55.088 54.336 65.691 50.931 54.927 52.778 55.517 51.916 58.2 55.673 56.286 57.761 59.584 57.049 56.721 57.147 57.11 57.503 57.927 57.877 58.328 66.067 51.006 51.716 57.258 67.824 71.922 54.071 58.115 50.016 50.234 62.505 60.514 79.505 61.645 67.4 72.697 62.001 70.809 62.061 54.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.367
Average program size in population (points): 44.164
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.352
Error (vector) diversity:			 0.491
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 1727595728
--- Timings ---
Current time: 1481135922589 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 403 368 353 336 338 316 336 296 371 433 454 387 367 396 396 339 311 347 192 419 201 133 148 130 177 291 275 298 327 362 342 404 423 373 356 364 357 389 381 245 223 263 234 323 364 472 423 446 465 457 463 538 606 610 616 613 615 614 614 288 365 295 464 574 431 505 517 505 460 445 426 473 472 501 467 495 452 421 364)
Population mean number of elite cases: 31.34
Count of perfect (error zero) individuals by case: (329 403 368 353 336 338 316 336 296 371 433 454 387 367 396 396 339 311 347 192 419 201 133 148 130 177 291 275 298 327 362 342 404 423 373 356 364 357 389 381 245 223 263 234 323 364 472 423 446 465 457 463 538 606 610 616 613 615 614 614 288 365 295 464 574 431 505 517 505 460 445 426 473 472 501 467 495 452 421 364)
Population mean number of perfect (error zero) cases: 31.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 427992.584
Median total errors in population: 177
Error averages by case: (52.828 58.258 56.183 50.002 38.676 48.881 51.586 50.089 51.202 60.496 45.297 45.227 46.719 63.044 47.37 49.041 49.316 44.234 47.245 46.847 40.964 43.498 49.004 48.082 57.51 54.163 48.803 47.871 46.744 48.503 44.951 47.541 48.537 43.649 46.821 44.65 45.684 48.492 47.197 424033.638 44.317 49.628 48.862 47.657 43.653 46.601 43.444 45.972 47.167 46.73 47.968 45.415 47.901 50.184 50.635 51.846 52.306 50.762 51.21 51.665 54.143 48.992 49.658 62.537 71.2 69.074 45.179 47.342 43.239 37.433 51.568 55.575 58.981 53.76 62.655 62.501 47.182 59.966 55.191 53.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.595
Average program size in population (points): 44.341
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.378
Error (vector) diversity:			 0.527
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 1736689984
--- Timings ---
Current time: 1481135950909 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 386 397 354 358 345 310 337 303 360 416 443 383 392 355 388 352 300 342 175 442 198 140 151 131 183 321 302 305 354 347 349 430 440 384 395 369 354 408 382 251 201 284 218 347 350 460 393 408 449 441 446 519 605 611 617 614 615 615 615 303 351 305 436 589 442 485 525 490 448 440 431 458 461 479 469 504 480 435 355)
Population mean number of elite cases: 31.33
Count of perfect (error zero) individuals by case: (302 386 397 354 358 345 310 337 303 360 416 443 383 392 355 388 352 300 342 175 442 198 140 151 131 183 321 302 305 354 347 349 430 440 384 395 369 354 408 382 251 201 284 218 347 350 460 393 408 449 441 446 519 605 611 617 614 615 615 615 303 351 305 436 589 442 485 525 490 448 440 431 458 461 479 469 504 480 435 355)
Population mean number of perfect (error zero) cases: 31.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4456.81
Median total errors in population: 150
Error averages by case: (51.823 49.148 48.963 55.059 49.455 56.858 56.46 52.769 60.057 61.48 51.996 50.582 52.406 62.812 58.395 54.837 58.323 54.74 61.067 56.242 43.089 49.544 62.811 56.909 61.593 53.041 56.125 58.084 54.116 56.599 53.568 52.286 52.033 52.678 55.135 51.847 52.476 52.836 54.048 51.72 51.312 59.904 52.0 54.97 58.325 54.503 50.95 53.844 53.769 52.004 55.21 52.297 56.792 53.224 57.311 55.827 56.36 56.893 57.686 57.942 55.069 50.964 54.67 51.53 72.922 61.992 55.077 47.309 52.287 48.286 62.514 59.525 56.235 64.825 68.748 68.532 54.195 61.96 65.429 59.608)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.231
Average program size in population (points): 44.058
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.361
Error (vector) diversity:			 0.488
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 1745707265
--- Timings ---
Current time: 1481135982622 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 91
Lexicase best mean error: 1.1375
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap integer_yank boolean_yankdup boolean_stackdepth boolean_stackdepth boolean_yankdup exec_if () (integer_fromboolean) exec_yank integer_min exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 0 2 1 0 1 0 2 2 2 2 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 3 2 2 1 0 2 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 91
Zero cases best mean error: 1.1375
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 408 399 341 354 331 330 333 307 372 421 443 376 393 385 398 345 276 336 173 434 210 145 153 133 199 324 281 317 347 385 385 439 447 411 385 392 382 425 400 247 184 267 206 332 362 457 413 420 470 436 451 501 604 605 613 609 610 609 609 320 392 309 461 588 468 549 553 535 465 481 431 478 479 509 487 514 490 444 387)
Population mean number of elite cases: 31.98
Count of perfect (error zero) individuals by case: (318 408 399 341 354 331 330 333 307 372 421 443 376 393 385 398 345 276 336 173 434 210 145 153 133 199 324 281 317 347 385 385 439 447 411 385 392 382 425 400 247 184 267 206 332 362 457 413 420 470 436 451 501 604 605 613 609 610 609 609 320 392 309 461 588 468 549 553 535 465 481 431 478 479 509 487 514 490 444 387)
Population mean number of perfect (error zero) cases: 31.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 10523.497
Median total errors in population: 157
Error averages by case: (33.842 32.097 33.064 35.144 38.903 45.143 50.591 31.022 40.557 38.863 34.466 32.593 35.08 51.836 35.245 66.1 70.199 71.201 82.489 81.421 30.974 38.493 50.941 47.336 42.165 34.672 37.935 60.237 72.317 79.548 95.776 100.273 120.718 128.944 147.337 157.73 180.184 195.502 217.355 229.429 40.619 43.806 41.072 70.399 85.044 110.108 135.962 173.209 203.309 244.61 286.174 334.136 385.748 441.319 500.899 564.318 632.312 703.889 778.493 858.468 42.083 31.951 33.676 35.456 52.004 50.024 37.988 40.251 38.492 36.525 51.483 41.642 52.26 46.114 55.69 50.307 44.503 56.149 43.547 41.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.173
Average program size in population (points): 43.906
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.355
Error (vector) diversity:			 0.496
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 1754842352
--- Timings ---
Current time: 1481136009346 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 237
Lexicase best mean error: 2.9625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 237
Zero cases best mean error: 2.9625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 371 365 342 376 345 321 336 330 381 425 425 398 387 417 393 359 305 332 190 449 203 128 125 133 193 302 283 321 348 376 372 419 421 394 365 384 319 405 385 250 199 272 218 319 351 444 392 423 455 439 452 502 621 623 633 628 628 627 628 308 350 319 523 618 482 529 570 549 471 475 432 488 492 507 487 531 487 450 413)
Population mean number of elite cases: 32.06
Count of perfect (error zero) individuals by case: (348 371 365 342 376 345 321 336 330 381 425 425 398 387 417 393 359 305 332 190 449 203 128 125 133 193 302 283 321 348 376 372 419 421 394 365 384 319 405 385 250 199 272 218 319 351 444 392 423 455 439 452 502 621 623 633 628 628 627 628 308 350 319 523 618 482 529 570 549 471 475 432 488 492 507 487 531 487 450 413)
Population mean number of perfect (error zero) cases: 32.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3617.799
Median total errors in population: 159
Error averages by case: (37.775 36.169 39.903 42.097 37.275 45.043 47.578 39.56 42.942 46.854 37.993 37.037 39.018 54.469 38.076 37.566 41.845 38.107 50.073 42.051 33.944 39.437 53.727 44.133 47.546 37.735 45.186 36.262 39.466 38.644 39.802 39.195 42.523 45.702 43.066 47.881 45.731 48.31 47.229 48.525 45.344 48.563 38.014 39.19 39.351 46.239 45.476 47.136 46.113 47.978 48.103 47.895 48.289 47.341 47.753 49.143 49.826 50.527 50.698 51.132 51.037 44.003 34.565 36.247 63.919 61.899 47.936 44.058 47.043 40.26 58.246 44.517 48.788 53.582 68.337 51.477 40.842 57.621 51.941 41.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.888
Average program size in population (points): 44.998
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.365
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 1763883759
--- Timings ---
Current time: 1481136036258 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 375 377 349 353 346 322 352 304 366 414 433 382 378 406 419 366 292 335 175 443 209 150 151 136 210 302 288 308 351 400 369 424 438 380 402 375 338 385 403 233 192 260 226 321 343 470 439 431 459 470 483 528 633 639 646 644 643 644 644 323 359 314 520 619 479 555 575 548 475 470 440 484 490 507 492 530 496 476 414)
Population mean number of elite cases: 32.44
Count of perfect (error zero) individuals by case: (318 375 377 349 353 346 322 352 304 366 414 433 382 378 406 419 366 292 335 175 443 209 150 151 136 210 302 288 308 351 400 369 424 438 380 402 375 338 385 403 233 192 260 226 321 343 470 439 431 459 470 483 528 633 639 646 644 643 644 644 323 359 314 520 619 479 555 575 548 475 470 440 484 490 507 492 530 496 476 414)
Population mean number of perfect (error zero) cases: 32.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4335.608
Median total errors in population: 141
Error averages by case: (51.799 53.087 44.952 50.927 48.345 53.074 57.389 50.617 58.785 56.14 48.195 47.032 46.744 70.12 48.263 47.124 46.78 49.213 56.263 49.191 43.965 47.505 61.668 65.953 62.359 49.841 50.495 47.553 45.718 47.682 49.584 48.581 53.603 51.623 51.99 51.041 53.649 55.814 54.128 58.597 52.328 57.5 55.851 48.122 47.903 53.392 50.352 53.235 58.815 56.001 53.074 52.429 56.646 54.278 53.665 54.059 54.723 55.417 55.563 55.99 52.083 47.953 47.593 44.299 62.943 65.871 46.867 56.922 55.934 49.056 72.226 51.424 63.034 61.385 79.369 66.182 50.949 71.619 68.782 56.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.608
Average program size in population (points): 44.577
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.337
Error (vector) diversity:			 0.476
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 1772988929
--- Timings ---
Current time: 1481136064560 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 401 389 340 356 303 304 339 280 365 384 416 396 367 382 366 341 245 297 194 436 198 139 156 117 194 323 283 318 328 371 356 398 428 375 364 374 345 408 374 238 209 277 242 318 368 467 446 452 459 437 452 485 604 607 609 608 608 608 608 349 385 322 500 598 449 528 553 523 452 482 453 493 514 511 476 518 485 432 389)
Population mean number of elite cases: 31.58
Count of perfect (error zero) individuals by case: (312 401 389 340 356 303 304 339 280 365 384 416 396 367 382 366 341 245 297 194 436 198 139 156 117 194 323 283 318 328 371 356 398 428 375 364 374 345 408 374 238 209 277 242 318 368 467 446 452 459 437 452 485 604 607 609 608 608 608 608 349 385 322 500 598 449 528 553 523 452 482 453 493 514 511 476 518 485 432 389)
Population mean number of perfect (error zero) cases: 31.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.001057275848E9
Median total errors in population: 156
Error averages by case: (42.834 42.033 41.948 48.061 37.353 45.033 49.584 45.711 50.955 49.6 47.225 42.966 41.261 56.366 43.87 37.797 40.781 40.167 48.396 40.058 38.97 40.557 50.95 47.925 54.838 42.045 46.861 40.685 41.645 39.086 37997.605 38.936 40.406 42.802 42.561 42.882 41.543 48.578 44.847 43.11 576.688 47.608 49.056 42.104 39.133 44.598 41.103 44.216 43.492 46.212 45.84 1015168.752 47.377 46.45 46.936 47.657 48.172 48.692 49.193 49.712 40.065 34.968 40.577 40.386 64.938 72.961 39.077 42.142 46.213 1.000000039247E9 52.441 49.558 55.042 48.539 61.631 55.452 43.31 54.805 56.089 46.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.485
Average program size in population (points): 44.482
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.351
Error (vector) diversity:			 0.492
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 1781957497
--- Timings ---
Current time: 1481136095933 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 237
Lexicase best mean error: 2.9625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_flush integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 2 2 1 68 3 0 2 2 2 2 1 1 1 0 0 1 0 0 0 0 1 0 121 0 0 3 2 3 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 237
Zero cases best mean error: 2.9625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 401 365 332 359 348 288 340 291 347 433 445 356 348 383 362 353 267 315 172 458 218 161 156 143 193 293 266 314 347 354 345 415 429 368 363 370 363 419 395 260 192 272 245 295 354 461 427 446 457 445 454 493 618 623 624 624 624 624 624 320 354 312 487 583 439 516 553 498 435 455 415 467 487 501 481 534 477 455 377)
Population mean number of elite cases: 31.53
Count of perfect (error zero) individuals by case: (344 401 365 332 359 348 288 340 291 347 433 445 356 348 383 362 353 267 315 172 458 218 161 156 143 193 293 266 314 347 354 345 415 429 368 363 370 363 419 395 260 192 272 245 295 354 461 427 446 457 445 454 493 618 623 624 624 624 624 624 320 354 312 487 583 439 516 553 498 435 455 415 467 487 501 481 534 477 455 377)
Population mean number of perfect (error zero) cases: 31.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4101.065
Median total errors in population: 155
Error averages by case: (45.815 39.117 42.071 45.202 48.412 46.968 52.609 53.037 52.15 55.266 43.993 48.237 42.899 60.661 43.05 48.737 46.846 46.768 54.097 47.08 39.951 35.577 59.935 62.039 54.645 43.386 52.542 44.241 46.571 48.601 47.43 48.228 48.4 50.536 49.285 48.447 51.518 54.561 50.702 49.728 56.401 57.884 55.191 45.813 44.344 47.359 48.228 48.856 49.887 50.542 51.493 50.528 53.968 55.35 56.905 57.468 58.29 58.882 59.46 60.052 44.086 44.026 41.65 44.464 73.035 66.057 45.137 51.247 43.371 45.539 57.536 52.716 53.081 52.744 78.587 64.247 44.17 60.933 66.012 56.188)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.898
Average program size in population (points): 44.835
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.385
Error (vector) diversity:			 0.534
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 1791031487
--- Timings ---
Current time: 1481136122705 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 387 364 330 363 321 308 343 272 341 425 449 409 368 394 375 352 287 306 213 464 203 140 143 133 170 314 280 338 358 362 392 420 423 375 373 383 342 408 404 264 191 304 242 315 359 451 426 441 472 459 478 506 638 641 643 644 645 645 645 323 359 347 517 596 456 534 530 539 445 467 432 476 516 513 477 536 485 470 399)
Population mean number of elite cases: 32.16
Count of perfect (error zero) individuals by case: (306 387 364 330 363 321 308 343 272 341 425 449 409 368 394 375 352 287 306 213 464 203 140 143 133 170 314 280 338 358 362 392 420 423 375 373 383 342 408 404 264 191 304 242 315 359 451 426 441 472 459 478 506 638 641 643 644 645 645 645 323 359 347 517 596 456 534 530 539 445 467 432 476 516 513 477 536 485 470 399)
Population mean number of perfect (error zero) cases: 32.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 113809.55
Median total errors in population: 157
Error averages by case: (42.807 39.077 40.892 46.125 42.294 39.07 47.616 52.729 48.93 61.024 45.016 48.195 41.335 50.816 45.816 42.779 43.16 45.409 49.967 45.945 39.939 39.425 59.049 59.012 59.675 43.654 44.962 44.958 42.462 45.621 44.363 43.036 44.566 47.373 47.137 48.983 46.432 49.752 46.497 44.782 47.282 51.686 45.084 42.602 44.176 47.229 44.144 109948.745 46.039 48.159 47.667 47.885 51.631 48.971 48.219 50.126 49.609 50.094 50.845 51.349 50.07 45.944 43.508 45.365 65.994 64.073 46.926 48.3 42.05 44.461 56.445 52.626 59.904 61.491 72.614 66.452 45.938 62.901 58.055 54.211)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.317
Average program size in population (points): 44.485
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.379
Error (vector) diversity:			 0.513
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 1800078880
--- Timings ---
Current time: 1481136149538 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop exec_yank boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 387 379 356 363 344 310 372 309 384 443 450 410 361 382 378 386 304 350 157 427 207 157 166 162 187 322 271 324 363 372 379 414 418 390 403 378 356 422 382 243 180 288 254 292 368 464 435 444 469 481 494 531 669 671 671 672 672 672 672 320 361 322 491 568 464 546 547 538 437 438 406 459 500 490 459 520 481 457 352)
Population mean number of elite cases: 32.44
Count of perfect (error zero) individuals by case: (320 387 379 356 363 344 310 372 309 384 443 450 410 361 382 378 386 304 350 157 427 207 157 166 162 187 322 271 324 363 372 379 414 418 390 403 378 356 422 382 243 180 288 254 292 368 464 435 444 469 481 494 531 669 671 671 672 672 672 672 320 361 322 491 568 464 546 547 538 437 438 406 459 500 490 459 520 481 457 352)
Population mean number of perfect (error zero) cases: 32.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4054.127
Median total errors in population: 297/2
Error averages by case: (42.804 48.089 44.951 49.15 43.408 46.031 53.795 48.582 51.365 53.138 47.947 48.138 50.237 56.725 48.801 51.829 50.102 49.424 50.989 49.706 40.984 41.453 56.094 63.992 58.521 45.302 48.341 50.5 49.569 47.861 48.06 47.006 47.275 48.02 46.863 48.45 46.495 50.795 49.943 51.108 47.65 50.506 52.626 49.374 50.11 50.411 46.649 48.837 50.813 51.924 49.709 49.364 57.31 51.363 53.002 53.902 55.363 55.837 56.293 57.062 49.033 46.978 43.514 42.4 70.035 52.998 44.954 46.173 41.151 44.645 54.764 52.789 54.451 49.511 69.542 59.236 45.841 54.599 63.607 57.958)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.507
Average program size in population (points): 44.578
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.356
Error (vector) diversity:			 0.498
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 1809192040
--- Timings ---
Current time: 1481136176534 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 358 337 325 346 303 304 360 283 388 431 454 378 365 406 396 383 300 341 179 421 214 153 140 130 173 316 283 302 329 391 384 426 435 390 392 412 357 423 407 263 191 270 250 316 332 426 401 418 455 446 450 490 611 611 612 612 612 612 612 317 370 304 482 576 476 528 564 557 449 448 437 466 489 496 483 539 494 462 361)
Population mean number of elite cases: 31.71
Count of perfect (error zero) individuals by case: (304 358 337 325 346 303 304 360 283 388 431 454 378 365 406 396 383 300 341 179 421 214 153 140 130 173 316 283 302 329 391 384 426 435 390 392 412 357 423 407 263 191 270 250 316 332 426 401 418 455 446 450 490 611 611 612 612 612 612 612 317 370 304 482 576 476 528 564 557 449 448 437 466 489 496 483 539 494 462 361)
Population mean number of perfect (error zero) cases: 31.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_yank integer_gte boolean_pop boolean_pop integer_min exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_yankdup boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.5470392471E7
Median total errors in population: 335/2
Error averages by case: (52.828 49.101 50.108 65.158 41.44 51.177 47.488 45.474 44.816 50.146 48.383 42.821 50.685 53.283 49.613 45.781 49.139 44.908 378.574 49.774 41.929 41.666 65.82 55.791 67.244 42.633 45.52 46.057 45.776 48.328 44.813 663.45 46.756 49.836 47.264 1568.905 244190.285 53.398 68.478 6.4097389057E7 47.503 48.582 4150.396 51.552 466.385 65662.436 56.416 62.521 2507.738 50.001 50.918 1049808.854 90.249 52.758 52.43 53.358 53.855 54.357 54.845 55.347 52.061 48.945 41.626 45.476 75.979 55.19 43.145 43.214 40.038 44.728 57.379 52.19 53.53 50.572 65.496 57.058 42.598 55.819 48.169 55.054)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.556
Average program size in population (points): 44.653
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.363
Error (vector) diversity:			 0.516
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 1818122222
--- Timings ---
Current time: 1481136207528 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 382 360 343 353 325 309 344 297 374 444 466 363 351 400 401 392 303 362 184 428 205 144 147 134 172 328 263 307 312 383 336 412 443 373 396 392 361 427 396 213 191 277 241 299 392 447 417 411 463 475 470 527 641 644 648 648 648 648 648 331 408 327 508 601 474 530 542 536 473 440 471 509 536 511 524 553 516 481 395)
Population mean number of elite cases: 32.48
Count of perfect (error zero) individuals by case: (355 382 360 343 353 325 309 344 297 374 444 466 363 351 400 401 392 303 362 184 428 205 144 147 134 172 328 263 307 312 383 336 412 443 373 396 392 361 427 396 213 191 277 241 299 392 447 417 411 463 475 470 527 641 644 648 648 648 648 648 331 408 327 508 601 474 530 542 536 473 440 471 509 536 511 524 553 516 481 395)
Population mean number of perfect (error zero) cases: 32.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 54525.159
Median total errors in population: 159
Error averages by case: (50.798 50.049 46.928 60.043 53.794 49.844 55.464 47.616 50.821 51.146 44.223 48.232 47.702 56.947 47.905 48.093 48.025 49.428 52.829 51.039 42.02 44.518 59.761 64.9 63.594 45.783 50.459 50.474 52.548 49.45 47.062 47.779 47.886 51.447 49.857 51.183 52.012 53.866 51.084 51.792 57.647 47.504 51.628 51.935 47.877 49.142 50.05 50.114 50.326 52.336 50.614 53.079 57.032 55.154 54.772 54.942 55.35 55.763 56.16 56.573 53.057 43.872 44.509 46.577 61.966 58.924 45.987 59.179 50376.629 49.307 67.517 55.433 58.811 50.54 70.211 68.917 45.789 60.573 62.818 48.144)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.947
Average program size in population (points): 45.094
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.361
Error (vector) diversity:			 0.495
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 1827230017
--- Timings ---
Current time: 1481136235415 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 201
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 201
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 347 347 337 369 335 297 334 297 370 416 480 362 356 398 379 378 289 332 208 416 188 145 152 152 181 332 284 306 319 382 342 392 427 379 382 395 357 421 382 227 191 287 263 317 371 436 401 418 465 456 461 485 623 624 626 625 626 625 626 311 376 339 512 594 476 514 513 525 441 432 438 485 508 489 499 522 496 477 387)
Population mean number of elite cases: 31.78
Count of perfect (error zero) individuals by case: (331 347 347 337 369 335 297 334 297 370 416 480 362 356 398 379 378 289 332 208 416 188 145 152 152 181 332 284 306 319 382 342 392 427 379 382 395 357 421 382 227 191 287 263 317 371 436 401 418 465 456 461 485 623 624 626 625 626 625 626 311 376 339 512 594 476 514 513 525 441 432 438 485 508 489 499 522 496 477 387)
Population mean number of perfect (error zero) cases: 31.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4163.046
Median total errors in population: 178
Error averages by case: (50.771 49.098 49.981 55.163 46.389 48.392 60.616 52.852 51.801 57.256 51.042 49.892 51.094 58.238 50.031 49.973 52.612 45.33 53.853 44.686 43.987 43.493 52.974 64.096 59.501 53.561 50.359 49.139 51.692 46.369 51.204 45.817 47.887 47.178 45.502 49.613 48.377 49.113 49.351 48.231 56.566 51.696 49.033 50.754 52.512 50.051 44.997 46.63 46.981 50.033 48.047 49.11 51.667 49.974 49.417 51.56 50.812 51.295 52.052 52.55 57.025 55.886 44.425 44.483 80.895 59.987 47.006 58.23 46.03 44.419 65.565 53.727 58.957 50.774 70.443 60.883 49.172 64.807 64.228 53.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.902
Average program size in population (points): 45.215
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.358
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 202000
Number of point (instruction) evaluations so far: 1836173067
--- Timings ---
Current time: 1481136266743 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 201
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 202
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 202
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 358 366 358 403 350 316 348 305 361 431 457 355 368 402 399 393 305 349 183 406 208 159 160 143 141 311 265 295 311 374 348 398 429 396 399 403 365 434 398 228 216 285 252 336 363 438 397 421 470 472 463 493 623 623 625 624 625 624 625 315 368 327 488 573 469 494 539 505 451 428 452 475 517 500 503 543 511 494 367)
Population mean number of elite cases: 32.02
Count of perfect (error zero) individuals by case: (345 358 366 358 403 350 316 348 305 361 431 457 355 368 402 399 393 305 349 183 406 208 159 160 143 141 311 265 295 311 374 348 398 429 396 399 403 365 434 398 228 216 285 252 336 363 438 397 421 470 472 463 493 623 623 625 624 625 624 625 315 368 327 488 573 469 494 539 505 451 428 452 475 517 500 503 543 511 494 367)
Population mean number of perfect (error zero) cases: 32.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3254.331
Median total errors in population: 333/2
Error averages by case: (46.998 39.33 40.011 49.148 33.14 37.943 47.883 41.617 34.609 41.726 43.49 38.709 37.41 41.36 35.32 37.842 37.044 36.939 41.432 36.632 38.081 36.479 42.057 56.442 50.76 41.111 35.184 35.423 40.12 37.645 38.205 38.712 33.967 35.838 34.965 38.44 34.776 36.624 38.067 35.597 42.576 35.544 37.222 38.313 36.026 34.047 32.486 35.128 34.624 39.181 39.875 33.586 39.903 40.442 40.938 41.656 41.925 42.424 43.194 43.708 51.077 40.995 37.532 36.524 71.998 47.965 38.041 38.092 34.115 31.562 46.775 41.727 52.998 43.79 59.514 52.2 36.131 51.035 54.245 38.141)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.042
Average program size in population (points): 45.247
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.39
Error (vector) diversity:			 0.522
--- Run Statistics ---
Number of program evaluations used so far: 203000
Number of point (instruction) evaluations so far: 1845260687
--- Timings ---
Current time: 1481136298377 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 202
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 203
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 203
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Lexicase best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 58
Lexicase best mean error: 0.725
Lexicase best size: 44
Percent parens: 0.159
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction 3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best partial simplification: (boolean_pop boolean_shove boolean_dup_times integer_dec boolean_dup_times integer_dup boolean_stackdepth integer_min integer_shove integer_dup boolean_not 3 boolean_stackdepth exec_do*range (in1 in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_invert_second_then_and integer_eq exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_pop exec_k (boolean_xor boolean_stackdepth) ()))
Zero cases best errors: [0 5 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 2 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 12 3 3 2 2 2 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 58
Zero cases best mean error: 0.725
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 360 349 305 369 340 305 363 260 359 404 418 350 354 391 381 340 291 316 173 418 186 148 169 144 171 330 272 301 314 384 345 389 401 372 380 389 359 424 391 231 191 283 246 347 384 430 418 438 478 468 471 527 644 643 645 644 645 644 645 336 379 316 480 580 472 517 533 537 462 445 432 453 490 502 507 525 485 471 370)
Population mean number of elite cases: 31.78
Count of perfect (error zero) individuals by case: (356 360 349 305 369 340 305 363 260 359 404 418 350 354 391 381 340 291 316 173 418 186 148 169 144 171 330 272 301 314 384 345 389 401 372 380 389 359 424 391 231 191 283 246 347 384 430 418 438 478 468 471 527 644 643 645 644 645 644 645 336 379 316 480 580 472 517 533 537 462 445 432 453 490 502 507 525 485 471 370)
Population mean number of perfect (error zero) cases: 31.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2.005036848905E9
Median total errors in population: 183
Error averages by case: (57.923 45.119 51.308 50.16 43091.974 47.891 55.694 50.688 55.144 53.703 56.259 53.454 45.839 57.405 49.277 49.843 48.73 1.000000047889E9 56.911 49.356 42.955 48.735 59.914 57.327 58.462 56.91 1995888.261 48.597 53.119 51.67 51.56 50.277 50.026 51.593 46.839 51.327 49.243 50.907 53.227 50.573 50.623 47.585 52.842 49.458 2993809.072 47.935 46.748 48.246 51.147 51.625 51.825 50.94 53.724 51.22 52.57 52.378 53.757 53.399 53.789 54.179 55.052 47.959 46.585 45.503 78.968 69.022 45.028 53.153 1.000000047042E9 49.382 55.869 53.535 58.07 59.827 63.499 59.387 49.157 66.964 63.191 52.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.649
Average program size in population (points): 44.803
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.378
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 204000
Number of point (instruction) evaluations so far: 1854310288
--- Timings ---
Current time: 1481136329987 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 203
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 204
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 204
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_and integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_yankdup 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 354 338 322 353 351 287 318 256 359 430 471 336 376 412 381 387 320 326 197 423 208 150 147 151 173 310 271 297 302 379 366 410 435 391 413 396 361 425 391 243 171 289 229 342 339 406 401 415 456 455 440 493 615 615 619 618 619 619 619 343 401 338 522 597 485 533 561 551 457 443 455 473 536 544 545 558 512 502 401)
Population mean number of elite cases: 32.06
Count of perfect (error zero) individuals by case: (332 354 338 322 353 351 287 318 256 359 430 471 336 376 412 381 387 320 326 197 423 208 150 147 151 173 310 271 297 302 379 366 410 435 391 413 396 361 425 391 243 171 289 229 342 339 406 401 415 456 455 440 493 615 615 619 618 619 619 619 343 401 338 522 597 485 533 561 551 457 443 455 473 536 544 545 558 512 502 401)
Population mean number of perfect (error zero) cases: 32.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3555.008
Median total errors in population: 159
Error averages by case: (46.814 37.096 46.971 50.01 35.267 42.96 50.625 45.728 44.215 41.522 48.324 50.177 39.37 46.135 40.406 38.763 42.671 43.224 43.103 40.264 35.99 36.539 48.881 49.112 48.843 44.901 38.267 40.782 40.749 43.253 45.418 41.717 39.189 42.272 39.808 42.258 41.902 43.722 41.502 42.652 45.544 38.947 40.493 44.587 42.094 39.22 38.111 41.826 41.404 43.839 42.987 42.956 45.175 41.404 42.974 42.531 44.105 43.683 44.245 44.823 43.045 40.01 38.519 39.427 74.065 56.923 38.954 41.1 33.974 40.42 110.814 50.614 48.949 45.508 53.518 52.201 36.965 50.088 49.361 38.203)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.934
Average program size in population (points): 45.16
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.37
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 205000
Number of point (instruction) evaluations so far: 1863343823
--- Timings ---
Current time: 1481136358315 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 204
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 205
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 205
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 384 371 346 386 338 322 362 316 397 449 482 377 360 372 390 379 332 355 182 419 214 154 182 139 171 327 302 324 344 401 350 409 422 391 426 384 375 443 402 244 178 282 230 333 355 419 392 414 458 477 445 509 628 628 632 633 632 633 632 320 370 334 499 598 463 500 546 532 440 432 449 463 484 484 480 549 487 460 358)
Population mean number of elite cases: 32.24
Count of perfect (error zero) individuals by case: (360 384 371 346 386 338 322 362 316 397 449 482 377 360 372 390 379 332 355 182 419 214 154 182 139 171 327 302 324 344 401 350 409 422 391 426 384 375 443 402 244 178 282 230 333 355 419 392 414 458 477 445 509 628 628 632 633 632 633 632 320 370 334 499 598 463 500 546 532 440 432 449 463 484 484 480 549 487 460 358)
Population mean number of perfect (error zero) cases: 32.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3763.089
Median total errors in population: 313/2
Error averages by case: (42.743 38.094 39.875 46.016 39.2 47.806 43.461 39.526 50.887 49.163 44.342 45.135 42.355 52.536 43.271 42.642 45.199 45.203 49.546 43.621 37.001 41.478 55.901 57.779 61.568 42.241 41.919 41.918 44.301 46.308 47.331 45.546 41.891 43.554 42.613 44.879 44.342 47.416 46.554 44.302 52.408 45.627 45.038 46.656 44.518 47.584 42.43 43.613 43.921 46.988 45.351 44.663 47.311 45.212 44.868 45.359 45.648 45.21 45.5 45.81 54.07 41.922 40.536 40.444 66.881 59.991 40.193 45.066 43.143 44.375 58.789 57.439 67.794 49.34 65.34 56.217 46.659 60.702 53.873 47.137)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.034
Average program size in population (points): 45.237
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.359
Error (vector) diversity:			 0.501
--- Run Statistics ---
Number of program evaluations used so far: 206000
Number of point (instruction) evaluations so far: 1872427263
--- Timings ---
Current time: 1481136385910 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 205
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 206
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 206
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 358 354 355 389 317 316 374 289 384 436 447 340 338 386 393 367 295 356 174 414 207 160 190 140 178 322 310 309 357 395 370 432 442 420 451 397 394 457 437 241 194 294 226 340 363 446 395 441 484 495 448 525 638 637 641 641 642 640 640 320 364 335 495 590 456 509 532 521 441 435 430 452 493 500 498 544 503 470 402)
Population mean number of elite cases: 32.47
Count of perfect (error zero) individuals by case: (363 358 354 355 389 317 316 374 289 384 436 447 340 338 386 393 367 295 356 174 414 207 160 190 140 178 322 310 309 357 395 370 432 442 420 451 397 394 457 437 241 194 294 226 340 363 446 395 441 484 495 448 525 638 637 641 641 642 640 640 320 364 335 495 590 456 509 532 521 441 435 430 452 493 500 498 544 503 470 402)
Population mean number of perfect (error zero) cases: 32.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3726.22
Median total errors in population: 295/2
Error averages by case: (47.78 41.108 41.078 49.05 44.222 44.015 42.681 42.687 46.508 51.129 46.282 44.814 44.733 48.96 46.262 49.038 46.714 44.017 45.345 43.127 43.042 43.466 53.878 57.035 63.636 45.875 42.992 47.337 45.939 44.559 43.317 42.037 43.635 41.451 40.003 42.452 41.386 42.824 40.485 42.318 49.44 48.701 44.651 45.236 42.142 44.758 41.174 41.14 42.963 42.56 43.015 44.577 45.259 43.531 44.892 44.242 44.604 44.971 46.603 46.988 46.138 46.96 43.522 42.163 79.049 51.03 43.042 41.155 41.203 46.323 56.819 52.545 48.991 45.517 60.662 59.187 43.981 59.048 55.315 54.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.835
Average program size in population (points): 45.07
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.338
Error (vector) diversity:			 0.474
--- Run Statistics ---
Number of program evaluations used so far: 207000
Number of point (instruction) evaluations so far: 1881428715
--- Timings ---
Current time: 1481136413706 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 206
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 207
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 207
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop boolean_pop integer_eq boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best partial simplification: (boolean_pop boolean_pop integer_eq boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 493
Lexicase best mean error: 6.1625
Lexicase best size: 52
Percent parens: 0.212
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop boolean_pop integer_eq boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best partial simplification: (boolean_pop boolean_pop integer_eq boolean_empty boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_gt) integer_lt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove integer_fromboolean integer_div exec_do*range (in1))
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0 1 0 0 50 1 1 2 1 68 3 0 2 2 2 2 1 48 0 0 1 0 0 0 0 0 96 0 121 0 0 3 0 3 0 0 70 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 493
Zero cases best mean error: 6.1625
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 360 359 344 367 302 304 339 300 359 424 451 366 335 386 369 338 283 326 200 391 197 159 191 147 190 329 295 304 332 390 339 392 401 395 400 369 355 426 376 235 203 285 232 294 349 426 406 417 456 468 443 519 626 626 630 630 630 629 629 321 349 320 468 544 446 479 507 506 451 430 441 458 495 471 486 515 480 413 365)
Population mean number of elite cases: 31.29
Count of perfect (error zero) individuals by case: (325 360 359 344 367 302 304 339 300 359 424 451 366 335 386 369 338 283 326 200 391 197 159 191 147 190 329 295 304 332 390 339 392 401 395 400 369 355 426 376 235 203 285 232 294 349 426 406 417 456 468 443 519 626 626 630 630 630 629 629 321 349 320 468 544 446 479 507 506 451 430 441 458 495 471 486 515 480 413 365)
Population mean number of perfect (error zero) cases: 31.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4632.017
Median total errors in population: 162
Error averages by case: (63.822 52.163 50.981 55.083 49.358 54.036 52.512 56.642 60.48 59.63 58.389 58.62 58.352 66.873 55.876 54.915 55.282 53.732 55.033 53.163 56.01 55.462 58.832 68.92 65.834 57.726 54.229 56.511 56.657 53.616 53.766 53.195 56.265 56.702 56.545 55.796 55.0 61.334 55.285 57.58 58.355 54.597 53.493 57.808 55.062 59.734 54.749 56.923 55.254 56.117 57.003 57.934 61.628 55.972 58.563 57.939 59.58 58.727 61.111 60.507 62.149 58.125 54.528 58.419 85.043 67.21 47.012 57.203 52.088 52.313 61.887 54.424 55.867 59.794 70.779 66.251 55.043 67.205 67.477 57.937)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.029
Average program size in population (points): 44.121
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.351
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 208000
Number of point (instruction) evaluations so far: 1890327090
--- Timings ---
Current time: 1481136440555 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 207
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 208
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 208
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_fromboolean 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_fromboolean 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Lexicase best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 64
Lexicase best mean error: 0.8
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 1} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_fromboolean 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup integer_sub integer_sub boolean_invert_second_then_and boolean_and boolean_pop integer_dup_times boolean_dup boolean_empty boolean_invert_second_then_and boolean_shove boolean_xor integer_mod integer_fromboolean boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup boolean_shove) integer_fromboolean boolean_yankdup integer_min integer_shove 1 exec_do*range (in1 exec_dup_items integer_dup_times) integer_fromboolean 1 integer_div boolean_dup_times integer_fromboolean boolean_stackdepth in1 integer_shove)
Zero cases best errors: [1 0 1 1 1 20 1 0 1 1 1 1 1 1 0 0 0 0 0 1 0 0 2 2 2 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 0 0 0 0 3 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 64
Zero cases best mean error: 0.8
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (349 372 351 340 365 343 311 353 310 377 443 476 374 347 396 363 367 307 351 183 405 225 153 174 121 172 313 293 270 315 411 341 389 400 389 404 367 357 400 393 239 187 267 236 294 354 425 395 420 444 457 426 510 616 616 620 621 622 622 622 332 365 309 514 580 474 524 545 527 435 438 435 467 495 475 505 536 490 441 382)
Population mean number of elite cases: 31.63
Count of perfect (error zero) individuals by case: (349 372 351 340 365 343 311 353 310 377 443 476 374 347 396 363 367 307 351 183 405 225 153 174 121 172 313 293 270 315 411 341 389 400 389 404 367 357 400 393 239 187 267 236 294 354 425 395 420 444 457 426 510 616 616 620 621 622 622 622 332 365 309 514 580 474 524 545 527 435 438 435 467 495 475 505 536 490 441 382)
Population mean number of perfect (error zero) cases: 31.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4819.006
Median total errors in population: 150
Error averages by case: (60.768 52.119 51.953 56.024 55.288 59.968 59.779 56.831 61.164 62.379 55.437 61.499 54.895 67.119 55.593 54.332 60.327 56.375 56.521 56.044 63.043 52.495 66.137 63.202 76.654 55.271 54.799 59.28 57.058 53.932 52.081 55.756 61.785 57.469 58.251 59.915 59.976 60.706 61.432 59.972 57.525 53.622 60.565 57.862 53.646 56.119 57.562 59.974 60.368 59.73 61.419 60.841 63.858 62.609 63.83 64.681 64.577 65.24 65.894 66.56 68.084 55.943 62.539 58.341 79.091 70.948 57.07 59.089 53.102 53.53 76.548 58.752 62.908 60.744 68.01 65.197 57.694 65.999 62.342 62.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.685
Average program size in population (points): 44.98
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.363
Error (vector) diversity:			 0.5
--- Run Statistics ---
Number of program evaluations used so far: 209000
Number of point (instruction) evaluations so far: 1899264590
--- Timings ---
Current time: 1481136468725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 208
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 209
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 209
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop boolean_pop integer_min boolean_eq boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_do*count () boolean_yankdup boolean_shove integer_gt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove exec_yank integer_div integer_mult integer_min in1 exec_dup_items)
Lexicase best partial simplification: (boolean_pop boolean_pop integer_min boolean_eq boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_do*count () boolean_yankdup boolean_shove integer_gt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove exec_yank integer_div integer_mult integer_min in1 exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 0 1 0 0 1 1 0 2 0 0 0 1 0 2 2 2 2 1 0 0 0 0 1 1 1 0 0 0 0 2 0 0 3 3 2 0 3 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.173
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop boolean_pop integer_min boolean_eq boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_do*count () boolean_yankdup boolean_shove integer_gt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove exec_yank integer_div integer_mult integer_min in1 exec_dup_items)
Zero cases best partial simplification: (boolean_pop boolean_pop integer_min boolean_eq boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_mult) integer_fromboolean boolean_stackdepth integer_swap exec_do*count () boolean_yankdup boolean_shove integer_gt exec_do*range (in1 exec_dup_items boolean_xor) boolean_shove exec_yank integer_div integer_mult integer_min in1 exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 0 1 0 0 1 1 0 2 0 0 0 1 0 2 2 2 2 1 0 0 0 0 1 1 1 0 0 0 0 2 0 0 3 3 2 0 3 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 378 389 387 392 376 313 368 304 387 450 471 364 370 396 379 390 303 356 161 430 245 156 174 149 178 314 291 266 332 407 364 429 440 416 447 425 393 469 400 269 177 299 244 321 380 446 396 410 464 458 426 498 626 623 627 627 628 627 627 325 335 319 503 594 456 509 547 517 428 419 422 439 470 465 482 515 497 453 368)
Population mean number of elite cases: 32.26
Count of perfect (error zero) individuals by case: (366 378 389 387 392 376 313 368 304 387 450 471 364 370 396 379 390 303 356 161 430 245 156 174 149 178 314 291 266 332 407 364 429 440 416 447 425 393 469 400 269 177 299 244 321 380 446 396 410 464 458 426 498 626 623 627 627 628 627 627 325 335 319 503 594 456 509 547 517 428 419 422 439 470 465 482 515 497 453 368)
Population mean number of perfect (error zero) cases: 32.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth integer_fromboolean integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth integer_fromboolean integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3848.032
Median total errors in population: 141
Error averages by case: (48.74 44.588 37.973 45.935 42.077 45.666 47.616 45.335 52.918 57.433 45.879 43.19 44.218 55.723 46.49 44.831 44.685 45.227 45.835 44.14 46.987 39.47 45.848 61.015 64.285 43.942 44.24 45.556 43.717 44.318 42.352 43.744 48.007 48.746 44.405 47.334 44.851 46.961 46.797 48.878 45.322 44.673 45.251 45.482 45.173 44.133 47.347 46.47 47.581 48.852 50.312 48.065 50.749 48.516 49.735 49.144 51.064 50.52 51.246 51.014 48.035 46.974 42.501 45.359 71.92 59.019 41.982 44.076 41.033 43.251 58.419 49.498 49.798 44.53 66.802 52.082 47.57 60.73 55.027 48.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.688
Average program size in population (points): 45.0
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.339
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 210000
Number of point (instruction) evaluations so far: 1908256359
--- Timings ---
Current time: 1481136495684 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 209
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 210
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 210
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 365 391 378 378 336 341 358 333 388 438 468 370 327 373 353 348 284 347 231 386 223 146 175 118 176 315 305 294 334 396 370 426 442 399 443 406 391 426 394 233 180 267 236 315 360 427 383 415 454 460 432 500 598 601 604 606 608 608 608 319 353 352 437 551 429 494 538 485 447 418 433 450 483 482 458 501 476 413 378)
Population mean number of elite cases: 31.49
Count of perfect (error zero) individuals by case: (330 365 391 378 378 336 341 358 333 388 438 468 370 327 373 353 348 284 347 231 386 223 146 175 118 176 315 305 294 334 396 370 426 442 399 443 406 391 426 394 233 180 267 236 315 360 427 383 415 454 460 432 500 598 601 604 606 608 608 608 319 353 352 437 551 429 494 538 485 447 418 433 450 483 482 458 501 476 413 378)
Population mean number of perfect (error zero) cases: 31.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000004641902E9
Median total errors in population: 162
Error averages by case: (60.853 53.117 52.042 62.962 52.136 52.779 56.481 51.705 57.042 59.552 52.127 58.259 50.746 60.093 57.467 61.011 54.809 54.829 57.886 55.062 1.000000056013E9 57.398 57.863 61.869 74.367 60.147 55.621 58.346 57.746 53.555 52.842 51.758 55.8 54.533 54.963 53.203 51.947 56.826 54.698 56.196 62.393 54.699 58.806 60.584 53.597 56.176 53.413 52.079 53.878 55.085 56.673 55.951 58.285 58.426 61.136 61.634 61.144 60.656 61.161 61.676 63.101 57.005 54.398 55.618 78.986 61.0 52.097 58.025 57.12 54.32 63.852 60.482 64.917 53.546 70.712 77.224 53.801 62.777 65.154 63.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.092
Average program size in population (points): 44.19
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.369
Error (vector) diversity:			 0.514
--- Run Statistics ---
Number of program evaluations used so far: 211000
Number of point (instruction) evaluations so far: 1917159323
--- Timings ---
Current time: 1481136523184 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 210
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 211
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 211
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 46
Lexicase best total error: 48
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction 2} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best partial simplification: (boolean_pop boolean_pop boolean_pop boolean_dup boolean_invert_second_then_and boolean_pop integer_sub boolean_dup integer_swap boolean_invert_second_then_and boolean_empty exec_do*while () integer_add boolean_stackdepth 3 exec_do*range (in1 exec_dup_items integer_dup_times integer_shove integer_fromboolean) boolean_stackdepth integer_swap exec_swap () (boolean_yankdup integer_inc) integer_fromboolean integer_eq integer_min integer_shove 1 3 exec_do*range (in1 integer_shove 2) exec_do*range (in1 exec_yank integer_dup_times boolean_stackdepth integer_min))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 3 0 2 0 0 2 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 0 3 0 2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 3 0 0 0 0 0 0 1 2 2 2 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 46
Zero cases best number of zero cases: 46
Zero cases best total error: 48
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 363 375 356 355 347 303 362 331 402 414 442 366 349 384 379 362 308 348 201 405 201 150 163 129 188 332 301 290 347 389 372 420 437 423 439 427 378 445 427 226 190 265 253 308 347 416 393 418 447 462 445 474 609 610 613 614 614 614 614 332 365 344 491 573 470 519 534 528 453 418 464 482 517 496 513 547 498 454 390)
Population mean number of elite cases: 32.06
Count of perfect (error zero) individuals by case: (327 363 375 356 355 347 303 362 331 402 414 442 366 349 384 379 362 308 348 201 405 201 150 163 129 188 332 301 290 347 389 372 420 437 423 439 427 378 445 427 226 190 265 253 308 347 416 393 418 447 462 445 474 609 610 613 614 614 614 614 332 365 344 491 573 470 519 534 528 453 418 464 482 517 496 513 547 498 454 390)
Population mean number of perfect (error zero) cases: 32.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3.000004543742E9
Median total errors in population: 156
Error averages by case: (47.823 44.214 40.105 47.225 36.606 38.624 48.307 44.222 46.639 51.718 46.57 51.349 42.371 53.42 45.085 47.308 49.994 48.436 52.095 49.166 2.000000038076E9 38.65 43.313 51.615 59.9 48.468 45.848 48.576 50.607 50.566 49.491 51.427 56.963 56.625 55.991 58.767 61.25 64.511 65.418 68.936 46.66 42.764 48.9 45.32 50.3 53.217 55.393 59.803 64.52 68.147 71.932 79.755 87.638 91.529 98.55 107.237 113.924 122.303 131.116 140.393 46.105 45.955 44.784 39.619 1.000000072079E9 49.161 42.225 40.435 42.298 37.633 62.19 47.132 47.369 39.127 53.835 51.861 45.77 54.927 56.447 49.114)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.917
Average program size in population (points): 45.204
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.364
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 212000
Number of point (instruction) evaluations so far: 1926163270
--- Timings ---
Current time: 1481136551092 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 211
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 212
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 212
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 383 376 367 377 351 317 380 300 371 416 484 360 370 398 406 396 301 361 199 413 224 159 191 135 178 321 280 291 363 395 375 428 432 438 421 401 381 445 389 244 185 263 240 308 368 441 400 403 464 461 449 480 611 610 611 610 611 610 610 312 333 361 499 590 456 508 522 504 432 443 436 471 474 467 489 536 506 486 373)
Population mean number of elite cases: 32.10
Count of perfect (error zero) individuals by case: (345 383 376 367 377 351 317 380 300 371 416 484 360 370 398 406 396 301 361 199 413 224 159 191 135 178 321 280 291 363 395 375 428 432 438 421 401 381 445 389 244 185 263 240 308 368 441 400 403 464 461 449 480 611 610 611 610 611 610 610 312 333 361 499 590 456 508 522 504 432 443 436 471 474 467 489 536 506 486 373)
Population mean number of perfect (error zero) cases: 32.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte exec_noop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte exec_noop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000004071828E9
Median total errors in population: 166
Error averages by case: (54.773 46.066 46.959 49.978 43.168 45.599 48.414 57.573 54.859 66.305 55.818 51.228 45.877 63.518 45.79 46.518 44.445 49.272 48.546 44.402 1.000000045997E9 42.455 48.884 52.81 80.377 47.722 45.817 45.868 44.647 47.003 42.256 46.507 48.444 48.853 44.843 45.711 44.986 47.617 49.288 48.316 50.245 46.656 48.275 46.562 46.978 46.331 45.029 48.085 48.894 51.422 48.069 48.426 49.025 47.912 49.432 48.508 50.042 49.084 49.645 49.543 56.13 53.981 49.425 45.48 78.878 58.933 45.975 53.04 54.086 45.323 70.598 50.533 54.602 52.402 62.789 62.004 56.705 56.479 58.815 59.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.806
Average program size in population (points): 45.155
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.379
Error (vector) diversity:			 0.512
--- Run Statistics ---
Number of program evaluations used so far: 213000
Number of point (instruction) evaluations so far: 1935251935
--- Timings ---
Current time: 1481136577361 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 212
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 213
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 213
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 355 367 367 346 327 309 367 297 373 435 480 376 356 401 383 395 324 378 199 438 200 164 190 139 173 320 278 291 337 370 365 415 436 418 409 398 376 452 390 234 196 284 293 335 377 445 398 423 473 469 452 472 631 629 633 633 633 633 633 304 357 328 504 566 479 526 547 524 449 436 482 490 492 483 511 531 477 474 370)
Population mean number of elite cases: 32.36
Count of perfect (error zero) individuals by case: (359 355 367 367 346 327 309 367 297 373 435 480 376 356 401 383 395 324 378 199 438 200 164 190 139 173 320 278 291 337 370 365 415 436 418 409 398 376 452 390 234 196 284 293 335 377 445 398 423 473 469 452 472 631 629 633 633 633 633 633 304 357 328 504 566 479 526 547 524 449 436 482 490 492 483 511 531 477 474 370)
Population mean number of perfect (error zero) cases: 32.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4353.28
Median total errors in population: 158
Error averages by case: (59.795 54.122 45.95 59.951 50.418 52.716 51.401 50.868 51.079 62.452 50.18 54.552 50.406 67.616 50.57 52.053 51.834 54.307 57.206 48.949 43.988 48.607 59.993 60.407 80.764 51.044 50.571 57.572 48.711 50.24 49.878 56.76 53.956 50.556 49.778 51.709 50.263 53.337 50.97 52.462 52.359 50.987 53.466 50.353 51.091 55.304 49.028 51.594 50.646 53.955 51.607 53.733 55.887 53.424 54.907 56.371 56.852 57.339 57.812 58.299 59.174 52.969 49.661 46.548 74.993 60.981 43.96 52.282 52.173 48.372 74.707 56.638 60.585 46.715 64.837 63.263 51.13 60.061 58.435 52.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.555
Average program size in population (points): 44.789
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.359
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 214000
Number of point (instruction) evaluations so far: 1944222632
--- Timings ---
Current time: 1481136603523 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 213
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 214
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 214
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 380 356 349 371 338 300 359 321 359 431 458 357 343 370 380 356 294 348 208 423 216 155 199 155 209 320 299 301 328 327 375 419 421 396 419 378 373 423 379 232 212 274 278 336 362 440 387 394 456 461 426 471 594 595 598 601 602 602 602 311 377 366 492 523 459 515 511 499 454 404 429 443 473 469 486 515 446 425 366)
Population mean number of elite cases: 31.43
Count of perfect (error zero) individuals by case: (348 380 356 349 371 338 300 359 321 359 431 458 357 343 370 380 356 294 348 208 423 216 155 199 155 209 320 299 301 328 327 375 419 421 396 419 378 373 423 379 232 212 274 278 336 362 440 387 394 456 461 426 471 594 595 598 601 602 602 602 311 377 366 492 523 459 515 511 499 454 404 429 443 473 469 486 515 446 425 366)
Population mean number of perfect (error zero) cases: 31.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8162.747
Median total errors in population: 160
Error averages by case: (59.949 56.014 51.957 69.07 56.496 50.599 57.619 55.763 56.102 63.349 58.402 54.356 53.301 65.474 58.446 51.016 52.236 52.407 52.675 52.747 50.949 60.494 55.797 61.872 80.443 54.501 53.188 57.173 52.202 52.401 51.289 54.831 55.712 51.214 50.295 51.024 50.429 53.679 53.542 54.308 54.298 54.636 51.326 51.565 51.776 54.556 51.655 51.242 52.715 54.258 52.284 52.744 57.665 54.583 55.306 55.825 56.341 56.867 57.388 57.917 67.096 58.889 58.402 58.444 89.059 3696.771 50.066 58.395 55.126 50.478 68.744 59.547 58.954 52.75 70.736 67.839 51.934 60.099 57.29 53.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.519
Average program size in population (points): 44.703
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.369
Error (vector) diversity:			 0.514
--- Run Statistics ---
Number of program evaluations used so far: 215000
Number of point (instruction) evaluations so far: 1953175271
--- Timings ---
Current time: 1481136629889 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 214
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 215
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 215
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 391 336 319 342 304 279 365 343 365 443 483 362 372 399 379 363 295 373 192 426 238 164 214 149 175 336 297 297 329 370 385 411 412 441 461 392 366 422 409 257 195 261 227 345 358 445 403 407 460 502 456 488 620 623 626 625 627 626 626 339 404 331 509 552 491 535 570 528 466 445 468 476 487 481 492 534 461 421 355)
Population mean number of elite cases: 32.27
Count of perfect (error zero) individuals by case: (348 391 336 319 342 304 279 365 343 365 443 483 362 372 399 379 363 295 373 192 426 238 164 214 149 175 336 297 297 329 370 385 411 412 441 461 392 366 422 409 257 195 261 227 345 358 445 403 407 460 502 456 488 620 623 626 625 627 626 626 339 404 331 509 552 491 535 570 528 466 445 468 476 487 481 492 534 461 421 355)
Population mean number of perfect (error zero) cases: 32.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4740.531
Median total errors in population: 154
Error averages by case: (62.755 56.04 52.098 59.194 58.362 59.735 62.549 59.391 64.721 67.663 55.744 56.979 55.691 65.332 59.191 55.659 59.095 60.467 56.387 54.81 54.939 55.645 57.024 66.954 89.424 56.222 60.276 59.195 55.301 53.078 55.478 56.295 54.56 54.585 53.592 55.106 54.952 56.748 55.857 55.605 59.372 58.623 55.219 57.126 56.42 55.78 53.374 54.28 56.814 56.118 55.558 56.592 57.908 57.195 57.522 58.054 58.598 59.141 59.675 60.223 60.074 57.862 58.475 58.312 82.048 66.973 52.109 57.314 61.245 55.475 67.645 58.392 56.833 55.557 74.588 71.008 55.787 71.789 70.534 62.22)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.208
Average program size in population (points): 44.322
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.348
Error (vector) diversity:			 0.486
--- Run Statistics ---
Number of program evaluations used so far: 216000
Number of point (instruction) evaluations so far: 1962132896
--- Timings ---
Current time: 1481136656495 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 215
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 216
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 216
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 405 367 348 350 315 297 393 296 362 450 489 380 360 363 389 353 269 348 223 406 229 162 208 164 195 328 294 299 324 341 366 394 387 411 420 374 360 411 383 248 181 276 276 323 362 423 398 401 472 474 443 512 627 630 631 631 632 632 632 337 376 359 477 555 449 512 541 494 436 449 455 490 461 485 512 548 499 452 384)
Population mean number of elite cases: 32.04
Count of perfect (error zero) individuals by case: (348 405 367 348 350 315 297 393 296 362 450 489 380 360 363 389 353 269 348 223 406 229 162 208 164 195 328 294 299 324 341 366 394 387 411 420 374 360 411 383 248 181 276 276 323 362 423 398 401 472 474 443 512 627 630 631 631 632 632 632 337 376 359 477 555 449 512 541 494 436 449 455 490 461 485 512 548 499 452 384)
Population mean number of perfect (error zero) cases: 32.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4840.082
Median total errors in population: 156
Error averages by case: (56.759 56.035 52.933 63.218 57.276 58.506 59.42 58.558 59.821 70.212 63.92 65.036 58.362 69.164 69.293 58.109 61.795 60.012 60.331 55.97 53.947 53.444 55.788 63.882 85.48 60.156 59.172 64.176 57.969 56.573 55.183 56.346 58.803 56.563 57.597 55.969 55.19 58.115 58.494 59.572 59.288 59.512 59.294 58.803 57.443 60.583 56.808 58.232 59.07 59.516 59.665 61.414 62.94 60.095 61.843 61.162 62.702 62.246 63.779 62.623 56.059 57.87 51.482 57.426 84.979 67.065 52.053 58.145 56.266 59.412 69.612 59.392 55.638 56.679 68.608 70.702 61.969 66.799 68.759 57.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.317
Average program size in population (points): 44.373
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.365
Error (vector) diversity:			 0.501
--- Run Statistics ---
Number of program evaluations used so far: 217000
Number of point (instruction) evaluations so far: 1971166792
--- Timings ---
Current time: 1481136682771 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 216
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 217
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 217
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 396 333 340 348 325 289 357 295 339 448 480 356 378 367 378 380 282 352 230 413 247 165 213 181 203 326 275 301 334 375 383 408 405 409 424 379 394 423 376 245 181 267 279 341 389 482 439 427 478 493 463 494 644 645 645 645 646 645 645 322 406 369 490 543 449 510 524 474 453 479 483 497 502 499 537 518 493 472 397)
Population mean number of elite cases: 32.56
Count of perfect (error zero) individuals by case: (343 396 333 340 348 325 289 357 295 339 448 480 356 378 367 378 380 282 352 230 413 247 165 213 181 203 326 275 301 334 375 383 408 405 409 424 379 394 423 376 245 181 267 279 341 389 482 439 427 478 493 463 494 644 645 645 645 646 645 645 322 406 369 490 543 449 510 524 474 453 479 483 497 502 499 537 518 493 472 397)
Population mean number of perfect (error zero) cases: 32.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4038.679
Median total errors in population: 162
Error averages by case: (60.051 44.091 38.078 48.12 46.356 50.16 52.597 50.351 48.244 55.7 54.117 52.19 49.198 61.361 52.248 54.084 51.19 49.263 49.28 46.951 47.182 44.453 45.883 63.952 71.702 47.974 55.4 51.361 46.926 46.374 44.853 46.05 46.169 44.561 44.579 44.651 44.661 46.838 45.304 48.284 55.347 47.842 46.682 49.244 45.569 47.198 57.48 46.166 46.497 46.149 46.1 48.65 50.976 48.38 48.947 49.517 50.087 50.661 51.506 52.098 54.107 58.807 44.686 39.583 64.132 58.04 44.072 51.247 50.448 50.465 54.485 52.48 48.868 50.718 67.493 63.81 45.991 56.055 53.16 54.149)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.39
Average program size in population (points): 44.524
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.352
Error (vector) diversity:			 0.477
--- Run Statistics ---
Number of program evaluations used so far: 218000
Number of point (instruction) evaluations so far: 1980162846
--- Timings ---
Current time: 1481136709177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 217
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 218
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 218
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove integer_lt exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_shove integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 392 358 346 349 345 288 377 342 374 440 468 366 350 396 405 341 288 341 198 412 239 176 210 170 227 367 304 303 356 387 408 445 436 428 424 423 385 452 433 264 212 295 265 332 376 453 441 416 495 481 474 514 659 660 661 661 661 661 661 317 394 361 503 537 464 523 530 486 441 441 452 474 474 478 494 516 473 438 377)
Population mean number of elite cases: 32.93
Count of perfect (error zero) individuals by case: (364 392 358 346 349 345 288 377 342 374 440 468 366 350 396 405 341 288 341 198 412 239 176 210 170 227 367 304 303 356 387 408 445 436 428 424 423 385 452 433 264 212 295 265 332 376 453 441 416 495 481 474 514 659 660 661 661 661 661 661 317 394 361 503 537 464 523 530 486 441 441 452 474 474 478 494 516 473 438 377)
Population mean number of perfect (error zero) cases: 32.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (integer_yankdup integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (integer_yankdup integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3121.139
Median total errors in population: 168
Error averages by case: (41.783 37.009 30.053 39.167 37.225 43.603 38.581 38.619 40.837 55.206 34.813 42.841 34.268 50.462 37.982 36.738 32.156 35.449 35.061 34.637 36.007 33.448 40.726 44.8 61.473 34.649 37.589 39.934 33.303 34.02 34.313 35.144 37.137 34.11 34.254 34.396 37.181 37.404 35.953 35.287 41.282 35.528 34.515 32.678 33.89 39.083 35.64 33.526 36.432 34.516 38.262 36.054 40.403 37.509 38.795 38.289 39.78 39.288 40.771 41.277 42.155 40.918 31.477 32.416 65.092 43.008 36.991 40.245 37.186 39.332 49.562 41.504 36.793 37.544 51.637 52.706 31.775 48.776 48.168 38.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.936
Average program size in population (points): 45.07
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.346
Error (vector) diversity:			 0.488
--- Run Statistics ---
Number of program evaluations used so far: 219000
Number of point (instruction) evaluations so far: 1989247274
--- Timings ---
Current time: 1481136735575 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 218
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 219
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 219
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 389 349 366 351 328 301 361 317 378 437 448 364 374 399 400 371 339 386 235 394 228 161 209 171 207 333 290 266 315 394 366 431 434 413 410 399 372 410 404 280 192 290 267 336 378 445 399 407 468 456 451 478 616 617 620 620 620 620 620 321 396 404 508 549 442 526 522 479 413 475 439 462 454 483 501 507 490 451 372)
Population mean number of elite cases: 32.20
Count of perfect (error zero) individuals by case: (330 389 349 366 351 328 301 361 317 378 437 448 364 374 399 400 371 339 386 235 394 228 161 209 171 207 333 290 266 315 394 366 431 434 413 410 399 372 410 404 280 192 290 267 336 378 445 399 407 468 456 451 478 616 617 620 620 620 620 620 321 396 404 508 549 442 526 522 479 413 475 439 462 454 483 501 507 490 451 372)
Population mean number of perfect (error zero) cases: 32.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8.000004171002E9
Median total errors in population: 295/2
Error averages by case: (54.758 57.016 47.017 50.081 45.448 51.77 46.852 54.433 53.769 52.228 47.809 56.443 46.191 62.342 1.000000055068E9 49.708 47.391 1.00000004727E9 47.194 46.365 52.073 42.53 55.912 50.86 1.000000068446E9 46.198 1.000000047538E9 48.221 45.882 48.674 47.177 49.494 47.257 50.088 50.202 50.145 1.000000052865E9 51.342 1.000000053974E9 55.76 48.294 48.744 45.957 50.13 45.674 53.951 49.804 49.126 51.766 52.872 53.647 1.000000055015E9 1.000000056894E9 55.421 56.771 56.319 57.872 57.431 58.982 59.539 59.062 54.862 43.283 48.476 70.986 62.118 49.023 46.344 47.286 52.492 56.499 55.859 49.053 51.493 58.684 59.689 46.003 51.723 53.901 56.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.288
Average program size in population (points): 44.409
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.358
Error (vector) diversity:			 0.488
--- Run Statistics ---
Number of program evaluations used so far: 220000
Number of point (instruction) evaluations so far: 1998259495
--- Timings ---
Current time: 1481136762020 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 219
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 220
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 220
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 378 328 349 356 330 297 337 325 381 429 458 351 365 413 420 353 313 367 214 397 233 161 200 153 193 334 295 284 332 369 377 438 454 432 411 417 369 449 431 248 193 254 251 325 372 447 417 414 484 456 458 488 635 637 641 643 644 644 644 318 411 359 527 550 465 525 542 529 475 484 482 493 487 526 512 502 477 449 390)
Population mean number of elite cases: 32.66
Count of perfect (error zero) individuals by case: (367 378 328 349 356 330 297 337 325 381 429 458 351 365 413 420 353 313 367 214 397 233 161 200 153 193 334 295 284 332 369 377 438 454 432 411 417 369 449 431 248 193 254 251 325 372 447 417 414 484 456 458 488 635 637 641 643 644 644 644 318 411 359 527 550 465 525 542 529 475 484 482 493 487 526 512 502 477 449 390)
Population mean number of perfect (error zero) cases: 32.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3818.443
Median total errors in population: 291/2
Error averages by case: (47.713 39.043 42.038 55.079 44.212 50.695 43.758 45.668 50.986 57.235 41.822 47.233 41.399 60.863 48.768 48.05 45.657 42.381 45.528 41.833 44.021 43.455 49.878 49.217 70.61 46.752 44.738 52.742 42.124 42.797 44.312 45.522 42.349 43.638 42.685 44.354 57.308 46.232 43.006 45.468 51.578 48.784 45.409 43.928 41.861 46.15 41.956 42.95 42.98 43.145 42.725 45.169 50.348 48.229 46.788 47.565 46.883 47.443 47.99 48.553 49.097 45.862 42.399 39.374 70.234 60.216 44.085 50.209 44.27 42.431 50.508 51.596 50.887 48.529 67.471 57.982 47.942 56.922 48.979 47.847)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.492
Average program size in population (points): 44.607
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.359
Error (vector) diversity:			 0.506
--- Run Statistics ---
Number of program evaluations used so far: 221000
Number of point (instruction) evaluations so far: 2007288000
--- Timings ---
Current time: 1481136788375 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 220
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 221
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 221
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 378 326 341 338 326 279 338 327 347 415 453 361 362 410 431 369 324 378 189 408 240 171 204 160 214 350 304 277 360 360 381 435 420 426 423 396 370 440 402 252 178 284 263 317 378 450 435 392 461 480 449 485 634 637 636 637 637 637 637 313 393 345 534 566 483 531 540 515 477 482 505 479 479 494 516 530 500 457 373)
Population mean number of elite cases: 32.63
Count of perfect (error zero) individuals by case: (404 378 326 341 338 326 279 338 327 347 415 453 361 362 410 431 369 324 378 189 408 240 171 204 160 214 350 304 277 360 360 381 435 420 426 423 396 370 440 402 252 178 284 263 317 378 450 435 392 461 480 449 485 634 637 636 637 637 637 637 313 393 345 534 566 483 531 540 515 477 482 505 479 479 494 516 530 500 457 373)
Population mean number of perfect (error zero) cases: 32.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4298993.282
Median total errors in population: 299/2
Error averages by case: (50.675 43.057 41.01 46.044 47.192 46.626 52.615 45.326 54.449 62.212 45.013 53.603 46.633 64.331 44.503 43.641 45.389 42.21 46.063 44.565 42.982 38.422 48.672 51.737 67.389 49.4 45.838 46.018 47.027 42.868 46.978 46.289 50.111 49.47 49.041 51.355 49.841 53.32 51.767 51.434 51.541 46.619 44.982 46.98 45.226 50.473 49.863 49.247 49.84 51.427 50.848 52.376 53.825 54.213 54.61 55.228 55.839 56.722 57.348 57.982 55.087 51.85 45.488 44.306 69.981 53.031 41.923 50.097 49.043 4295012.411 57.254 52.225 47.332 45.352 66.329 59.536 44.535 53.56 56.767 56.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.072
Average program size in population (points): 45.173
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.356
Error (vector) diversity:			 0.498
--- Run Statistics ---
Number of program evaluations used so far: 222000
Number of point (instruction) evaluations so far: 2016322244
--- Timings ---
Current time: 1481136814615 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 221
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 222
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 222
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 408 348 371 357 324 272 353 321 327 424 470 334 391 427 414 366 293 322 194 420 264 147 200 170 194 316 287 274 346 363 381 437 415 429 427 396 368 423 395 276 175 273 283 326 359 457 453 400 469 447 453 492 633 632 634 635 635 635 635 298 409 385 529 584 447 520 543 486 445 496 494 479 495 520 509 551 508 455 374)
Population mean number of elite cases: 32.57
Count of perfect (error zero) individuals by case: (372 408 348 371 357 324 272 353 321 327 424 470 334 391 427 414 366 293 322 194 420 264 147 200 170 194 316 287 274 346 363 381 437 415 429 427 396 368 423 395 276 175 273 283 326 359 457 453 400 469 447 453 492 633 632 634 635 635 635 635 298 409 385 529 584 447 520 543 486 445 496 494 479 495 520 509 551 508 455 374)
Population mean number of perfect (error zero) cases: 32.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000007612491E9
Median total errors in population: 141
Error averages by case: (53.736 43.023 3557.654 45.172 43.438 1.000000053657E9 54.942 48.948 55.013 62.797 47.704 50.54 45.695 61.833 53.399 48.322 49.427 45.995 48.468 45.332 41.995 46.497 50.117 66.938 76.463 49.642 45.235 51.373 47.25 49.953 47.344 43.926 46.041 45.246 46.173 49.474 48.385 50.451 49.958 50.196 50.447 47.073 48.227 48.848 46.212 46.49 47.05 46.534 49.754 49.153 47.506 50.04 52.043 50.211 51.209 52.32 52.123 53.227 53.262 54.133 58.147 53.838 45.399 40.525 65.98 66.155 43.635 46.328 52.338 46.376 56.354 59.877 55.01 49.613 66.9 64.102 46.99 65.724 60.163 55.423)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.924
Average program size in population (points): 44.957
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.362
Error (vector) diversity:			 0.496
--- Run Statistics ---
Number of program evaluations used so far: 223000
Number of point (instruction) evaluations so far: 2025401955
--- Timings ---
Current time: 1481136841154 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 222
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 223
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 223
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 376 345 363 369 326 289 343 348 365 432 458 336 377 429 398 364 311 361 206 420 239 148 213 179 213 339 310 313 339 354 377 437 429 439 418 411 363 419 407 231 173 226 243 335 396 455 425 390 479 446 435 503 637 639 640 641 641 641 641 310 365 392 528 543 452 508 519 503 465 510 487 474 495 490 491 510 467 455 411)
Population mean number of elite cases: 32.51
Count of perfect (error zero) individuals by case: (360 376 345 363 369 326 289 343 348 365 432 458 336 377 429 398 364 311 361 206 420 239 148 213 179 213 339 310 313 339 354 377 437 429 439 418 411 363 419 407 231 173 226 243 335 396 455 425 390 479 446 435 503 637 639 640 641 641 641 641 310 365 392 528 543 452 508 519 503 465 510 487 474 495 490 491 510 467 455 411)
Population mean number of perfect (error zero) cases: 32.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8502.938
Median total errors in population: 333/2
Error averages by case: (64.743 56.048 50.959 56.071 55.274 59.541 58.778 60.727 63.644 76.43 56.86 63.39 59.68 73.475 66.677 58.673 60.254 56.743 58.981 59.874 52.009 52.462 58.996 66.798 90.822 59.332 55.316 65.451 59.294 58.727 61.441 58.946 58.705 61.306 57.792 60.624 62.309 60.344 60.679 61.118 60.44 3684.551 58.36 58.565 56.046 58.838 60.089 58.882 61.399 59.409 60.521 62.409 61.051 61.734 62.324 61.48 61.852 62.228 62.602 62.978 62.13 60.881 55.357 52.386 74.08 64.019 50.993 60.382 57.344 52.396 63.276 59.507 61.919 51.36 82.621 64.826 54.897 67.704 62.59 69.219)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.731
Average program size in population (points): 45.036
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.349
Error (vector) diversity:			 0.488
--- Run Statistics ---
Number of program evaluations used so far: 224000
Number of point (instruction) evaluations so far: 2034318454
--- Timings ---
Current time: 1481136867571 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 223
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 224
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 224
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 379 346 367 368 345 294 374 350 361 424 414 354 362 411 397 383 289 362 188 420 257 169 208 187 207 370 300 306 356 386 369 470 426 438 424 440 382 450 424 257 201 277 262 317 374 443 403 399 490 461 436 487 605 606 607 606 608 608 608 315 383 347 527 545 422 499 531 494 464 489 442 445 462 470 479 504 463 423 352)
Population mean number of elite cases: 32.21
Count of perfect (error zero) individuals by case: (339 379 346 367 368 345 294 374 350 361 424 414 354 362 411 397 383 289 362 188 420 257 169 208 187 207 370 300 306 356 386 369 470 426 438 424 440 382 450 424 257 201 277 262 317 374 443 403 399 490 461 436 487 605 606 607 606 608 608 608 315 383 347 527 545 422 499 531 494 464 489 442 445 462 470 479 504 463 423 352)
Population mean number of perfect (error zero) cases: 32.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3782.881
Median total errors in population: 297/2
Error averages by case: (46.799 39.098 38.056 49.092 45.353 45.978 45.871 53.65 50.132 59.72 39.362 42.489 43.061 60.932 49.195 42.035 43.634 42.833 43.407 43.889 34.014 42.475 42.898 49.137 73.363 39.959 45.249 50.078 42.922 42.56 42.879 43.042 39.961 41.059 42.187 41.359 41.771 45.333 41.574 44.835 47.378 40.712 44.329 42.16 44.832 40.861 40.308 43.972 43.062 43.107 41.642 143.25 49.576 52.109 50.581 51.253 51.93 52.608 53.276 53.958 50.148 48.931 43.479 38.364 70.051 49.134 38.189 46.328 48.288 42.723 46.412 40.71 45.056 43.799 61.867 54.238 41.006 45.995 41.981 44.037)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.973
Average program size in population (points): 45.204
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.364
Error (vector) diversity:			 0.511
--- Run Statistics ---
Number of program evaluations used so far: 225000
Number of point (instruction) evaluations so far: 2043287653
--- Timings ---
Current time: 1481136893904 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 224
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 225
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 225
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 426 381 378 374 348 329 364 344 387 417 442 365 363 424 401 366 299 360 215 421 256 172 203 161 195 336 285 313 327 360 351 408 410 422 404 419 360 413 392 257 179 261 241 334 399 437 409 417 490 454 452 506 636 635 639 641 642 641 641 322 380 372 496 549 452 507 535 512 469 482 448 431 474 470 469 492 452 436 356)
Population mean number of elite cases: 32.37
Count of perfect (error zero) individuals by case: (367 426 381 378 374 348 329 364 344 387 417 442 365 363 424 401 366 299 360 215 421 256 172 203 161 195 336 285 313 327 360 351 408 410 422 404 419 360 413 392 257 179 261 241 334 399 437 409 417 490 454 452 506 636 635 639 641 642 641 641 322 380 372 496 549 452 507 535 512 469 482 448 431 474 470 469 492 452 436 356)
Population mean number of perfect (error zero) cases: 32.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000003815369E9
Median total errors in population: 171
Error averages by case: (47.805 33.117 37.072 48.186 49.359 47.795 45.753 52.857 52.068 50.726 43.373 44.782 41.469 59.926 50.352 42.114 42.422 44.753 49.5 52.959 33.092 38.522 46.068 52.993 61.541 38.214 41.682 48.115 47.497 46.39 48.612 44.982 44.725 52.97 53.415 43.664 42.971 44.905 45.161 44.564 48.462 44.796 44.461 43.689 1.000000046695E9 59.86 41.106 44.619 45.098 45.754 44.424 46.62 49.34 51.472 49.602 51.129 50.668 52.214 52.028 52.888 49.148 48.981 43.444 35.474 66.023 54.061 43.066 52.597 48.308 48.364 47.437 46.801 52.154 45.733 70.765 55.114 38.59 57.998 45.856 44.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.45
Average program size in population (points): 44.531
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.354
Error (vector) diversity:			 0.502
--- Run Statistics ---
Number of program evaluations used so far: 226000
Number of point (instruction) evaluations so far: 2052322608
--- Timings ---
Current time: 1481136919896 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 225
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 226
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 226
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 388 374 391 369 344 305 352 310 349 402 428 350 340 412 386 358 321 352 217 406 247 146 188 166 210 369 323 297 353 353 349 423 436 440 425 433 363 426 418 251 181 273 278 333 383 422 416 381 463 445 435 511 631 630 631 632 631 631 631 298 382 373 508 567 460 528 559 500 450 476 447 449 471 474 490 498 465 450 368)
Population mean number of elite cases: 32.31
Count of perfect (error zero) individuals by case: (386 388 374 391 369 344 305 352 310 349 402 428 350 340 412 386 358 321 352 217 406 247 146 188 166 210 369 323 297 353 353 349 423 436 440 425 433 363 426 418 251 181 273 278 333 383 422 416 381 463 445 435 511 631 630 631 632 631 631 631 298 382 373 508 567 460 528 559 500 450 476 447 449 471 474 490 498 465 450 368)
Population mean number of perfect (error zero) cases: 32.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000004286602E9
Median total errors in population: 152
Error averages by case: (52.74 47.065 43.059 57.019 51.463 51.555 56.788 60.712 52.215 68.535 47.955 47.496 52.229 73.514 62.626 51.756 51.872 49.291 51.716 50.0 44.018 45.434 49.843 54.168 83.462 49.577 52.645 53.928 49.747 50.546 51.458 50.141 49.349 50.468 46.306 49.575 54.453 50.941 52.413 51.725 53.398 48.698 51.032 51.287 1.000000046653E9 50.181 50.535 49.886 50.74 52.215 53.138 53.955 55.281 54.704 56.216 55.49 56.979 56.49 57.972 57.481 54.172 51.904 53.33 46.568 65.961 57.982 40.055 53.191 55.284 61.527 55.458 54.455 54.009 48.669 69.825 68.963 47.47 60.976 49.902 54.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.853
Average program size in population (points): 45.037
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.344
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 227000
Number of point (instruction) evaluations so far: 2061314085
--- Timings ---
Current time: 1481136946500 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 226
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 227
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 227
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 375 347 365 357 305 291 369 332 376 406 433 388 366 405 393 366 294 350 200 400 257 166 205 163 214 355 322 280 349 395 380 437 433 447 419 425 368 434 447 240 178 271 265 334 394 463 454 441 487 461 495 509 667 669 672 673 673 673 673 302 417 404 556 558 486 529 553 526 479 529 481 466 465 498 515 498 501 451 371)
Population mean number of elite cases: 33.25
Count of perfect (error zero) individuals by case: (360 375 347 365 357 305 291 369 332 376 406 433 388 366 405 393 366 294 350 200 400 257 166 205 163 214 355 322 280 349 395 380 437 433 447 419 425 368 434 447 240 178 271 265 334 394 463 454 441 487 461 495 509 667 669 672 673 673 673 673 302 417 404 556 558 486 529 553 526 479 529 481 466 465 498 515 498 501 451 371)
Population mean number of perfect (error zero) cases: 33.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3504.227
Median total errors in population: 295/2
Error averages by case: (39.76 38.253 38.286 47.089 41.389 47.644 45.894 58.79 42.952 57.562 39.288 45.595 41.284 59.196 42.8 42.152 38.178 39.872 43.979 39.394 34.047 36.649 39.825 53.036 67.802 40.298 40.746 40.81 45.766 40.176 44.438 36.713 39.454 39.187 36.586 39.616 37.918 41.851 40.769 38.958 44.366 41.583 44.856 42.605 40.996 43.097 37.424 41.304 38.066 40.181 41.391 41.65 42.926 42.888 42.761 44.481 43.741 44.243 44.731 45.233 49.123 43.865 39.326 33.348 56.225 48.092 40.033 48.196 42.177 48.714 46.183 43.557 42.081 44.808 56.868 59.868 39.333 50.313 48.942 50.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.937
Average program size in population (points): 45.243
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.356
Error (vector) diversity:			 0.509
--- Run Statistics ---
Number of program evaluations used so far: 228000
Number of point (instruction) evaluations so far: 2070451910
--- Timings ---
Current time: 1481136974703 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 227
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 228
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 228
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 403 347 343 373 324 306 369 332 359 415 450 385 377 418 398 363 299 364 204 421 261 187 199 195 221 362 330 317 383 374 390 417 424 416 433 420 372 418 432 258 171 269 241 314 390 459 460 450 508 476 494 554 670 673 675 676 676 677 676 313 396 408 533 538 475 531 554 505 448 482 435 456 444 465 501 518 485 444 355)
Population mean number of elite cases: 33.24
Count of perfect (error zero) individuals by case: (382 403 347 343 373 324 306 369 332 359 415 450 385 377 418 398 363 299 364 204 421 261 187 199 195 221 362 330 317 383 374 390 417 424 416 433 420 372 418 432 258 171 269 241 314 390 459 460 450 508 476 494 554 670 673 675 676 676 677 676 313 396 408 533 538 475 531 554 505 448 482 435 456 444 465 501 518 485 444 355)
Population mean number of perfect (error zero) cases: 33.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7338.407
Median total errors in population: 152
Error averages by case: (45.726 38.065 38.054 48.23 47.513 44.043 45.823 61.055 48.179 54.07 38.418 42.006 42.387 63.062 53.453 42.47 42.349 44.262 41.589 42.02 37.019 46.527 45.835 48.345 65.126 44.21 47.431 44.227 45.861 42.625 50.81 42.553 44.652 41.203 41.159 42.864 44.497 45.214 44.445 45.371 44.339 3670.593 45.989 43.946 43.415 41.303 42.1 41.713 42.439 45.323 43.623 43.876 44.921 45.529 46.956 49.826 48.986 49.948 50.364 51.063 50.131 43.903 47.383 37.415 68.292 51.035 40.116 44.332 53.355 52.545 48.635 41.848 41.114 48.782 62.931 49.267 39.456 57.304 43.278 48.285)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.951
Average program size in population (points): 45.219
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.353
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 229000
Number of point (instruction) evaluations so far: 2079586112
--- Timings ---
Current time: 1481137000991 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 228
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 229
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 229
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 400 367 357 360 328 301 354 340 355 473 474 400 404 432 410 386 327 353 208 403 244 173 182 169 192 311 307 279 364 384 384 453 449 435 448 446 404 450 436 260 191 288 240 324 383 448 434 432 487 462 479 515 641 640 643 645 645 646 648 294 405 393 529 544 448 481 532 506 470 494 474 479 471 500 490 510 500 446 354)
Population mean number of elite cases: 33.08
Count of perfect (error zero) individuals by case: (362 400 367 357 360 328 301 354 340 355 473 474 400 404 432 410 386 327 353 208 403 244 173 182 169 192 311 307 279 364 384 384 453 449 435 448 446 404 450 436 260 191 288 240 324 383 448 434 432 487 462 479 515 641 640 643 645 645 646 648 294 405 393 529 544 448 481 532 506 470 494 474 479 471 500 490 510 500 446 354)
Population mean number of perfect (error zero) cases: 33.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3864.833
Median total errors in population: 305/2
Error averages by case: (55.704 42.056 41.035 51.138 44.22 49.557 45.562 57.924 59.939 57.354 42.002 42.546 43.437 60.78 45.849 42.161 40.69 40.918 45.431 43.479 36.051 46.385 42.898 64.876 72.758 45.5 48.2 41.059 44.682 43.026 44.408 40.513 40.666 41.773 41.282 43.945 43.976 46.089 44.773 44.58 53.264 41.564 43.963 48.259 43.022 43.216 43.383 42.806 42.488 42.83 43.261 45.302 47.699 46.994 46.839 47.461 48.334 48.723 49.344 49.976 60.114 51.867 54.282 41.339 66.085 53.003 44.153 50.338 56.362 50.348 48.339 50.557 46.626 57.574 65.604 58.74 45.283 62.689 57.946 55.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.847
Average program size in population (points): 44.945
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.367
Error (vector) diversity:			 0.506
--- Run Statistics ---
Number of program evaluations used so far: 230000
Number of point (instruction) evaluations so far: 2088704553
--- Timings ---
Current time: 1481137027228 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 229
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 230
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 230
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 49
Lexicase best total error: 89
Lexicase best mean error: 1.1125
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction 1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove 1 boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 49
Zero cases best number of zero cases: 49
Zero cases best total error: 89
Zero cases best mean error: 1.1125
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 394 379 374 377 319 324 369 343 346 420 456 363 370 408 396 367 311 358 226 385 260 161 188 179 198 370 310 314 357 378 357 439 416 413 429 404 378 420 390 261 181 266 242 337 383 469 422 425 493 449 448 525 657 660 664 666 666 666 667 324 403 405 508 547 436 510 529 496 445 471 453 469 470 512 482 516 494 453 360)
Population mean number of elite cases: 32.84
Count of perfect (error zero) individuals by case: (364 394 379 374 377 319 324 369 343 346 420 456 363 370 408 396 367 311 358 226 385 260 161 188 179 198 370 310 314 357 378 357 439 416 413 429 404 378 420 390 261 181 266 242 337 383 469 422 425 493 449 448 525 657 660 664 666 666 666 667 324 403 405 508 547 436 510 529 496 445 471 453 469 470 512 482 516 494 453 360)
Population mean number of perfect (error zero) cases: 32.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3502.513
Median total errors in population: 127
Error averages by case: (54.739 40.056 36.935 41.084 51.128 45.725 44.426 56.536 48.743 47.651 37.848 44.101 41.418 55.532 41.98 42.753 40.192 40.594 41.219 41.597 36.053 41.394 41.884 57.893 62.455 42.791 41.452 37.856 41.258 41.294 40.306 40.24 40.319 38.745 37.633 39.168 37.994 39.819 40.92 41.396 46.299 42.6 39.352 44.017 40.711 39.259 38.548 39.687 38.911 39.101 40.683 41.299 42.405 44.322 43.355 44.031 44.24 44.692 45.14 45.591 52.136 41.879 45.254 34.554 56.981 48.013 37.096 45.18 47.178 48.376 45.437 44.57 39.213 46.583 49.46 56.056 37.761 55.911 45.946 45.559)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.836
Average program size in population (points): 45.004
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.341
Error (vector) diversity:			 0.497
--- Run Statistics ---
Number of program evaluations used so far: 231000
Number of point (instruction) evaluations so far: 2097818961
--- Timings ---
Current time: 1481137053785 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 230
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 231
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 231
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 394 367 370 366 347 334 376 340 352 444 452 385 384 443 424 382 320 348 206 410 250 159 163 166 191 333 302 279 341 340 345 420 393 383 401 408 364 424 388 262 181 269 233 331 361 437 428 418 470 441 449 501 632 632 633 636 636 636 636 333 403 400 526 561 455 502 525 504 441 465 451 447 473 494 493 539 490 456 370)
Population mean number of elite cases: 32.41
Count of perfect (error zero) individuals by case: (367 394 367 370 366 347 334 376 340 352 444 452 385 384 443 424 382 320 348 206 410 250 159 163 166 191 333 302 279 341 340 345 420 393 383 401 408 364 424 388 262 181 269 233 331 361 437 428 418 470 441 449 501 632 632 633 636 636 636 636 333 403 400 526 561 455 502 525 504 441 465 451 447 473 494 493 539 490 456 370)
Population mean number of perfect (error zero) cases: 32.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5114.517
Median total errors in population: 153
Error averages by case: (66.694 59.066 55.003 55.243 61.358 61.802 61.504 70.713 73.058 77.745 55.378 55.518 54.789 89.539 61.078 57.973 60.671 58.148 58.283 60.997 54.042 64.507 64.936 71.856 93.59 66.739 61.076 58.083 57.545 59.055 59.157 61.328 60.57 60.3 59.258 61.631 60.656 63.449 61.202 63.003 64.386 57.64 58.386 60.169 60.946 63.556 59.054 59.971 61.311 64.945 61.279 63.171 63.943 64.115 64.817 65.076 65.547 66.032 66.507 66.992 70.043 59.859 72.281 53.379 76.964 69.015 54.326 63.326 72.226 67.535 76.494 59.591 63.867 67.506 77.48 69.811 54.222 81.068 64.909 66.229)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.924
Average program size in population (points): 45.208
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.357
Error (vector) diversity:			 0.51
--- Run Statistics ---
Number of program evaluations used so far: 232000
Number of point (instruction) evaluations so far: 2106798444
--- Timings ---
Current time: 1481137079975 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 231
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 232
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 232
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 367 343 372 355 308 279 373 320 333 420 438 360 363 402 371 342 271 327 212 408 261 181 189 179 223 323 313 259 362 369 357 430 396 397 388 396 379 407 402 229 177 273 252 320 384 438 411 418 494 459 456 510 639 639 642 644 645 644 644 286 389 386 507 525 443 488 528 480 440 444 463 456 439 511 519 501 494 441 399)
Population mean number of elite cases: 31.97
Count of perfect (error zero) individuals by case: (341 367 343 372 355 308 279 373 320 333 420 438 360 363 402 371 342 271 327 212 408 261 181 189 179 223 323 313 259 362 369 357 430 396 397 388 396 379 407 402 229 177 273 252 320 384 438 411 418 494 459 456 510 639 639 642 644 645 644 644 286 389 386 507 525 443 488 528 480 440 444 463 456 439 511 519 501 494 441 399)
Population mean number of perfect (error zero) cases: 31.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2.000005352096E9
Median total errors in population: 154
Error averages by case: (67.805 57.043 59.958 68.385 77.164 63.583 73.55 75.548 74.71 76.572 63.965 60.177 63.573 81.755 66.681 62.301 61.42 63.231 63.735 63.271 60.014 63.545 69.973 69.805 89.551 64.478 64.207 63.646 59.09 63.924 58.886 59.97 62.549 62.477 61.292 63.291 63.657 1.00000006216E9 65.173 62.698 74.261 67.483 60.067 64.907 63.61 64.064 60.716 62.295 61.935 64.323 62.25 1.000000063751E9 67.312 64.585 65.944 65.065 67.149 66.278 67.65 67.325 73.168 65.91 70.314 61.244 88.024 67.144 62.431 65.332 72.444 72.504 84.458 71.736 72.91 72.418 72.524 76.857 60.76 74.794 63.877 67.464)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.563
Average program size in population (points): 44.859
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.375
Error (vector) diversity:			 0.517
--- Run Statistics ---
Number of program evaluations used so far: 233000
Number of point (instruction) evaluations so far: 2115776382
--- Timings ---
Current time: 1481137106044 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 232
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 233
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 233
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (349 386 376 384 382 331 319 395 351 328 460 467 347 400 430 402 365 291 319 203 427 284 175 186 196 224 351 321 274 366 361 350 439 393 390 430 399 371 422 384 261 180 277 263 324 391 458 428 431 499 494 462 553 646 645 646 646 646 646 647 305 402 396 505 568 433 499 522 473 434 432 464 462 455 495 508 549 492 443 374)
Population mean number of elite cases: 32.78
Count of perfect (error zero) individuals by case: (349 386 376 384 382 331 319 395 351 328 460 467 347 400 430 402 365 291 319 203 427 284 175 186 196 224 351 321 274 366 361 350 439 393 390 430 399 371 422 384 261 180 277 263 324 391 458 428 431 499 494 462 553 646 645 646 646 646 646 647 305 402 396 505 568 433 499 522 473 434 432 464 462 455 495 508 549 492 443 374)
Population mean number of perfect (error zero) cases: 32.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4909.139
Median total errors in population: 145
Error averages by case: (66.744 49.06 51.933 62.197 69.086 57.723 60.436 60.31 65.924 78.675 56.347 49.213 52.584 72.496 54.72 54.63 58.365 51.497 57.839 56.68 50.96 51.523 54.62 64.532 96.268 57.414 56.134 53.593 52.499 55.263 54.926 51.055 63.845 58.862 54.314 69.4 57.455 54.616 56.777 76.82 58.471 56.741 58.203 55.539 58.286 54.963 54.869 85.978 56.742 79.298 82.962 56.039 96.172 58.705 59.376 58.842 60.055 59.51 59.958 60.408 64.105 60.897 60.303 50.764 77.803 66.11 53.193 54.42 61.453 56.488 78.347 62.339 65.795 56.452 70.542 77.688 54.993 68.663 59.666 60.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.811
Average program size in population (points): 44.963
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.351
Error (vector) diversity:			 0.499
--- Run Statistics ---
Number of program evaluations used so far: 234000
Number of point (instruction) evaluations so far: 2124766053
--- Timings ---
Current time: 1481137132286 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 233
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 234
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 234
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 378 353 352 362 336 276 345 318 337 431 445 383 393 422 394 365 268 328 217 429 276 165 210 202 192 355 296 258 385 366 381 424 406 408 399 421 367 403 397 275 183 283 270 325 378 446 411 418 483 459 436 517 617 617 618 618 618 618 618 319 405 402 546 567 463 518 531 498 430 458 426 454 458 497 494 542 500 475 380)
Population mean number of elite cases: 32.38
Count of perfect (error zero) individuals by case: (370 378 353 352 362 336 276 345 318 337 431 445 383 393 422 394 365 268 328 217 429 276 165 210 202 192 355 296 258 385 366 381 424 406 408 399 421 367 403 397 275 183 283 270 325 378 446 411 418 483 459 436 517 617 617 618 618 618 618 618 319 405 402 546 567 463 518 531 498 430 458 426 454 458 497 494 542 500 475 380)
Population mean number of perfect (error zero) cases: 32.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4846.521
Median total errors in population: 293/2
Error averages by case: (62.748 47.079 43.021 48.257 59.723 53.317 56.332 52.396 56.032 56.735 47.258 48.853 49.269 68.905 56.068 56.59 54.718 51.689 54.56 52.619 38.043 44.549 48.253 56.548 74.62 49.774 50.136 53.2 51.945 50.522 52.521 53.725 55.044 55.425 58.705 60.053 62.39 63.572 68.117 67.751 44.416 43.567 47.047 54.661 52.584 57.627 56.174 63.563 65.254 70.956 74.913 80.329 85.134 93.888 101.005 108.136 115.935 124.19 132.885 142.04 57.145 46.842 54.8 44.357 72.961 50.278 48.382 49.61 53.344 52.83 58.793 56.012 47.788 43.276 61.438 51.331 46.942 51.721 44.867 48.438)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.998
Average program size in population (points): 45.227
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.362
Error (vector) diversity:			 0.506
--- Run Statistics ---
Number of program evaluations used so far: 235000
Number of point (instruction) evaluations so far: 2133782902
--- Timings ---
Current time: 1481137158662 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 234
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 235
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 235
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 393 370 380 383 337 305 374 342 359 434 431 376 382 435 402 354 290 327 223 424 269 161 216 159 202 315 291 248 370 373 372 431 406 406 409 415 364 420 409 264 193 290 245 331 396 453 430 446 497 476 459 506 633 633 632 633 633 633 634 321 385 404 536 560 472 519 551 474 436 416 433 428 448 478 513 519 467 466 382)
Population mean number of elite cases: 32.53
Count of perfect (error zero) individuals by case: (352 393 370 380 383 337 305 374 342 359 434 431 376 382 435 402 354 290 327 223 424 269 161 216 159 202 315 291 248 370 373 372 431 406 406 409 415 364 420 409 264 193 290 245 331 396 453 430 446 497 476 459 506 633 633 632 633 633 633 634 321 385 404 536 560 472 519 551 474 436 416 433 428 448 478 513 519 467 466 382)
Population mean number of perfect (error zero) cases: 32.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 395668.389
Median total errors in population: 307/2
Error averages by case: (62.773 42.1 42.041 50.214 60.164 48.617 50.59 56.187 72.1 63.701 46.452 53.207 49.81 70.764 52.779 51.157 52.88 52.012 53.363 390754.083 40.189 39.701 53.619 70.12 70.091 51.013 48.439 50.803 51.693 50.806 55.362 51.54 52.492 57.321 56.142 61.053 62.21 66.151 67.333 70.702 60.747 46.76 47.252 55.58 54.148 54.505 58.047 64.329 64.431 71.242 79.021 81.693 86.47 94.462 100.422 109.036 114.899 123.215 131.97 141.184 60.08 50.945 62.308 43.244 67.109 54.171 44.353 58.344 59.868 57.041 59.236 51.474 49.25 49.994 60.982 64.887 45.184 66.694 54.884 57.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.714
Average program size in population (points): 44.899
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.363
Error (vector) diversity:			 0.513
--- Run Statistics ---
Number of program evaluations used so far: 236000
Number of point (instruction) evaluations so far: 2142825231
--- Timings ---
Current time: 1481137184809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 235
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 236
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 236
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 367 361 365 371 330 326 367 352 353 445 435 358 374 435 381 379 274 326 218 421 251 184 212 163 200 311 324 266 382 405 356 441 420 415 427 414 374 433 422 262 196 300 285 305 397 456 408 431 519 475 458 532 651 650 652 656 656 656 656 307 392 404 532 539 451 482 523 490 445 421 429 438 447 494 484 512 491 420 384)
Population mean number of elite cases: 32.66
Count of perfect (error zero) individuals by case: (334 367 361 365 371 330 326 367 352 353 445 435 358 374 435 381 379 274 326 218 421 251 184 212 163 200 311 324 266 382 405 356 441 420 415 427 414 374 433 422 262 196 300 285 305 397 456 408 431 519 475 458 532 651 650 652 656 656 656 656 307 392 404 532 539 451 482 523 490 445 421 429 438 447 494 484 512 491 420 384)
Population mean number of perfect (error zero) cases: 32.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4048.362
Median total errors in population: 285/2
Error averages by case: (67.467 48.052 43.047 49.331 60.456 44.095 50.699 52.995 59.924 61.485 44.287 49.838 44.193 66.369 48.157 43.581 48.052 45.62 46.868 44.829 44.005 42.633 52.029 58.072 67.337 47.079 44.112 44.078 49.803 46.571 46.098 46.142 44.303 46.378 45.507 46.349 46.683 49.981 50.982 49.051 55.425 52.656 45.265 48.103 44.032 48.164 44.01 47.806 45.351 48.833 51.605 46.631 48.587 46.383 49.312 47.603 48.353 48.885 49.403 49.935 60.101 58.843 58.298 45.498 73.096 52.165 50.318 53.357 58.521 47.522 59.721 46.168 48.082 47.478 59.67 62.274 50.153 60.866 48.911 54.44)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.778
Average program size in population (points): 45.109
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.362
Error (vector) diversity:			 0.49
--- Run Statistics ---
Number of program evaluations used so far: 237000
Number of point (instruction) evaluations so far: 2151842713
--- Timings ---
Current time: 1481137210913 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 236
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 237
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 237
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_fromboolean exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 391 359 367 384 338 288 374 334 358 429 442 378 364 435 410 403 303 353 225 416 272 187 211 186 224 348 321 300 373 376 373 421 396 399 404 381 349 394 391 261 208 274 252 279 383 439 394 435 494 462 460 526 648 647 647 651 651 651 651 314 395 397 549 573 473 508 544 499 430 435 450 450 456 492 521 506 496 454 400)
Population mean number of elite cases: 32.74
Count of perfect (error zero) individuals by case: (333 391 359 367 384 338 288 374 334 358 429 442 378 364 435 410 403 303 353 225 416 272 187 211 186 224 348 321 300 373 376 373 421 396 399 404 381 349 394 391 261 208 274 252 279 383 439 394 435 494 462 460 526 648 647 647 651 651 651 651 314 395 397 549 573 473 508 544 499 430 435 450 450 456 492 521 506 496 454 400)
Population mean number of perfect (error zero) cases: 32.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4177.699
Median total errors in population: 303/2
Error averages by case: (61.816 43.149 45.92 60.136 56.284 43.095 53.497 53.685 64.721 65.993 43.063 44.137 51.485 77.826 56.382 46.913 43.684 44.367 45.544 47.751 51.085 46.578 58.688 56.848 75.006 45.877 44.861 45.291 46.087 45.976 48.128 48.498 50.276 48.084 47.15 48.69 51.102 51.261 48.788 52.543 57.244 52.562 45.886 48.166 45.719 47.831 47.633 47.307 49.87 50.46 55.114 51.107 50.024 50.728 51.325 51.48 51.846 52.489 52.875 53.269 56.159 52.908 62.367 41.528 72.039 53.01 51.132 48.272 53.24 54.504 67.474 47.39 47.864 52.51 66.486 56.951 51.985 63.532 53.598 51.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.879
Average program size in population (points): 45.191
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.362
Error (vector) diversity:			 0.496
--- Run Statistics ---
Number of program evaluations used so far: 238000
Number of point (instruction) evaluations so far: 2160887679
--- Timings ---
Current time: 1481137237397 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 237
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 238
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 238
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 396 367 363 411 354 334 390 355 379 440 433 377 370 430 414 370 304 345 242 395 254 171 226 184 221 344 332 284 370 363 363 420 402 423 401 413 350 398 408 240 189 286 274 325 368 432 407 428 490 465 450 507 635 634 635 641 641 641 642 313 374 402 536 552 463 502 538 494 457 426 448 438 440 485 479 494 447 459 415)
Population mean number of elite cases: 32.65
Count of perfect (error zero) individuals by case: (357 396 367 363 411 354 334 390 355 379 440 433 377 370 430 414 370 304 345 242 395 254 171 226 184 221 344 332 284 370 363 363 420 402 423 401 413 350 398 408 240 189 286 274 325 368 432 407 428 490 465 450 507 635 634 635 641 641 641 642 313 374 402 536 552 463 502 538 494 457 426 448 438 440 485 479 494 447 459 415)
Population mean number of perfect (error zero) cases: 32.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3913.281
Median total errors in population: 153
Error averages by case: (54.766 42.99 40.886 60.116 52.123 45.706 46.39 50.664 62.513 57.189 44.137 45.943 42.596 68.378 51.474 44.713 45.853 45.806 45.507 44.436 41.078 42.577 43.966 50.817 68.147 45.048 41.264 40.033 44.479 43.178 42.431 44.488 46.034 47.615 45.575 44.565 46.522 47.494 49.608 50.313 50.344 45.735 45.822 45.676 42.55 42.617 48.713 49.974 48.368 48.285 49.828 47.0 49.686 48.163 49.721 49.51 50.833 50.636 51.202 51.773 56.082 44.878 62.3 41.514 75.958 52.993 51.166 48.321 52.161 44.247 44.395 53.408 46.877 44.445 57.509 53.307 42.966 56.8 50.468 49.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.845
Average program size in population (points): 45.174
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.368
Error (vector) diversity:			 0.495
--- Run Statistics ---
Number of program evaluations used so far: 239000
Number of point (instruction) evaluations so far: 2169957614
--- Timings ---
Current time: 1481137263841 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 238
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 239
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 239
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 402 360 367 382 333 312 373 369 352 432 437 355 355 389 390 353 317 347 224 419 253 203 218 203 226 352 345 312 384 381 391 463 423 436 437 427 395 418 448 254 167 275 280 293 372 417 382 436 472 441 440 511 634 634 637 640 640 640 640 312 405 410 530 537 479 522 547 507 452 428 453 444 411 479 476 522 483 444 381)
Population mean number of elite cases: 32.74
Count of perfect (error zero) individuals by case: (334 402 360 367 382 333 312 373 369 352 432 437 355 355 389 390 353 317 347 224 419 253 203 218 203 226 352 345 312 384 381 391 463 423 436 437 427 395 418 448 254 167 275 280 293 372 417 382 436 472 441 440 511 634 634 637 640 640 640 640 312 405 410 530 537 479 522 547 507 452 428 453 444 411 479 476 522 483 444 381)
Population mean number of perfect (error zero) cases: 32.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3615.015
Median total errors in population: 141
Error averages by case: (50.782 41.049 36.906 46.246 51.166 43.81 46.616 53.845 50.704 57.206 37.937 43.065 41.828 64.554 46.993 42.04 43.295 41.661 45.866 39.464 36.013 39.529 43.864 47.098 57.073 46.788 40.454 38.515 39.02 39.189 40.485 44.531 38.967 45.001 39.718 39.856 41.872 40.816 42.42 42.977 52.331 36.098 45.426 41.703 43.836 44.845 40.214 40.748 44.82 45.444 50.957 44.151 46.141 44.563 44.855 46.338 47.075 48.587 49.09 49.607 55.084 43.826 48.313 37.603 66.057 43.015 42.095 40.222 51.26 41.366 56.616 39.304 41.96 51.485 49.702 46.566 38.961 54.751 46.888 43.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.072
Average program size in population (points): 45.333
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.356
Error (vector) diversity:			 0.507
--- Run Statistics ---
Number of program evaluations used so far: 240000
Number of point (instruction) evaluations so far: 2179043517
--- Timings ---
Current time: 1481137290317 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 239
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 240
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 240
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 395 343 365 374 324 314 380 342 368 435 433 390 366 408 390 346 293 352 223 433 257 164 203 162 215 342 298 279 371 362 353 417 391 400 400 393 376 394 408 258 208 290 265 308 395 448 395 449 474 446 451 501 632 632 635 636 636 636 636 344 398 382 541 545 483 518 526 513 456 446 447 432 446 472 445 504 485 448 382)
Population mean number of elite cases: 32.34
Count of perfect (error zero) individuals by case: (339 395 343 365 374 324 314 380 342 368 435 433 390 366 408 390 346 293 352 223 433 257 164 203 162 215 342 298 279 371 362 353 417 391 400 400 393 376 394 408 258 208 290 265 308 395 448 395 449 474 446 451 501 632 632 635 636 636 636 636 344 398 382 541 545 483 518 526 513 456 446 447 432 446 472 445 504 485 448 382)
Population mean number of perfect (error zero) cases: 32.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3.284618330731E9
Median total errors in population: 283/2
Error averages by case: (59.777 52.024 50.996 61.228 58.285 58.023 59.673 69.704 69.952 1.000000079245E9 65.394 57.458 57.592 86.213 56.663 58.178 56.254 56.523 57.123 55.171 50.011 60.524 1280060.973 66.178 5.4486517184E7 1.0897343336E7 55.396 54.535 1.000000056158E9 3656.652 419.024 57.227 57.821 59.995 59.789 59.741 58.066 61.504 62.285 60.64 69.34 57.733 56.13 58.286 54.81 56.821 58.775 1.000000060209E9 59.497 61.194 65.116 62.475 63.583 63.173 64.87 65.122 64.602 65.085 65.562 66.045 55.047 55.886 61.374 52.483 78.995 59.019 60.189 61.514 61.342 53.352 73.201 59.52 62.152 66.629 73.774 68.535 2.1794578706E8 65.905 66.128 67.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.519
Average program size in population (points): 44.773
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.344
Error (vector) diversity:			 0.479
--- Run Statistics ---
Number of program evaluations used so far: 241000
Number of point (instruction) evaluations so far: 2187954883
--- Timings ---
Current time: 1481137316390 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 240
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 241
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 241
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 389 318 356 345 332 283 344 325 352 420 413 366 355 406 365 365 302 353 239 434 260 157 194 176 232 342 320 286 357 355 394 430 401 426 409 414 378 416 399 242 199 281 292 313 372 441 396 424 499 454 450 492 626 626 628 628 630 631 631 340 430 399 558 535 501 543 555 544 476 470 468 460 472 531 495 527 495 453 388)
Population mean number of elite cases: 32.67
Count of perfect (error zero) individuals by case: (366 389 318 356 345 332 283 344 325 352 420 413 366 355 406 365 365 302 353 239 434 260 157 194 176 232 342 320 286 357 355 394 430 401 426 409 414 378 416 399 242 199 281 292 313 372 441 396 424 499 454 450 492 626 626 628 628 630 631 631 340 430 399 558 535 501 543 555 544 476 470 468 460 472 531 495 527 495 453 388)
Population mean number of perfect (error zero) cases: 32.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1284145.685
Median total errors in population: 153
Error averages by case: (64.705 45.006 46.975 59.161 59.232 48.94 56.695 57.542 58.767 61.183 49.328 46.584 45.816 75.618 48.423 46.991 42.704 46.524 50.01 44.093 42.013 51.49 1280053.965 57.262 67.898 49.758 46.575 47.099 45.969 43.448 45.631 43.283 47.837 49.417 47.566 49.27 48.211 47.499 48.756 46.856 64.29 50.744 49.335 46.032 46.445 44.917 48.096 46.638 47.791 48.998 52.698 49.173 49.268 50.368 50.781 52.191 51.863 53.294 52.727 53.164 55.994 51.761 59.272 42.475 80.006 46.976 50.093 60.395 54.277 46.422 55.449 51.606 51.984 66.761 62.717 62.195 44.863 55.078 52.83 51.618)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.673
Average program size in population (points): 44.834
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.355
Error (vector) diversity:			 0.505
--- Run Statistics ---
Number of program evaluations used so far: 242000
Number of point (instruction) evaluations so far: 2197018509
--- Timings ---
Current time: 1481137342730 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 241
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 242
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 242
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 405 381 365 402 346 289 348 345 378 441 428 389 367 439 422 359 302 341 199 410 275 195 219 158 204 324 309 292 377 365 382 420 390 416 404 406 372 427 405 270 181 295 251 321 361 434 387 424 496 422 446 510 620 620 623 623 622 623 622 329 403 413 547 560 457 510 520 502 433 423 434 426 439 508 496 517 510 451 399)
Population mean number of elite cases: 32.48
Count of perfect (error zero) individuals by case: (358 405 381 365 402 346 289 348 345 378 441 428 389 367 439 422 359 302 341 199 410 275 195 219 158 204 324 309 292 377 365 382 420 390 416 404 406 372 427 405 270 181 295 251 321 361 434 387 424 496 422 446 510 620 620 623 623 622 623 622 329 403 413 547 560 457 510 520 502 433 423 434 426 439 508 496 517 510 451 399)
Population mean number of perfect (error zero) cases: 32.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop integer_dec boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop integer_dec boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4585.226
Median total errors in population: 265/2
Error averages by case: (66.701 51.049 42.908 59.142 64.226 52.739 60.897 61.811 61.023 70.858 57.014 54.399 52.479 88.635 51.245 50.924 51.886 52.864 55.83 54.294 42.04 49.52 57.977 64.998 83.319 57.092 51.897 55.054 53.226 55.168 52.961 51.526 55.568 55.158 54.272 54.656 55.267 59.356 60.331 59.052 65.286 50.921 55.072 52.548 54.408 56.901 54.901 54.797 59.506 58.288 58.618 58.852 58.75 58.419 60.208 59.786 61.369 60.965 62.539 62.429 54.031 47.815 54.277 46.431 70.915 49.07 53.162 56.339 61.264 52.375 73.548 53.576 54.06 54.616 63.641 60.418 52.119 59.934 57.201 56.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.593
Average program size in population (points): 44.776
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.346
Error (vector) diversity:			 0.485
--- Run Statistics ---
Number of program evaluations used so far: 243000
Number of point (instruction) evaluations so far: 2206001271
--- Timings ---
Current time: 1481137369046 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 242
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 243
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 243
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 434 376 372 406 336 270 338 327 339 406 410 363 342 423 417 367 310 361 205 401 279 196 213 169 222 344 295 312 372 383 383 432 412 418 394 417 371 414 415 278 229 279 259 317 355 444 414 414 492 437 456 513 631 631 630 632 632 632 633 365 438 395 512 550 457 517 560 530 442 441 440 456 441 506 487 544 517 471 404)
Population mean number of elite cases: 32.79
Count of perfect (error zero) individuals by case: (363 434 376 372 406 336 270 338 327 339 406 410 363 342 423 417 367 310 361 205 401 279 196 213 169 222 344 295 312 372 383 383 432 412 418 394 417 371 414 415 278 229 279 259 317 355 444 414 414 492 437 456 513 631 631 630 632 632 632 633 365 438 395 512 550 457 517 560 530 442 441 440 456 441 506 487 544 517 471 404)
Population mean number of perfect (error zero) cases: 32.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_invert_first_then_and integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_invert_first_then_and integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4861.947
Median total errors in population: 277/2
Error averages by case: (75.711 54.955 50.973 66.009 55.094 57.836 66.769 65.778 70.691 77.686 58.163 57.977 56.495 99.332 58.132 56.544 55.796 58.892 55.577 54.112 54.053 54.409 63.775 66.859 93.034 57.599 54.32 56.174 53.804 54.556 56.077 54.445 55.698 56.161 59.048 57.742 56.482 59.56 59.54 59.101 65.218 59.411 55.559 57.494 54.074 55.902 56.432 56.144 58.201 59.364 61.559 58.522 59.083 60.067 62.389 60.922 63.434 61.97 64.484 63.017 58.998 55.798 69.332 53.571 75.872 55.037 59.073 58.221 61.132 52.485 77.275 56.504 59.883 57.736 72.568 69.895 57.83 62.514 61.666 58.352)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.747
Average program size in population (points): 44.865
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.336
Error (vector) diversity:			 0.479
--- Run Statistics ---
Number of program evaluations used so far: 244000
Number of point (instruction) evaluations so far: 2215068140
--- Timings ---
Current time: 1481137395251 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 243
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 244
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 244
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 418 371 379 392 342 261 369 375 372 459 462 392 408 453 430 384 327 381 200 419 273 187 222 168 204 343 287 278 374 371 359 438 413 428 415 411 392 395 420 267 195 287 279 292 400 433 419 434 505 456 463 522 645 646 648 650 650 650 650 327 413 403 550 565 499 537 559 517 460 444 439 452 431 492 507 532 478 464 411)
Population mean number of elite cases: 33.31
Count of perfect (error zero) individuals by case: (368 418 371 379 392 342 261 369 375 372 459 462 392 408 453 430 384 327 381 200 419 273 187 222 168 204 343 287 278 374 371 359 438 413 428 415 411 392 395 420 267 195 287 279 292 400 433 419 434 505 456 463 522 645 646 648 650 650 650 650 327 413 403 550 565 499 537 559 517 460 444 439 452 431 492 507 532 478 464 411)
Population mean number of perfect (error zero) cases: 33.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5345.561
Median total errors in population: 124
Error averages by case: (61.734 43.06 45.0 52.216 57.472 52.478 60.419 63.196 61.775 63.894 57.471 60.656 52.256 75.547 61.283 52.93 60.796 57.904 57.333 58.05 41.023 46.693 57.386 71.491 76.67 57.159 50.862 52.852 58.961 57.757 59.534 61.522 62.297 61.512 65.608 67.804 68.674 70.343 74.702 77.202 64.568 57.405 63.71 59.898 59.982 62.536 64.257 66.494 72.767 76.262 89.578 87.176 95.41 100.039 109.79 113.967 124.8 130.107 141.84 148.047 64.067 54.815 67.32 46.443 71.978 51.078 44.197 52.373 56.488 51.867 65.92 50.135 53.533 56.423 72.522 63.152 52.853 68.626 64.822 52.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.652
Average program size in population (points): 44.863
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.341
Error (vector) diversity:			 0.466
--- Run Statistics ---
Number of program evaluations used so far: 245000
Number of point (instruction) evaluations so far: 2224106555
--- Timings ---
Current time: 1481137421502 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 244
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 245
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 245
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (integer_flush) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (integer_flush) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (integer_flush) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_yank integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (integer_flush) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (354 416 347 370 396 316 293 358 330 329 418 445 378 381 399 411 373 291 359 226 405 277 160 244 179 213 328 308 300 372 369 376 444 422 437 407 404 382 438 418 256 191 298 258 298 367 454 409 407 501 429 451 506 639 641 643 645 646 647 648 353 441 422 561 572 478 518 551 534 446 465 444 437 428 508 519 533 486 480 422)
Population mean number of elite cases: 33.01
Count of perfect (error zero) individuals by case: (354 416 347 370 396 316 293 358 330 329 418 445 378 381 399 411 373 291 359 226 405 277 160 244 179 213 328 308 300 372 369 376 444 422 437 407 404 382 438 418 256 191 298 258 298 367 454 409 407 501 429 451 506 639 641 643 645 646 647 648 353 441 422 561 572 478 518 551 534 446 465 444 437 428 508 519 533 486 480 422)
Population mean number of perfect (error zero) cases: 33.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.30770918879E8
Median total errors in population: 131
Error averages by case: (52.722 35.066 35.014 46.329 46.644 41.816 51.478 43.41 58.907 54.428 36.602 37.066 37.111 62.128 43.063 39.025 39.386 40.753 45.549 38.608 31.102 34.546 48.511 51.511 8.7178357919E7 41.967 37.386 41.751 38.591 38.802 36.926 38.28 38.901 42.984 39.866 41.486 39.493 40.892 40.605 40.545 38.57 44.711 40.131 39.253 40.32 40.81 39.255 39.607 40.774 41.603 46.358 42.22 43.605 44.996 47.787 45.444 50.115 48.569 52.008 48.467 52.026 44.784 47.315 33.457 53.037 38.247 36.431 36.547 45.55 35.91 51.862 41.152 45.742 46.728 55.595 51.963 39.129 47.882 50.236 4.3589183514E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.902
Average program size in population (points): 45.202
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.357
Error (vector) diversity:			 0.493
--- Run Statistics ---
Number of program evaluations used so far: 246000
Number of point (instruction) evaluations so far: 2233221266
--- Timings ---
Current time: 1481137447771 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 245
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 246
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 246
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (351 417 341 334 382 298 283 372 337 365 439 436 384 392 446 430 369 288 383 222 415 287 176 216 171 217 319 302 289 371 364 368 429 403 400 391 384 358 383 407 257 226 291 248 307 375 476 409 440 515 471 488 508 641 641 642 643 643 644 644 356 416 419 559 560 492 513 554 522 438 476 454 454 450 508 483 533 507 470 404)
Population mean number of elite cases: 33.00
Count of perfect (error zero) individuals by case: (351 417 341 334 382 298 283 372 337 365 439 436 384 392 446 430 369 288 383 222 415 287 176 216 171 217 319 302 289 371 364 368 429 403 400 391 384 358 383 407 257 226 291 248 307 375 476 409 440 515 471 488 508 641 641 642 643 643 644 644 356 416 419 559 560 492 513 554 522 438 476 454 454 450 508 483 533 507 470 404)
Population mean number of perfect (error zero) cases: 33.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000004753912E9
Median total errors in population: 137
Error averages by case: (54.74 42.032 41.922 55.238 47.132 48.902 1.000000062118E9 58.595 55.889 73.395 52.002 47.136 49.991 73.229 57.025 49.669 51.352 55.724 64.001 55.435 42.034 44.446 55.922 56.302 78.383 50.783 49.196 216.297 50.836 59.228 48.494 62.933 63.109 65.409 67.597 71.465 71.269 57.509 57.984 79.574 57.162 57.662 50.981 54.684 59.696 53.254 69.116 57.158 57.085 81.91 63.315 58.385 59.133 60.38 63.572 62.216 65.376 62.792 65.904 63.305 59.016 46.775 61.324 45.399 69.986 49.009 47.137 54.322 53.179 50.525 60.404 52.457 51.906 51.681 61.69 65.001 45.94 50.845 51.911 58.022)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.739
Average program size in population (points): 44.924
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.358
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 247000
Number of point (instruction) evaluations so far: 2242253233
--- Timings ---
Current time: 1481137473990 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 246
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 247
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 247
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 395 324 331 371 292 284 359 340 349 429 427 357 360 421 431 361 292 343 205 430 250 160 204 177 238 331 317 296 381 357 365 462 438 411 415 437 389 428 443 250 192 281 273 319 388 458 409 405 495 458 463 497 617 618 623 623 625 626 627 330 399 384 603 598 501 533 558 535 443 487 450 458 438 502 513 540 496 462 431)
Population mean number of elite cases: 32.87
Count of perfect (error zero) individuals by case: (361 395 324 331 371 292 284 359 340 349 429 427 357 360 421 431 361 292 343 205 430 250 160 204 177 238 331 317 296 381 357 365 462 438 411 415 437 389 428 443 250 192 281 273 319 388 458 409 405 495 458 463 497 617 618 623 623 625 626 627 330 399 384 603 598 501 533 558 535 443 487 450 458 438 502 513 540 496 462 431)
Population mean number of perfect (error zero) cases: 32.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4238.762
Median total errors in population: 127
Error averages by case: (68.728 46.172 48.992 51.366 53.12 51.144 54.112 58.794 67.777 61.284 42.876 49.079 48.505 80.946 55.456 47.733 49.02 46.518 50.126 46.446 43.006 45.623 49.872 61.484 74.509 51.039 50.605 52.155 47.681 46.832 49.752 49.995 48.458 49.069 49.74 50.688 46.657 48.409 50.19 51.274 53.211 48.761 57.21 52.1 48.324 46.822 49.636 48.965 49.214 50.069 55.735 50.381 51.999 54.728 56.51 54.903 59.048 55.712 59.819 56.222 65.093 55.836 57.429 39.363 65.918 51.032 48.172 50.261 50.15 49.561 55.337 48.476 50.015 55.728 68.405 58.145 49.749 53.07 59.781 52.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0N 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.015
Average program size in population (points): 45.487
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.367
Error (vector) diversity:			 0.504
--- Run Statistics ---
Number of program evaluations used so far: 248000
Number of point (instruction) evaluations so far: 2251256617
--- Timings ---
Current time: 1481137500190 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 247
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 248
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 248
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_pop integer_gte integer_rot integer_fromboolean boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (349 396 363 383 399 316 304 375 345 360 449 488 366 401 427 429 376 298 352 214 414 250 160 201 155 181 313 295 276 389 390 358 445 416 405 427 408 368 414 420 260 185 292 245 291 388 459 398 433 515 441 481 500 627 626 628 630 631 630 630 344 403 379 571 584 474 511 548 528 451 464 463 446 440 520 497 510 487 500 375)
Population mean number of elite cases: 32.86
Count of perfect (error zero) individuals by case: (349 396 363 383 399 316 304 375 345 360 449 488 366 401 427 429 376 298 352 214 414 250 160 201 155 181 313 295 276 389 390 358 445 416 405 427 408 368 414 420 260 185 292 245 291 388 459 398 433 515 441 481 500 627 626 628 630 631 630 630 344 403 379 571 584 474 511 548 528 451 464 463 446 440 520 497 510 487 500 375)
Population mean number of perfect (error zero) cases: 32.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 3934.187
Median total errors in population: 131
Error averages by case: (61.765 38.062 36.471 42.14 44.15 45.097 49.761 53.726 53.829 65.216 50.035 47.661 47.616 69.311 57.832 52.033 51.313 47.488 45.456 43.389 38.049 41.603 45.976 54.027 72.493 54.287 43.303 44.208 45.727 42.078 45.098 45.442 44.976 56.108 44.86 45.425 43.311 47.556 44.545 46.577 41.366 46.687 45.915 52.127 52.369 44.399 44.542 45.039 44.542 48.602 51.548 47.194 50.473 49.254 52.948 50.915 54.924 51.429 55.914 52.716 65.018 46.855 53.431 40.31 61.961 41.08 38.092 46.195 43.21 45.536 63.48 43.641 43.998 47.962 62.317 52.013 45.035 54.255 53.203 55.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.654
Average program size in population (points): 44.955
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.349
Error (vector) diversity:			 0.486
--- Run Statistics ---
Number of program evaluations used so far: 249000
Number of point (instruction) evaluations so far: 2260265276
--- Timings ---
Current time: 1481137526470 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 248
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 249
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 249
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank integer_fromboolean integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank integer_fromboolean integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank integer_fromboolean integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank integer_fromboolean integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 393 357 357 403 328 315 362 335 364 459 477 366 396 434 443 379 284 376 223 397 278 187 227 186 217 318 322 286 398 390 355 462 428 435 456 426 398 416 418 225 193 293 259 313 382 468 395 444 522 474 474 537 647 648 650 650 650 650 650 354 417 392 558 556 495 500 538 510 447 449 452 455 461 518 505 518 493 471 378)
Population mean number of elite cases: 33.41
Count of perfect (error zero) individuals by case: (364 393 357 357 403 328 315 362 335 364 459 477 366 396 434 443 379 284 376 223 397 278 187 227 186 217 318 322 286 398 390 355 462 428 435 456 426 398 416 418 225 193 293 259 313 382 468 395 444 522 474 474 537 647 648 650 650 650 650 650 354 417 392 558 556 495 500 538 510 447 449 452 455 461 518 505 518 493 471 378)
Population mean number of perfect (error zero) cases: 33.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 14403.156
Median total errors in population: 124
Error averages by case: (60.756 49.411 47.748 59.738 63.887 57.837 68.205 65.164 75.418 80.442 71.485 71.494 78.881 105.281 87.208 83.602 97.066 101.399 107.767 108.055 45.241 47.557 58.227 68.69 99.403 69.994 78.973 82.012 99.056 106.274 127.187 133.952 158.52 169.303 194.074 209.005 237.54 253.406 284.01 301.622 63.957 66.818 78.368 92.184 115.266 147.028 181.151 221.694 268.067 320.637 377.365 439.34 507.161 580.131 660.59 742.453 834.712 926.652 1029.721 1132.212 59.021 57.791 59.471 46.786 83.612 50.307 53.174 55.437 57.145 55.627 68.45 54.866 60.749 67.096 77.367 70.572 61.176 69.977 71.859 72.276)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.755
Average program size in population (points): 44.998
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.336
Error (vector) diversity:			 0.463
--- Run Statistics ---
Number of program evaluations used so far: 250000
Number of point (instruction) evaluations so far: 2269306768
--- Timings ---
Current time: 1481137552934 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 249
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 250
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 250
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Lexicase best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 51
Lexicase best total error: 88
Lexicase best mean error: 1.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best partial simplification: (boolean_eq integer_gte integer_rot integer_mod boolean_shove boolean_xor exec_dup () exec_s (boolean_invert_second_then_and) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty integer_dup_items) exec_noop integer_inc integer_swap exec_yankdup boolean_yankdup integer_mult integer_fromboolean integer_dup_times integer_rot integer_shove integer_yank boolean_pop integer_lte exec_dup_items)
Zero cases best errors: [0 1 1 1 1 1 1 1 1 1 0 0 47 0 0 1 0 1 0 3 0 2 2 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 2 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 51
Zero cases best number of zero cases: 51
Zero cases best total error: 88
Zero cases best mean error: 1.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 420 331 365 391 330 276 346 336 373 431 436 365 365 431 396 335 277 335 236 433 281 193 209 174 225 320 282 269 373 355 368 429 395 414 381 412 351 389 411 275 197 282 258 321 360 454 423 430 501 464 461 500 624 623 625 628 627 627 627 347 427 387 589 547 475 520 560 515 438 430 431 454 434 497 487 532 463 460 378)
Population mean number of elite cases: 32.48
Count of perfect (error zero) individuals by case: (364 420 331 365 391 330 276 346 336 373 431 436 365 365 431 396 335 277 335 236 433 281 193 209 174 225 320 282 269 373 355 368 429 395 414 381 412 351 389 411 275 197 282 258 321 360 454 423 430 501 464 461 500 624 623 625 628 627 627 627 347 427 387 589 547 475 520 560 515 438 430 431 454 434 497 487 532 463 460 378)
Population mean number of perfect (error zero) cases: 32.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction 3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 1, :instruction 3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 5} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Partial simplification: (boolean_pop integer_gte boolean_pop boolean_pop boolean_invert_first_then_and exec_dup () exec_s (3) (integer_mult integer_shove 3) (exec_do*range (in1 exec_dup_items exec_do*range (in1 exec_yankdup integer_fromboolean) boolean_stackdepth integer_min integer_fromboolean) boolean_stackdepth boolean_empty boolean_stackdepth) boolean_not boolean_stackdepth integer_inc boolean_stackdepth boolean_stackdepth integer_div 5 integer_fromboolean boolean_stackdepth integer_min integer_dup exec_dup_times (boolean_empty exec_yank) boolean_not boolean_frominteger integer_fromboolean boolean_stackdepth integer_min boolean_dup_times)
Errors: [0 2 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 3 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 2 3 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1]
Total: 44
Mean: 0.55
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.000005591773E9
Median total errors in population: 285/2
Error averages by case: (64.715 49.171 49.192 51.494 59.734 54.331 69.748 58.592 61.921 68.528 50.504 51.805 56.702 78.957 63.991 58.944 62.041 59.249 67.585 64.271 45.035 50.573 59.27 68.749 88.301 52.67 56.155 57.882 64.283 63.081 60.083 66.361 68.33 77.891 67.788 71.941 72.838 79.679 79.848 76.735 67.557 55.75 59.013 62.386 63.102 68.038 67.736 72.984 73.698 81.207 92.345 94.41 97.242 103.309 113.092 118.528 129.405 135.757 146.538 153.787 54.094 53.816 57.387 47.238 80.147 55.294 55.491 53.439 58.639 51.742 79.802 56.969 54.24 1.000000059286E9 78.386 64.657 51.782 64.021 66.871 63.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.975
Average program size in population (points): 45.296
Average percent parens in population: 0.161
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.353
Error (vector) diversity:			 0.484
--- Run Statistics ---
Number of program evaluations used so far: 251000
Number of point (instruction) evaluations so far: 2278283144
--- Timings ---
Current time: 1481137579259 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 250
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
